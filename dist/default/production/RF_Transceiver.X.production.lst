

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed May 17 01:21:55 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 1.41
    21                           ; Generated 25/01/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F1503 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000E                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  008C                     	;# 
    81  008E                     	;# 
    82  0091                     	;# 
    83  0092                     	;# 
    84  0093                     	;# 
    85  0095                     	;# 
    86  0096                     	;# 
    87  0097                     	;# 
    88  0099                     	;# 
    89  009A                     	;# 
    90  009B                     	;# 
    91  009B                     	;# 
    92  009C                     	;# 
    93  009D                     	;# 
    94  009E                     	;# 
    95  009F                     	;# 
    96  010C                     	;# 
    97  010E                     	;# 
    98  0111                     	;# 
    99  0112                     	;# 
   100  0113                     	;# 
   101  0114                     	;# 
   102  0115                     	;# 
   103  0116                     	;# 
   104  0117                     	;# 
   105  0118                     	;# 
   106  0119                     	;# 
   107  011D                     	;# 
   108  018C                     	;# 
   109  018E                     	;# 
   110  0191                     	;# 
   111  0191                     	;# 
   112  0192                     	;# 
   113  0193                     	;# 
   114  0193                     	;# 
   115  0194                     	;# 
   116  0195                     	;# 
   117  0196                     	;# 
   118  0197                     	;# 
   119  020C                     	;# 
   120  0211                     	;# 
   121  0211                     	;# 
   122  0212                     	;# 
   123  0212                     	;# 
   124  0213                     	;# 
   125  0213                     	;# 
   126  0214                     	;# 
   127  0214                     	;# 
   128  0215                     	;# 
   129  0215                     	;# 
   130  0215                     	;# 
   131  0216                     	;# 
   132  0216                     	;# 
   133  0217                     	;# 
   134  0217                     	;# 
   135  0391                     	;# 
   136  0392                     	;# 
   137  0393                     	;# 
   138  0498                     	;# 
   139  0498                     	;# 
   140  0499                     	;# 
   141  049A                     	;# 
   142  049B                     	;# 
   143  049B                     	;# 
   144  049C                     	;# 
   145  049D                     	;# 
   146  049E                     	;# 
   147  049F                     	;# 
   148  0611                     	;# 
   149  0612                     	;# 
   150  0613                     	;# 
   151  0613                     	;# 
   152  0614                     	;# 
   153  0615                     	;# 
   154  0616                     	;# 
   155  0616                     	;# 
   156  0617                     	;# 
   157  0618                     	;# 
   158  0619                     	;# 
   159  0619                     	;# 
   160  061A                     	;# 
   161  061B                     	;# 
   162  061C                     	;# 
   163  061C                     	;# 
   164  0691                     	;# 
   165  0692                     	;# 
   166  0693                     	;# 
   167  0694                     	;# 
   168  0695                     	;# 
   169  0F0F                     	;# 
   170  0F10                     	;# 
   171  0F11                     	;# 
   172  0F12                     	;# 
   173  0F13                     	;# 
   174  0F14                     	;# 
   175  0F15                     	;# 
   176  0F16                     	;# 
   177  0F17                     	;# 
   178  0F18                     	;# 
   179  0F19                     	;# 
   180  0F1A                     	;# 
   181  0F1B                     	;# 
   182  0F1C                     	;# 
   183  0F1D                     	;# 
   184  0F1E                     	;# 
   185  0F1F                     	;# 
   186  0FE3                     	;# 
   187  0FE4                     	;# 
   188  0FE5                     	;# 
   189  0FE6                     	;# 
   190  0FE7                     	;# 
   191  0FE8                     	;# 
   192  0FE9                     	;# 
   193  0FEA                     	;# 
   194  0FEB                     	;# 
   195  0FED                     	;# 
   196  0FEE                     	;# 
   197  0FEF                     	;# 
   198  0000                     	;# 
   199  0001                     	;# 
   200  0002                     	;# 
   201  0003                     	;# 
   202  0004                     	;# 
   203  0005                     	;# 
   204  0006                     	;# 
   205  0007                     	;# 
   206  0008                     	;# 
   207  0009                     	;# 
   208  000A                     	;# 
   209  000B                     	;# 
   210  000C                     	;# 
   211  000E                     	;# 
   212  0011                     	;# 
   213  0012                     	;# 
   214  0013                     	;# 
   215  0015                     	;# 
   216  0016                     	;# 
   217  0016                     	;# 
   218  0017                     	;# 
   219  0018                     	;# 
   220  0019                     	;# 
   221  001A                     	;# 
   222  001B                     	;# 
   223  001C                     	;# 
   224  008C                     	;# 
   225  008E                     	;# 
   226  0091                     	;# 
   227  0092                     	;# 
   228  0093                     	;# 
   229  0095                     	;# 
   230  0096                     	;# 
   231  0097                     	;# 
   232  0099                     	;# 
   233  009A                     	;# 
   234  009B                     	;# 
   235  009B                     	;# 
   236  009C                     	;# 
   237  009D                     	;# 
   238  009E                     	;# 
   239  009F                     	;# 
   240  010C                     	;# 
   241  010E                     	;# 
   242  0111                     	;# 
   243  0112                     	;# 
   244  0113                     	;# 
   245  0114                     	;# 
   246  0115                     	;# 
   247  0116                     	;# 
   248  0117                     	;# 
   249  0118                     	;# 
   250  0119                     	;# 
   251  011D                     	;# 
   252  018C                     	;# 
   253  018E                     	;# 
   254  0191                     	;# 
   255  0191                     	;# 
   256  0192                     	;# 
   257  0193                     	;# 
   258  0193                     	;# 
   259  0194                     	;# 
   260  0195                     	;# 
   261  0196                     	;# 
   262  0197                     	;# 
   263  020C                     	;# 
   264  0211                     	;# 
   265  0211                     	;# 
   266  0212                     	;# 
   267  0212                     	;# 
   268  0213                     	;# 
   269  0213                     	;# 
   270  0214                     	;# 
   271  0214                     	;# 
   272  0215                     	;# 
   273  0215                     	;# 
   274  0215                     	;# 
   275  0216                     	;# 
   276  0216                     	;# 
   277  0217                     	;# 
   278  0217                     	;# 
   279  0391                     	;# 
   280  0392                     	;# 
   281  0393                     	;# 
   282  0498                     	;# 
   283  0498                     	;# 
   284  0499                     	;# 
   285  049A                     	;# 
   286  049B                     	;# 
   287  049B                     	;# 
   288  049C                     	;# 
   289  049D                     	;# 
   290  049E                     	;# 
   291  049F                     	;# 
   292  0611                     	;# 
   293  0612                     	;# 
   294  0613                     	;# 
   295  0613                     	;# 
   296  0614                     	;# 
   297  0615                     	;# 
   298  0616                     	;# 
   299  0616                     	;# 
   300  0617                     	;# 
   301  0618                     	;# 
   302  0619                     	;# 
   303  0619                     	;# 
   304  061A                     	;# 
   305  061B                     	;# 
   306  061C                     	;# 
   307  061C                     	;# 
   308  0691                     	;# 
   309  0692                     	;# 
   310  0693                     	;# 
   311  0694                     	;# 
   312  0695                     	;# 
   313  0F0F                     	;# 
   314  0F10                     	;# 
   315  0F11                     	;# 
   316  0F12                     	;# 
   317  0F13                     	;# 
   318  0F14                     	;# 
   319  0F15                     	;# 
   320  0F16                     	;# 
   321  0F17                     	;# 
   322  0F18                     	;# 
   323  0F19                     	;# 
   324  0F1A                     	;# 
   325  0F1B                     	;# 
   326  0F1C                     	;# 
   327  0F1D                     	;# 
   328  0F1E                     	;# 
   329  0F1F                     	;# 
   330  0FE3                     	;# 
   331  0FE4                     	;# 
   332  0FE5                     	;# 
   333  0FE6                     	;# 
   334  0FE7                     	;# 
   335  0FE8                     	;# 
   336  0FE9                     	;# 
   337  0FEA                     	;# 
   338  0FEB                     	;# 
   339  0FED                     	;# 
   340  0FEE                     	;# 
   341  0FEF                     	;# 
   342                           
   343                           	psect	stringtext
   344  06B7                     __pstringtext:	
   345  06B7                     _RX_PW_P:	
   346  06B7  3411               	retlw	17
   347  06B8  3412               	retlw	18
   348  06B9  3413               	retlw	19
   349  06BA  3414               	retlw	20
   350  06BB  3415               	retlw	21
   351  06BC  3416               	retlw	22
   352  06BD                     __end_of_RX_PW_P:	
   353  06BD                     _RX_ADDR_P:	
   354  06BD  340A               	retlw	10
   355  06BE  340B               	retlw	11
   356  06BF  340C               	retlw	12
   357  06C0  340D               	retlw	13
   358  06C1  340E               	retlw	14
   359  06C2  340F               	retlw	15
   360  06C3                     __end_of_RX_ADDR_P:	
   361  06C3                     _TX_ADDR:	
   362  06C3  3410               	retlw	16
   363  06C4                     __end_of_TX_ADDR:	
   364  0011                     _PIR1bits	set	17
   365  000C                     _PORTAbits	set	12
   366  0095                     _OPTION_REGbits	set	149
   367  008C                     _TRISAbits	set	140
   368  008E                     _TRISCbits	set	142
   369  011D                     _APFCON	set	285
   370  010E                     _LATCbits	set	270
   371  010C                     _LATAbits	set	268
   372  018E                     _ANSELC	set	398
   373  018C                     _ANSELA	set	396
   374  0211                     _SSP1BUF	set	529
   375  0214                     _SSP1STATbits	set	532
   376  0215                     _SSP1CON1bits	set	533
   377  020C                     _WPUAbits	set	524
   378                           
   379                           ; #config settings
   380  0000                     
   381                           	psect	cinit
   382  07FE                     start_initialization:	
   383  07FE                     __initialization:	
   384  07FE                     end_of_initialization:	
   385                           ;End of C runtime variable initialization code
   386                           
   387  07FE                     __end_of__initialization:	
   388  07FE  0020               	movlb	0
   389  07FF  2F14               	ljmp	_main	;jump to C main() function
   390                           
   391                           	psect	cstackCOMMON
   392  0070                     __pcstackCOMMON:	
   393  0070                     ?_SPI_init:	
   394  0070                     ??_SPI_init:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0070                     ?_configureTX:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0070                     ?_transmitData:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0070                     ?_SPI_read_byte:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0070                     ?_SPI_write_byte:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0070                     ??_SPI_write_byte:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ?_resetIRQ:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0070                     ?_bigBlink:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     ??_bigBlink:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0070                     ?_configIO:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ??_configIO:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0070                     ?_main:	
   428                           ; 1 bytes @ 0x0
   429                           
   430                           
   431                           ; 2 bytes @ 0x0
   432  0070                     	ds	1
   433  0071                     bigBlink@i:	
   434  0071                     SPI_write_byte@data:	
   435                           ; 1 bytes @ 0x1
   436                           
   437                           
   438                           ; 1 bytes @ 0x1
   439  0071                     	ds	1
   440  0072                     bigBlink@i_130:	
   441  0072                     SPI_write_byte@ret_data:	
   442                           ; 1 bytes @ 0x2
   443                           
   444                           
   445                           ; 1 bytes @ 0x2
   446  0072                     	ds	1
   447  0073                     ?_SPI_writeArray:	
   448  0073                     ??_SPI_read_byte:	
   449                           ; 1 bytes @ 0x3
   450                           
   451  0073                     bigBlink@x:	
   452                           ; 1 bytes @ 0x3
   453                           
   454  0073                     SPI_writeArray@length:	
   455                           ; 1 bytes @ 0x3
   456                           
   457                           
   458                           ; 1 bytes @ 0x3
   459  0073                     	ds	1
   460  0074                     ??_SPI_writeArray:	
   461  0074                     SPI_read_byte@address:	
   462                           ; 1 bytes @ 0x4
   463                           
   464                           
   465                           ; 1 bytes @ 0x4
   466  0074                     	ds	1
   467  0075                     SPI_read_byte@ret:	
   468                           
   469                           ; 1 bytes @ 0x5
   470  0075                     	ds	1
   471  0076                     SPI_writeArray@ret:	
   472                           
   473                           ; 1 bytes @ 0x6
   474  0076                     	ds	1
   475  0077                     SPI_writeArray@i:	
   476                           
   477                           ; 1 bytes @ 0x7
   478  0077                     	ds	1
   479  0078                     SPI_writeArray@data:	
   480                           
   481                           ; 1 bytes @ 0x8
   482  0078                     	ds	1
   483  0079                     ??_configureTX:	
   484  0079                     ??_resetIRQ:	
   485                           ; 1 bytes @ 0x9
   486                           
   487                           
   488                           ; 1 bytes @ 0x9
   489  0079                     	ds	1
   490  007A                     configureTX@write:	
   491  007A                     resetIRQ@write:	
   492                           ; 2 bytes @ 0xA
   493                           
   494                           
   495                           ; 2 bytes @ 0xA
   496  007A                     	ds	2
   497  007C                     ??_transmitData:	
   498                           
   499                           ; 1 bytes @ 0xC
   500  007C                     	ds	1
   501  007D                     ??_main:	
   502  007D                     main@last:	
   503                           ; 1 bytes @ 0xD
   504                           
   505                           
   506                           ; 1 bytes @ 0xD
   507  007D                     	ds	1
   508                           
   509                           	psect	cstackBANK0
   510  0020                     __pcstackBANK0:	
   511  0020                     transmitData@data:	
   512                           
   513                           ; 1 bytes @ 0x0
   514  0020                     	ds	1
   515  0021                     transmitData@write:	
   516                           
   517                           ; 2 bytes @ 0x1
   518  0021                     	ds	2
   519  0023                     transmitData@sreg:	
   520                           
   521                           ; 1 bytes @ 0x3
   522  0023                     	ds	1
   523                           
   524                           	psect	maintext
   525  0714                     __pmaintext:	
   526 ;;
   527 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   528 ;;
   529 ;; *************** function _main *****************
   530 ;; Defined at:
   531 ;;		line 44 in file "transmitter.c"
   532 ;; Parameters:    Size  Location     Type
   533 ;;		None
   534 ;; Auto vars:     Size  Location     Type
   535 ;;  last            1   13[COMMON] unsigned char 
   536 ;; Return value:  Size  Location     Type
   537 ;;                  2   30[None  ] int 
   538 ;; Registers used:
   539 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   540 ;; Tracked objects:
   541 ;;		On entry : B1F/0
   542 ;;		On exit  : 0/0
   543 ;;		Unchanged: 0/0
   544 ;; Data sizes:     COMMON   BANK0   BANK1
   545 ;;      Params:         0       0       0
   546 ;;      Locals:         1       0       0
   547 ;;      Temps:          0       0       0
   548 ;;      Totals:         1       0       0
   549 ;;Total ram usage:        1 bytes
   550 ;; Hardware stack levels required when called:    4
   551 ;; This function calls:
   552 ;;		_SPI_init
   553 ;;		_configureTX
   554 ;;		_transmitData
   555 ;; This function is called by:
   556 ;;		Startup code after reset
   557 ;; This function uses a non-reentrant model
   558 ;;
   559                           
   560                           
   561                           ;psect for function _main
   562  0714                     _main:	
   563                           
   564                           ;transmitter.c: 45: uint8_t last = 1;
   565                           
   566                           ;incstack = 0
   567                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   568  0714  01FD               	clrf	main@last
   569  0715  0AFD               	incf	main@last,f
   570                           
   571                           ;transmitter.c: 46: SPI_init();
   572  0716  26C4               	fcall	_SPI_init
   573                           
   574                           ;transmitter.c: 47: LATAbits.LATA1 = 0;
   575  0717  0022               	movlb	2	; select bank2
   576  0718  108C               	bcf	12,1	;volatile
   577                           
   578                           ;transmitter.c: 48: configureTX();
   579  0719  2799               	fcall	_configureTX
   580  071A                     l741:	
   581                           ;transmitter.c: 49: while(1) {
   582                           
   583                           
   584                           ;transmitter.c: 50: if(PORTAbits.RA5 != last) {
   585  071A  0020               	movlb	0	; select bank0
   586  071B  0E0C               	swapf	12,w	;volatile
   587  071C  0C89               	rrf	9,f
   588  071D  3901               	andlw	1
   589  071E  067D               	xorwf	main@last,w
   590  071F  1903               	skipnz
   591  0720  2F1A               	goto	l741
   592                           
   593                           ;transmitter.c: 51: last = PORTAbits.RA5;
   594  0721  3000               	movlw	0
   595  0722  1A8C               	btfsc	12,5	;volatile
   596  0723  3001               	movlw	1
   597  0724  00FD               	movwf	main@last
   598                           
   599                           ;transmitter.c: 52: LATAbits.LATA1 = last;
   600  0725  0C7D               	rrf	main@last,w
   601  0726  0022               	movlb	2	; select bank2
   602  0727  1C03               	skipc
   603  0728  108C               	bcf	12,1	;volatile
   604  0729  1803               	skipnc
   605  072A  148C               	bsf	12,1	;volatile
   606                           
   607                           ;transmitter.c: 53: transmitData(0xCF);
   608  072B  30CF               	movlw	207
   609  072C  2770               	fcall	_transmitData
   610  072D  2F1A               	goto	l741
   611  072E                     __end_of_main:	
   612                           
   613                           	psect	text1
   614  0770                     __ptext1:	
   615 ;; *************** function _transmitData *****************
   616 ;; Defined at:
   617 ;;		line 126 in file "transmitter.c"
   618 ;; Parameters:    Size  Location     Type
   619 ;;  data            1    wreg     unsigned char 
   620 ;; Auto vars:     Size  Location     Type
   621 ;;  data            1    0[BANK0 ] unsigned char 
   622 ;;  write           2    1[BANK0 ] unsigned char [2]
   623 ;;  sreg            1    3[BANK0 ] unsigned char 
   624 ;; Return value:  Size  Location     Type
   625 ;;                  1    wreg      void 
   626 ;; Registers used:
   627 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   628 ;; Tracked objects:
   629 ;;		On entry : 0/0
   630 ;;		On exit  : 0/0
   631 ;;		Unchanged: 0/0
   632 ;; Data sizes:     COMMON   BANK0   BANK1
   633 ;;      Params:         0       0       0
   634 ;;      Locals:         0       4       0
   635 ;;      Temps:          1       0       0
   636 ;;      Totals:         1       4       0
   637 ;;Total ram usage:        5 bytes
   638 ;; Hardware stack levels used:    1
   639 ;; Hardware stack levels required when called:    3
   640 ;; This function calls:
   641 ;;		_SPI_writeArray
   642 ;;		_SPI_write_byte
   643 ;;		_resetIRQ
   644 ;; This function is called by:
   645 ;;		_main
   646 ;; This function uses a non-reentrant model
   647 ;;
   648                           
   649                           
   650                           ;psect for function _transmitData
   651  0770                     _transmitData:	
   652                           
   653                           ;incstack = 0
   654                           ; Regs used in _transmitData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   655                           ;transmitData@data stored from wreg
   656  0770  0020               	movlb	0	; select bank0
   657  0771  00A0               	movwf	transmitData@data
   658                           
   659                           ;transmitter.c: 127: uint8_t write[2];
   660                           ;transmitter.c: 128: write[0]= 0b10100000;
   661  0772  30A0               	movlw	160
   662  0773  00FC               	movwf	??_transmitData
   663  0774  087C               	movf	??_transmitData,w
   664  0775  00A1               	movwf	transmitData@write
   665                           
   666                           ;transmitter.c: 129: write[1] = data;
   667  0776  0820               	movf	transmitData@data,w
   668  0777  00FC               	movwf	??_transmitData
   669  0778  087C               	movf	??_transmitData,w
   670  0779  00A2               	movwf	transmitData@write+1
   671                           
   672                           ;transmitter.c: 130: SPI_writeArray(write, 2);
   673  077A  3002               	movlw	2
   674  077B  00FC               	movwf	??_transmitData
   675  077C  087C               	movf	??_transmitData,w
   676  077D  00F3               	movwf	SPI_writeArray@length
   677  077E  3021               	movlw	(low (transmitData@write| 0))& (0+255)
   678  077F  272E               	fcall	_SPI_writeArray
   679  0780                     l719:	
   680                           ;transmitter.c: 131: uint8_t sreg;
   681                           ;transmitter.c: 132: do {
   682                           
   683                           
   684                           ;transmitter.c: 133: LATCbits.LATC4 = 1;
   685  0780  0022               	movlb	2	; select bank2
   686  0781  160E               	bsf	14,4	;volatile
   687                           
   688                           ;transmitter.c: 134: _delay((unsigned long)((15)*(16000000UL/4000000.0)));
   689  0782  3014               	movlw	20
   690  0783                     u157:	
   691  0783  0B89               	decfsz	9,f
   692  0784  2F83               	goto	u157
   693                           
   694                           ;transmitter.c: 135: LATCbits.LATC4 = 0;
   695  0785  0022               	movlb	2	; select bank2
   696  0786  120E               	bcf	14,4	;volatile
   697  0787                     l55:	
   698                           ;transmitter.c: 136: while(PORTAbits.RA2);
   699                           
   700  0787  0020               	movlb	0	; select bank0
   701  0788  190C               	btfsc	12,2	;volatile
   702  0789  2F87               	goto	l55
   703                           
   704                           ;transmitter.c: 137: LATCbits.LATC3 = 0;
   705  078A  0022               	movlb	2	; select bank2
   706  078B  118E               	bcf	14,3	;volatile
   707                           
   708                           ;transmitter.c: 138: sreg = SPI_write_byte(0xFF);
   709  078C  30FF               	movlw	255
   710  078D  26F0               	fcall	_SPI_write_byte
   711  078E  00FC               	movwf	??_transmitData
   712  078F  087C               	movf	??_transmitData,w
   713  0790  0020               	movlb	0	; select bank0
   714  0791  00A3               	movwf	transmitData@sreg
   715                           
   716                           ;transmitter.c: 139: LATCbits.LATC3 = 1;
   717  0792  0022               	movlb	2	; select bank2
   718  0793  158E               	bsf	14,3	;volatile
   719                           
   720                           ;transmitter.c: 140: resetIRQ();
   721  0794  26E1               	fcall	_resetIRQ
   722                           
   723                           ;transmitter.c: 141: } while(!(sreg & 0b00100000));
   724  0795  0020               	movlb	0	; select bank0
   725  0796  1AA3               	btfsc	transmitData@sreg,5
   726  0797  0008               	return
   727  0798  2F80               	goto	l719
   728  0799                     __end_of_transmitData:	
   729                           
   730                           	psect	text2
   731  06E1                     __ptext2:	
   732 ;; *************** function _resetIRQ *****************
   733 ;; Defined at:
   734 ;;		line 73 in file "spi.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;		None
   737 ;; Auto vars:     Size  Location     Type
   738 ;;  write           2   10[COMMON] unsigned char [2]
   739 ;; Return value:  Size  Location     Type
   740 ;;                  1    wreg      void 
   741 ;; Registers used:
   742 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   743 ;; Tracked objects:
   744 ;;		On entry : 0/0
   745 ;;		On exit  : 0/0
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMMON   BANK0   BANK1
   748 ;;      Params:         0       0       0
   749 ;;      Locals:         2       0       0
   750 ;;      Temps:          1       0       0
   751 ;;      Totals:         3       0       0
   752 ;;Total ram usage:        3 bytes
   753 ;; Hardware stack levels used:    1
   754 ;; Hardware stack levels required when called:    2
   755 ;; This function calls:
   756 ;;		_SPI_writeArray
   757 ;; This function is called by:
   758 ;;		_transmitData
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762                           
   763                           ;psect for function _resetIRQ
   764  06E1                     _resetIRQ:	
   765                           
   766                           ;spi.c: 74: uint8_t write[2];
   767                           ;spi.c: 75: write[0] = (0x07 & 0b00011111) | 0b00100000;
   768                           
   769                           ;incstack = 0
   770                           ; Regs used in _resetIRQ: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   771  06E1  3027               	movlw	39
   772  06E2  00F9               	movwf	??_resetIRQ
   773  06E3  0879               	movf	??_resetIRQ,w
   774  06E4  00FA               	movwf	resetIRQ@write
   775                           
   776                           ;spi.c: 76: write[1] = 0b01110000;
   777  06E5  3070               	movlw	112
   778  06E6  00F9               	movwf	??_resetIRQ
   779  06E7  0879               	movf	??_resetIRQ,w
   780  06E8  00FB               	movwf	resetIRQ@write+1
   781                           
   782                           ;spi.c: 77: SPI_writeArray(write, 2);
   783  06E9  3002               	movlw	2
   784  06EA  00F9               	movwf	??_resetIRQ
   785  06EB  0879               	movf	??_resetIRQ,w
   786  06EC  00F3               	movwf	SPI_writeArray@length
   787  06ED  307A               	movlw	(low (resetIRQ@write| 0))& (0+255)
   788  06EE  272E               	fcall	_SPI_writeArray
   789  06EF  0008               	return
   790  06F0                     __end_of_resetIRQ:	
   791                           
   792                           	psect	text3
   793  0799                     __ptext3:	
   794 ;; *************** function _configureTX *****************
   795 ;; Defined at:
   796 ;;		line 76 in file "transmitter.c"
   797 ;; Parameters:    Size  Location     Type
   798 ;;		None
   799 ;; Auto vars:     Size  Location     Type
   800 ;;  write           2   10[COMMON] unsigned char [2]
   801 ;; Return value:  Size  Location     Type
   802 ;;                  1    wreg      void 
   803 ;; Registers used:
   804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   805 ;; Tracked objects:
   806 ;;		On entry : 0/0
   807 ;;		On exit  : 0/0
   808 ;;		Unchanged: 0/0
   809 ;; Data sizes:     COMMON   BANK0   BANK1
   810 ;;      Params:         0       0       0
   811 ;;      Locals:         2       0       0
   812 ;;      Temps:          1       0       0
   813 ;;      Totals:         3       0       0
   814 ;;Total ram usage:        3 bytes
   815 ;; Hardware stack levels used:    1
   816 ;; Hardware stack levels required when called:    2
   817 ;; This function calls:
   818 ;;		_SPI_read_byte
   819 ;;		_SPI_writeArray
   820 ;;		_bigBlink
   821 ;; This function is called by:
   822 ;;		_main
   823 ;; This function uses a non-reentrant model
   824 ;;
   825                           
   826                           
   827                           ;psect for function _configureTX
   828  0799                     _configureTX:	
   829                           
   830                           ;transmitter.c: 89: LATCbits.LATC4 = 0;
   831                           
   832                           ;incstack = 0
   833                           ; Regs used in _configureTX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   834  0799  0022               	movlb	2	; select bank2
   835  079A  120E               	bcf	14,4	;volatile
   836                           
   837                           ;transmitter.c: 90: _delay((unsigned long)((1)*(16000000UL/4000.0)));
   838  079B  3006               	movlw	6
   839  079C  00F9               	movwf	??_configureTX
   840  079D  3030               	movlw	48
   841  079E                     u167:	
   842  079E  0B89               	decfsz	9,f
   843  079F  2F9E               	goto	u167
   844  07A0  0BF9               	decfsz	??_configureTX,f
   845  07A1  2F9E               	goto	u167
   846  07A2  3200               	nop2
   847                           
   848                           ;transmitter.c: 91: LATCbits.LATC3 = 1;
   849  07A3  0022               	movlb	2	; select bank2
   850  07A4  158E               	bsf	14,3	;volatile
   851                           
   852                           ;transmitter.c: 92: _delay((unsigned long)((10)*(16000000UL/4000.0)));
   853  07A5  3034               	movlw	52
   854  07A6  00F9               	movwf	??_configureTX
   855  07A7  30F2               	movlw	242
   856  07A8                     u177:	
   857  07A8  0B89               	decfsz	9,f
   858  07A9  2FA8               	goto	u177
   859  07AA  0BF9               	decfsz	??_configureTX,f
   860  07AB  2FA8               	goto	u177
   861                           
   862                           ;transmitter.c: 93: uint8_t write[2];
   863                           ;transmitter.c: 94: write[0] = (0x00 & 0b00011111) | 0b00100000;
   864  07AC  3020               	movlw	32
   865  07AD  00F9               	movwf	??_configureTX
   866  07AE  0879               	movf	??_configureTX,w
   867  07AF  00FA               	movwf	configureTX@write
   868                           
   869                           ;transmitter.c: 95: write[1] = 0b01001010;
   870  07B0  304A               	movlw	74
   871  07B1  00F9               	movwf	??_configureTX
   872  07B2  0879               	movf	??_configureTX,w
   873  07B3  00FB               	movwf	configureTX@write+1
   874                           
   875                           ;transmitter.c: 98: SPI_writeArray(write, 2);
   876  07B4  3002               	movlw	2
   877  07B5  00F9               	movwf	??_configureTX
   878  07B6  0879               	movf	??_configureTX,w
   879  07B7  00F3               	movwf	SPI_writeArray@length
   880  07B8  307A               	movlw	(low (configureTX@write| 0))& (0+255)
   881  07B9  272E               	fcall	_SPI_writeArray
   882                           
   883                           ;transmitter.c: 101: write[0] = (0x01 & 0b00011111) | 0b00100000;
   884  07BA  3021               	movlw	33
   885  07BB  00F9               	movwf	??_configureTX
   886  07BC  0879               	movf	??_configureTX,w
   887  07BD  00FA               	movwf	configureTX@write
   888                           
   889                           ;transmitter.c: 102: write[1] = 0b00000001;
   890  07BE  01FB               	clrf	configureTX@write+1
   891  07BF  0AFB               	incf	configureTX@write+1,f
   892                           
   893                           ;transmitter.c: 103: SPI_writeArray(write, 2);
   894  07C0  3002               	movlw	2
   895  07C1  00F9               	movwf	??_configureTX
   896  07C2  0879               	movf	??_configureTX,w
   897  07C3  00F3               	movwf	SPI_writeArray@length
   898  07C4  307A               	movlw	(low (configureTX@write| 0))& (0+255)
   899  07C5  272E               	fcall	_SPI_writeArray
   900                           
   901                           ;transmitter.c: 105: write[0] = (0x02 & 0b00011111) | 0b00100000;
   902  07C6  3022               	movlw	34
   903  07C7  00F9               	movwf	??_configureTX
   904  07C8  0879               	movf	??_configureTX,w
   905  07C9  00FA               	movwf	configureTX@write
   906                           
   907                           ;transmitter.c: 106: write[1] = 0b00000001;
   908  07CA  01FB               	clrf	configureTX@write+1
   909  07CB  0AFB               	incf	configureTX@write+1,f
   910                           
   911                           ;transmitter.c: 107: SPI_writeArray(write, 2);
   912  07CC  3002               	movlw	2
   913  07CD  00F9               	movwf	??_configureTX
   914  07CE  0879               	movf	??_configureTX,w
   915  07CF  00F3               	movwf	SPI_writeArray@length
   916  07D0  307A               	movlw	(low (configureTX@write| 0))& (0+255)
   917  07D1  272E               	fcall	_SPI_writeArray
   918                           
   919                           ;transmitter.c: 109: write[0] = (RX_PW_P[0] & 0b00011111) | 0b00100000;
   920  07D2  30B7               	movlw	low (_RX_PW_P| (0+32768))
   921  07D3  0084               	movwf	4
   922  07D4  3086               	movlw	high (_RX_PW_P| (0+32768))
   923  07D5  0085               	movwf	5
   924  07D6  0800               	movf	0,w	;code access
   925  07D7  391F               	andlw	31
   926  07D8  3820               	iorlw	32
   927  07D9  00F9               	movwf	??_configureTX
   928  07DA  0879               	movf	??_configureTX,w
   929  07DB  00FA               	movwf	configureTX@write
   930                           
   931                           ;transmitter.c: 110: write[1] = 0b00000001;
   932  07DC  01FB               	clrf	configureTX@write+1
   933  07DD  0AFB               	incf	configureTX@write+1,f
   934                           
   935                           ;transmitter.c: 111: SPI_writeArray(write, 2);
   936  07DE  3002               	movlw	2
   937  07DF  00F9               	movwf	??_configureTX
   938  07E0  0879               	movf	??_configureTX,w
   939  07E1  00F3               	movwf	SPI_writeArray@length
   940  07E2  307A               	movlw	(low (configureTX@write| 0))& (0+255)
   941  07E3  272E               	fcall	_SPI_writeArray
   942                           
   943                           ;transmitter.c: 113: write[0] = (0x03 & 0b00011111) | 0b00100000;
   944  07E4  3023               	movlw	35
   945  07E5  00F9               	movwf	??_configureTX
   946  07E6  0879               	movf	??_configureTX,w
   947  07E7  00FA               	movwf	configureTX@write
   948                           
   949                           ;transmitter.c: 114: write[1] = 0b0000011;
   950  07E8  3003               	movlw	3
   951  07E9  00F9               	movwf	??_configureTX
   952  07EA  0879               	movf	??_configureTX,w
   953  07EB  00FB               	movwf	configureTX@write+1
   954                           
   955                           ;transmitter.c: 115: SPI_writeArray(write, 2);
   956  07EC  3002               	movlw	2
   957  07ED  00F9               	movwf	??_configureTX
   958  07EE  0879               	movf	??_configureTX,w
   959  07EF  00F3               	movwf	SPI_writeArray@length
   960  07F0  307A               	movlw	(low (configureTX@write| 0))& (0+255)
   961  07F1  272E               	fcall	_SPI_writeArray
   962                           
   963                           ;transmitter.c: 117: if(SPI_read_byte(0x00) == 0b01001010) {
   964  07F2  3000               	movlw	0
   965  07F3  26D2               	fcall	_SPI_read_byte
   966  07F4  3A4A               	xorlw	74
   967  07F5  1D03               	skipz
   968  07F6  0008               	return
   969                           
   970                           ;transmitter.c: 118: bigBlink(1);
   971  07F7  3001               	movlw	1
   972  07F8  2749               	fcall	_bigBlink
   973                           
   974                           ;transmitter.c: 119: bigBlink(1);
   975  07F9  3001               	movlw	1
   976  07FA  2749               	fcall	_bigBlink
   977                           
   978                           ;transmitter.c: 120: bigBlink(1);
   979  07FB  3001               	movlw	1
   980  07FC  2749               	fcall	_bigBlink
   981  07FD  0008               	return
   982  07FE                     __end_of_configureTX:	
   983                           
   984                           	psect	text4
   985  0749                     __ptext4:	
   986 ;; *************** function _bigBlink *****************
   987 ;; Defined at:
   988 ;;		line 65 in file "transmitter.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;  x               1    wreg     unsigned char 
   991 ;; Auto vars:     Size  Location     Type
   992 ;;  x               1    3[COMMON] unsigned char 
   993 ;;  i               1    2[COMMON] unsigned char 
   994 ;;  i               1    1[COMMON] unsigned char 
   995 ;; Return value:  Size  Location     Type
   996 ;;                  1    wreg      void 
   997 ;; Registers used:
   998 ;;		wreg, status,2, status,0
   999 ;; Tracked objects:
  1000 ;;		On entry : 0/0
  1001 ;;		On exit  : 0/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMMON   BANK0   BANK1
  1004 ;;      Params:         0       0       0
  1005 ;;      Locals:         3       0       0
  1006 ;;      Temps:          1       0       0
  1007 ;;      Totals:         4       0       0
  1008 ;;Total ram usage:        4 bytes
  1009 ;; Hardware stack levels used:    1
  1010 ;; This function calls:
  1011 ;;		Nothing
  1012 ;; This function is called by:
  1013 ;;		_configureTX
  1014 ;; This function uses a non-reentrant model
  1015 ;;
  1016                           
  1017                           
  1018                           ;psect for function _bigBlink
  1019  0749                     _bigBlink:	
  1020                           
  1021                           ;incstack = 0
  1022                           ; Regs used in _bigBlink: [wreg+status,2+status,0]
  1023                           ;bigBlink@x stored from wreg
  1024  0749  00F3               	movwf	bigBlink@x
  1025                           
  1026                           ;transmitter.c: 66: LATAbits.LATA1 = 1;
  1027  074A  0022               	movlb	2	; select bank2
  1028  074B  148C               	bsf	12,1	;volatile
  1029                           
  1030                           ;transmitter.c: 67: for(uint8_t i = 0; i<x; ++i) {
  1031  074C  01F1               	clrf	bigBlink@i
  1032  074D                     l523:	
  1033  074D  0873               	movf	bigBlink@x,w
  1034  074E  0271               	subwf	bigBlink@i,w
  1035  074F  1803               	btfsc	3,0
  1036  0750  2F5D               	goto	l43
  1037                           
  1038                           ;transmitter.c: 68: _delay((unsigned long)((10)*(16000000UL/4000.0)));
  1039  0751  3034               	movlw	52
  1040  0752  00F0               	movwf	??_bigBlink
  1041  0753  30F2               	movlw	242
  1042  0754                     u187:	
  1043  0754  0B89               	decfsz	9,f
  1044  0755  2F54               	goto	u187
  1045  0756  0BF0               	decfsz	??_bigBlink,f
  1046  0757  2F54               	goto	u187
  1047  0758  3001               	movlw	1
  1048  0759  00F0               	movwf	??_bigBlink
  1049  075A  0870               	movf	??_bigBlink,w
  1050  075B  07F1               	addwf	bigBlink@i,f
  1051  075C  2F4D               	goto	l523
  1052  075D                     l43:	
  1053                           
  1054                           ;transmitter.c: 69: }
  1055                           ;transmitter.c: 70: LATAbits.LATA1 = 0;
  1056  075D  0022               	movlb	2	; select bank2
  1057  075E  108C               	bcf	12,1	;volatile
  1058                           
  1059                           ;transmitter.c: 71: for(uint8_t i = 0; i<x; ++i) {
  1060  075F  01F2               	clrf	bigBlink@i_130
  1061  0760                     l531:	
  1062  0760  0873               	movf	bigBlink@x,w
  1063  0761  0272               	subwf	bigBlink@i_130,w
  1064  0762  1803               	btfsc	3,0
  1065  0763  0008               	return
  1066                           
  1067                           ;transmitter.c: 72: _delay((unsigned long)((10)*(16000000UL/4000.0)));
  1068  0764  3034               	movlw	52
  1069  0765  00F0               	movwf	??_bigBlink
  1070  0766  30F2               	movlw	242
  1071  0767                     u197:	
  1072  0767  0B89               	decfsz	9,f
  1073  0768  2F67               	goto	u197
  1074  0769  0BF0               	decfsz	??_bigBlink,f
  1075  076A  2F67               	goto	u197
  1076  076B  3001               	movlw	1
  1077  076C  00F0               	movwf	??_bigBlink
  1078  076D  0870               	movf	??_bigBlink,w
  1079  076E  07F2               	addwf	bigBlink@i_130,f
  1080  076F  2F60               	goto	l531
  1081  0770                     __end_of_bigBlink:	
  1082                           
  1083                           	psect	text5
  1084  072E                     __ptext5:	
  1085 ;; *************** function _SPI_writeArray *****************
  1086 ;; Defined at:
  1087 ;;		line 54 in file "spi.c"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;  data            1    wreg     PTR unsigned char 
  1090 ;;		 -> resetIRQ@write(2), transmitData@write(2), configureTX@write(2), 
  1091 ;;  length          1    3[COMMON] unsigned char 
  1092 ;; Auto vars:     Size  Location     Type
  1093 ;;  data            1    8[COMMON] PTR unsigned char 
  1094 ;;		 -> resetIRQ@write(2), transmitData@write(2), configureTX@write(2), 
  1095 ;;  i               1    7[COMMON] unsigned char 
  1096 ;;  ret             1    6[COMMON] unsigned char 
  1097 ;; Return value:  Size  Location     Type
  1098 ;;                  1    wreg      unsigned char 
  1099 ;; Registers used:
  1100 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1101 ;; Tracked objects:
  1102 ;;		On entry : 0/0
  1103 ;;		On exit  : 0/0
  1104 ;;		Unchanged: 0/0
  1105 ;; Data sizes:     COMMON   BANK0   BANK1
  1106 ;;      Params:         1       0       0
  1107 ;;      Locals:         3       0       0
  1108 ;;      Temps:          2       0       0
  1109 ;;      Totals:         6       0       0
  1110 ;;Total ram usage:        6 bytes
  1111 ;; Hardware stack levels used:    1
  1112 ;; Hardware stack levels required when called:    1
  1113 ;; This function calls:
  1114 ;;		_SPI_write_byte
  1115 ;; This function is called by:
  1116 ;;		_configureTX
  1117 ;;		_transmitData
  1118 ;;		_resetIRQ
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122                           
  1123                           ;psect for function _SPI_writeArray
  1124  072E                     _SPI_writeArray:	
  1125                           
  1126                           ;incstack = 0
  1127                           ; Regs used in _SPI_writeArray: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1128                           ;SPI_writeArray@data stored from wreg
  1129  072E  00F8               	movwf	SPI_writeArray@data
  1130                           
  1131                           ;spi.c: 55: LATCbits.LATC3 = 0;
  1132  072F  0022               	movlb	2	; select bank2
  1133  0730  118E               	bcf	14,3	;volatile
  1134                           
  1135                           ;spi.c: 56: uint8_t ret;
  1136                           ;spi.c: 57: for(uint8_t i = 0; i < length; ++i) {
  1137  0731  01F7               	clrf	SPI_writeArray@i
  1138  0732                     l663:	
  1139  0732  0873               	movf	SPI_writeArray@length,w
  1140  0733  0277               	subwf	SPI_writeArray@i,w
  1141  0734  1803               	btfsc	3,0
  1142  0735  2F46               	goto	l106
  1143                           
  1144                           ;spi.c: 58: ret = SPI_write_byte(data[i]);
  1145  0736  0877               	movf	SPI_writeArray@i,w
  1146  0737  0778               	addwf	SPI_writeArray@data,w
  1147  0738  00F4               	movwf	??_SPI_writeArray
  1148  0739  0874               	movf	??_SPI_writeArray,w
  1149  073A  0086               	movwf	6
  1150  073B  0187               	clrf	7
  1151  073C  0801               	movf	1,w
  1152  073D  26F0               	fcall	_SPI_write_byte
  1153  073E  00F5               	movwf	??_SPI_writeArray+1
  1154  073F  0875               	movf	??_SPI_writeArray+1,w
  1155  0740  00F6               	movwf	SPI_writeArray@ret
  1156  0741  3001               	movlw	1
  1157  0742  00F4               	movwf	??_SPI_writeArray
  1158  0743  0874               	movf	??_SPI_writeArray,w
  1159  0744  07F7               	addwf	SPI_writeArray@i,f
  1160  0745  2F32               	goto	l663
  1161  0746                     l106:	
  1162                           
  1163                           ;spi.c: 59: }
  1164                           ;spi.c: 61: LATCbits.LATC3 = 1;
  1165  0746  0022               	movlb	2	; select bank2
  1166  0747  158E               	bsf	14,3	;volatile
  1167                           
  1168                           ;spi.c: 62: return ret;
  1169                           ;	Return value of _SPI_writeArray is never used
  1170  0748  0008               	return
  1171  0749                     __end_of_SPI_writeArray:	
  1172                           
  1173                           	psect	text6
  1174  06D2                     __ptext6:	
  1175 ;; *************** function _SPI_read_byte *****************
  1176 ;; Defined at:
  1177 ;;		line 65 in file "spi.c"
  1178 ;; Parameters:    Size  Location     Type
  1179 ;;  address         1    wreg     unsigned char 
  1180 ;; Auto vars:     Size  Location     Type
  1181 ;;  address         1    4[COMMON] unsigned char 
  1182 ;;  ret             1    5[COMMON] unsigned char 
  1183 ;; Return value:  Size  Location     Type
  1184 ;;                  1    wreg      unsigned char 
  1185 ;; Registers used:
  1186 ;;		wreg, status,2, status,0, pclath, cstack
  1187 ;; Tracked objects:
  1188 ;;		On entry : 0/0
  1189 ;;		On exit  : 0/0
  1190 ;;		Unchanged: 0/0
  1191 ;; Data sizes:     COMMON   BANK0   BANK1
  1192 ;;      Params:         0       0       0
  1193 ;;      Locals:         2       0       0
  1194 ;;      Temps:          1       0       0
  1195 ;;      Totals:         3       0       0
  1196 ;;Total ram usage:        3 bytes
  1197 ;; Hardware stack levels used:    1
  1198 ;; Hardware stack levels required when called:    1
  1199 ;; This function calls:
  1200 ;;		_SPI_write_byte
  1201 ;; This function is called by:
  1202 ;;		_configureTX
  1203 ;; This function uses a non-reentrant model
  1204 ;;
  1205                           
  1206                           
  1207                           ;psect for function _SPI_read_byte
  1208  06D2                     _SPI_read_byte:	
  1209                           
  1210                           ;incstack = 0
  1211                           ; Regs used in _SPI_read_byte: [wreg+status,2+status,0+pclath+cstack]
  1212                           ;SPI_read_byte@address stored from wreg
  1213  06D2  00F4               	movwf	SPI_read_byte@address
  1214                           
  1215                           ;spi.c: 66: LATCbits.LATC3 = 0;
  1216  06D3  0022               	movlb	2	; select bank2
  1217  06D4  118E               	bcf	14,3	;volatile
  1218                           
  1219                           ;spi.c: 67: SPI_write_byte((address & 0b00011111) | 0x00);
  1220  06D5  0874               	movf	SPI_read_byte@address,w
  1221  06D6  391F               	andlw	31
  1222  06D7  26F0               	fcall	_SPI_write_byte
  1223                           
  1224                           ;spi.c: 68: uint8_t ret = SPI_write_byte(0xFF);
  1225  06D8  30FF               	movlw	255
  1226  06D9  26F0               	fcall	_SPI_write_byte
  1227  06DA  00F3               	movwf	??_SPI_read_byte
  1228  06DB  0873               	movf	??_SPI_read_byte,w
  1229  06DC  00F5               	movwf	SPI_read_byte@ret
  1230                           
  1231                           ;spi.c: 69: LATCbits.LATC3 = 1;
  1232  06DD  0022               	movlb	2	; select bank2
  1233  06DE  158E               	bsf	14,3	;volatile
  1234                           
  1235                           ;spi.c: 70: return ret;
  1236  06DF  0875               	movf	SPI_read_byte@ret,w
  1237  06E0  0008               	return
  1238  06E1                     __end_of_SPI_read_byte:	
  1239                           
  1240                           	psect	text7
  1241  06F0                     __ptext7:	
  1242 ;; *************** function _SPI_write_byte *****************
  1243 ;; Defined at:
  1244 ;;		line 46 in file "spi.c"
  1245 ;; Parameters:    Size  Location     Type
  1246 ;;  data            1    wreg     unsigned char 
  1247 ;; Auto vars:     Size  Location     Type
  1248 ;;  data            1    1[COMMON] unsigned char 
  1249 ;;  ret_data        1    2[COMMON] unsigned char 
  1250 ;; Return value:  Size  Location     Type
  1251 ;;                  1    wreg      unsigned char 
  1252 ;; Registers used:
  1253 ;;		wreg
  1254 ;; Tracked objects:
  1255 ;;		On entry : 0/0
  1256 ;;		On exit  : 0/0
  1257 ;;		Unchanged: 0/0
  1258 ;; Data sizes:     COMMON   BANK0   BANK1
  1259 ;;      Params:         0       0       0
  1260 ;;      Locals:         2       0       0
  1261 ;;      Temps:          1       0       0
  1262 ;;      Totals:         3       0       0
  1263 ;;Total ram usage:        3 bytes
  1264 ;; Hardware stack levels used:    1
  1265 ;; This function calls:
  1266 ;;		Nothing
  1267 ;; This function is called by:
  1268 ;;		_transmitData
  1269 ;;		_SPI_writeArray
  1270 ;;		_SPI_read_byte
  1271 ;; This function uses a non-reentrant model
  1272 ;;
  1273                           
  1274                           
  1275                           ;psect for function _SPI_write_byte
  1276  06F0                     _SPI_write_byte:	
  1277                           
  1278                           ;incstack = 0
  1279                           ; Regs used in _SPI_write_byte: [wreg]
  1280                           ;SPI_write_byte@data stored from wreg
  1281  06F0  00F1               	movwf	SPI_write_byte@data
  1282                           
  1283                           ;spi.c: 47: SSP1BUF = data;
  1284  06F1  0871               	movf	SPI_write_byte@data,w
  1285  06F2  0024               	movlb	4	; select bank4
  1286  06F3  0091               	movwf	17	;volatile
  1287  06F4                     l98:	
  1288                           ;spi.c: 48: while(!PIR1bits.SSP1IF);
  1289                           
  1290  06F4  0020               	movlb	0	; select bank0
  1291  06F5  1D91               	btfss	17,3	;volatile
  1292  06F6  2EF4               	goto	l98
  1293                           
  1294                           ;spi.c: 49: uint8_t ret_data = SSP1BUF;
  1295  06F7  0024               	movlb	4	; select bank4
  1296  06F8  0811               	movf	17,w	;volatile
  1297  06F9  00F0               	movwf	??_SPI_write_byte
  1298  06FA  0870               	movf	??_SPI_write_byte,w
  1299  06FB  00F2               	movwf	SPI_write_byte@ret_data
  1300                           
  1301                           ;spi.c: 50: PIR1bits.SSP1IF = 0;
  1302  06FC  0020               	movlb	0	; select bank0
  1303  06FD  1191               	bcf	17,3	;volatile
  1304                           
  1305                           ;spi.c: 51: return ret_data;
  1306  06FE  0872               	movf	SPI_write_byte@ret_data,w
  1307  06FF  0008               	return
  1308  0700                     __end_of_SPI_write_byte:	
  1309                           
  1310                           	psect	text8
  1311  06C4                     __ptext8:	
  1312 ;; *************** function _SPI_init *****************
  1313 ;; Defined at:
  1314 ;;		line 35 in file "spi.c"
  1315 ;; Parameters:    Size  Location     Type
  1316 ;;		None
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;		None
  1319 ;; Return value:  Size  Location     Type
  1320 ;;                  1    wreg      void 
  1321 ;; Registers used:
  1322 ;;		wreg, status,2, status,0, pclath, cstack
  1323 ;; Tracked objects:
  1324 ;;		On entry : 0/0
  1325 ;;		On exit  : 0/0
  1326 ;;		Unchanged: 0/0
  1327 ;; Data sizes:     COMMON   BANK0   BANK1
  1328 ;;      Params:         0       0       0
  1329 ;;      Locals:         0       0       0
  1330 ;;      Temps:          0       0       0
  1331 ;;      Totals:         0       0       0
  1332 ;;Total ram usage:        0 bytes
  1333 ;; Hardware stack levels used:    1
  1334 ;; Hardware stack levels required when called:    1
  1335 ;; This function calls:
  1336 ;;		_configIO
  1337 ;; This function is called by:
  1338 ;;		_main
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           
  1343                           ;psect for function _SPI_init
  1344  06C4                     _SPI_init:	
  1345                           
  1346                           ;spi.c: 36: SSP1CON1bits.SSPEN = 0;
  1347                           
  1348                           ;incstack = 0
  1349                           ; Regs used in _SPI_init: [wreg+status,2+status,0+pclath+cstack]
  1350  06C4  0024               	movlb	4	; select bank4
  1351  06C5  1295               	bcf	21,5	;volatile
  1352                           
  1353                           ;spi.c: 37: configIO();
  1354  06C6  2700               	fcall	_configIO
  1355                           
  1356                           ;spi.c: 38: SSP1CON1bits.CKP = 0;
  1357  06C7  0024               	movlb	4	; select bank4
  1358  06C8  1215               	bcf	21,4	;volatile
  1359                           
  1360                           ;spi.c: 39: SSP1STATbits.CKE = 1;
  1361  06C9  1714               	bsf	20,6	;volatile
  1362                           
  1363                           ;spi.c: 40: SSP1STATbits.SMP = 0;
  1364  06CA  1394               	bcf	20,7	;volatile
  1365                           
  1366                           ;spi.c: 41: SSP1CON1bits.SSPM = 0b0000;
  1367  06CB  30F0               	movlw	-16
  1368  06CC  0595               	andwf	21,f	;volatile
  1369                           
  1370                           ;spi.c: 42: PIR1bits.SSP1IF = 0;
  1371  06CD  0020               	movlb	0	; select bank0
  1372  06CE  1191               	bcf	17,3	;volatile
  1373                           
  1374                           ;spi.c: 43: SSP1CON1bits.SSPEN = 1;
  1375  06CF  0024               	movlb	4	; select bank4
  1376  06D0  1695               	bsf	21,5	;volatile
  1377  06D1  0008               	return
  1378  06D2                     __end_of_SPI_init:	
  1379                           
  1380                           	psect	text9
  1381  0700                     __ptext9:	
  1382 ;; *************** function _configIO *****************
  1383 ;; Defined at:
  1384 ;;		line 19 in file "spi.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;		None
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;		None
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  1    wreg      void 
  1391 ;; Registers used:
  1392 ;;		wreg, status,2
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMMON   BANK0   BANK1
  1398 ;;      Params:         0       0       0
  1399 ;;      Locals:         0       0       0
  1400 ;;      Temps:          0       0       0
  1401 ;;      Totals:         0       0       0
  1402 ;;Total ram usage:        0 bytes
  1403 ;; Hardware stack levels used:    1
  1404 ;; This function calls:
  1405 ;;		Nothing
  1406 ;; This function is called by:
  1407 ;;		_SPI_init
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411                           
  1412                           ;psect for function _configIO
  1413  0700                     _configIO:	
  1414                           
  1415                           ;spi.c: 20: TRISCbits.TRISC3 = 0;
  1416                           
  1417                           ;incstack = 0
  1418                           ; Regs used in _configIO: [wreg+status,2]
  1419  0700  0021               	movlb	1	; select bank1
  1420  0701  118E               	bcf	14,3	;volatile
  1421                           
  1422                           ;spi.c: 21: TRISCbits.TRISC0 = 0;
  1423  0702  100E               	bcf	14,0	;volatile
  1424                           
  1425                           ;spi.c: 22: TRISCbits.TRISC2 = 0;
  1426  0703  110E               	bcf	14,2	;volatile
  1427                           
  1428                           ;spi.c: 23: TRISCbits.TRISC1 = 1;
  1429  0704  148E               	bsf	14,1	;volatile
  1430                           
  1431                           ;spi.c: 24: TRISAbits.TRISA5 = 1;
  1432  0705  168C               	bsf	12,5	;volatile
  1433                           
  1434                           ;spi.c: 25: TRISAbits.TRISA1 = 0;
  1435  0706  108C               	bcf	12,1	;volatile
  1436                           
  1437                           ;spi.c: 26: TRISCbits.TRISC4 = 0;
  1438  0707  120E               	bcf	14,4	;volatile
  1439                           
  1440                           ;spi.c: 27: TRISAbits.TRISA2 = 1;
  1441  0708  150C               	bsf	12,2	;volatile
  1442                           
  1443                           ;spi.c: 28: OPTION_REGbits.nWPUEN = 0;
  1444  0709  1395               	bcf	21,7	;volatile
  1445                           
  1446                           ;spi.c: 29: WPUAbits.WPUA5 = 1;
  1447  070A  0024               	movlb	4	; select bank4
  1448  070B  168C               	bsf	12,5	;volatile
  1449                           
  1450                           ;spi.c: 30: WPUAbits.WPUA2 = 1;
  1451  070C  150C               	bsf	12,2	;volatile
  1452                           
  1453                           ;spi.c: 31: APFCON = 0b00010000;
  1454  070D  3010               	movlw	16
  1455  070E  0022               	movlb	2	; select bank2
  1456  070F  009D               	movwf	29	;volatile
  1457                           
  1458                           ;spi.c: 32: ANSELA = 0x00;
  1459  0710  0023               	movlb	3	; select bank3
  1460  0711  018C               	clrf	12	;volatile
  1461                           
  1462                           ;spi.c: 33: ANSELC = 0x00;
  1463  0712  018E               	clrf	14	;volatile
  1464  0713  0008               	return
  1465  0714                     __end_of_configIO:	
  1466  007E                     btemp	set	126	;btemp
  1467  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    13
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      4       4
    BANK1            32      0       0

Pointer List with Targets:

    SPI_writeArray@data	PTR unsigned char  size(1) Largest target is 2
		 -> resetIRQ@write(COMMON[2]), transmitData@write(BANK0[2]), configureTX@write(COMMON[2]), 


Critical Paths under _main in COMMON

    _main->_transmitData
    _transmitData->_resetIRQ
    _resetIRQ->_SPI_writeArray
    _configureTX->_SPI_writeArray
    _SPI_writeArray->_SPI_write_byte
    _SPI_read_byte->_SPI_write_byte

Critical Paths under _main in BANK0

    _main->_transmitData

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    3018
                                             13 COMMON     1     1      0
                           _SPI_init
                        _configureTX
                       _transmitData
 ---------------------------------------------------------------------------------
 (1) _transmitData                                         5     5      0    1786
                                             12 COMMON     1     1      0
                                              0 BANK0      4     4      0
                     _SPI_writeArray
                     _SPI_write_byte
                           _resetIRQ
 ---------------------------------------------------------------------------------
 (2) _resetIRQ                                             3     3      0     848
                                              9 COMMON     3     3      0
                     _SPI_writeArray
 ---------------------------------------------------------------------------------
 (1) _configureTX                                          3     3      0    1186
                                              9 COMMON     3     3      0
                      _SPI_read_byte
                     _SPI_writeArray
                           _bigBlink
 ---------------------------------------------------------------------------------
 (2) _bigBlink                                             4     4      0      60
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _SPI_writeArray                                       6     5      1     800
                                              3 COMMON     6     5      1
                     _SPI_write_byte
 ---------------------------------------------------------------------------------
 (2) _SPI_read_byte                                        3     3      0      90
                                              3 COMMON     3     3      0
                     _SPI_write_byte
 ---------------------------------------------------------------------------------
 (4) _SPI_write_byte                                       3     3      0      45
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             0     0      0       0
                           _configIO
 ---------------------------------------------------------------------------------
 (2) _configIO                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init
     _configIO
   _configureTX
     _SPI_read_byte
       _SPI_write_byte
     _SPI_writeArray
       _SPI_write_byte
     _bigBlink
   _transmitData
     _SPI_writeArray
       _SPI_write_byte
     _SPI_write_byte
     _resetIRQ
       _SPI_writeArray
         _SPI_write_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      4       4       6        5.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0       0       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed May 17 01:21:55 2017

           ?_configureTX 0070              __CFG_CP$OFF 0000                       l43 075D  
                     l55 0787                       l98 06F4                      l106 0746  
                    l531 0760                      l523 074D                      l741 071A  
                    l663 0732                      l719 0780                      u157 0783  
                    u167 079E                      u177 07A8                      u187 0754  
                    u197 0767             __CFG_BORV$LO 0000                      wreg 0009  
           __CFG_LVP$OFF 0000   __size_of_SPI_read_byte 000F             _transmitData 0770  
           __CFG_WRT$OFF 0000                     _main 0714                     fsr0h 0005  
                   fsr1h 0007                     indf0 0000                     fsr0l 0004  
                   indf1 0001                     fsr1l 0006                     btemp 007E  
                   start 0001          __end_of_TX_ADDR 06C4          __end_of_RX_PW_P 06BD  
          __CFG_MCLRE$ON 0000        transmitData@write 0021                    ?_main 0070  
          __CFG_WDTE$OFF 0000           __CFG_BOREN$OFF 0000         __end_of_SPI_init 06D2  
                  wtemp0 007E          __initialization 07FE             __end_of_main 072E  
          _SPI_read_byte 06D2           __CFG_LPBOR$OFF 0000                   ??_main 007D  
                 _APFCON 011D                   _ANSELA 018C                   _ANSELC 018E  
       __end_of_bigBlink 0770           __CFG_PWRTE$OFF 0000         __end_of_configIO 0714  
         ?_SPI_read_byte 0070  __size_of_SPI_writeArray 001B           __CFG_STVREN$ON 0000  
__size_of_SPI_write_byte 0010     __size_of_configureTX 0065         __end_of_resetIRQ 06F0  
      __end_of_RX_ADDR_P 06C3  __end_of__initialization 07FE           __pcstackCOMMON 0070  
              ?_SPI_init 0070           _OPTION_REGbits 0095         configureTX@write 007A  
        ??_SPI_read_byte 0073               __pmaintext 0714               ??_SPI_init 0070  
              ?_bigBlink 0070         SPI_read_byte@ret 0075                  _SSP1BUF 0211  
              ?_configIO 0070                  _TX_ADDR 06C3                  _RX_PW_P 06B7  
              ?_resetIRQ 0070           _SPI_writeArray 072E           _SPI_write_byte 06F0  
                __ptext1 0770                  __ptext2 06E1                  __ptext3 0799  
                __ptext4 0749                  __ptext5 072E                  __ptext6 06D2  
                __ptext7 06F0                  __ptext8 06C4                  __ptext9 0700  
             ??_bigBlink 0070               ??_configIO 0070     end_of_initialization 07FE  
 __end_of_SPI_writeArray 0749       SPI_writeArray@data 0078               ??_resetIRQ 0079  
 __end_of_SPI_write_byte 0700             __pstringtext 06B7                _PORTAbits 000C  
       __CFG_FOSC$INTOSC 0000                _TRISAbits 008C                _TRISCbits 008E  
              _RX_ADDR_P 06BD            resetIRQ@write 007A          ?_SPI_writeArray 0073  
        ?_SPI_write_byte 0070            ??_configureTX 0079         transmitData@data 0020  
       transmitData@sreg 0023      start_initialization 07FE        __size_of_SPI_init 000E  
          ?_transmitData 0070      __end_of_configureTX 07FE        __size_of_bigBlink 0027  
              ___latbits 0000            __pcstackBANK0 0020           ??_transmitData 007C  
      __size_of_configIO 0014    __end_of_SPI_read_byte 06E1       SPI_write_byte@data 0071  
      __size_of_resetIRQ 000F                bigBlink@i 0071                bigBlink@x 0073  
        SPI_writeArray@i 0077                 _LATAbits 010C                 _LATCbits 010E  
      SPI_writeArray@ret 0076                 _PIR1bits 0011              _configureTX 0799  
               _SPI_init 06C4   SPI_write_byte@ret_data 0072                 _WPUAbits 020C  
          bigBlink@i_130 0072         ??_SPI_writeArray 0074         ??_SPI_write_byte 0070  
   __end_of_transmitData 0799                 _bigBlink 0749     SPI_read_byte@address 0074  
           _SSP1CON1bits 0215                 _configIO 0700     SPI_writeArray@length 0073  
          __size_of_main 001A                 _resetIRQ 06E1             _SSP1STATbits 0214  
               main@last 007D        __CFG_CLKOUTEN$OFF 0000    __size_of_transmitData 0029  
