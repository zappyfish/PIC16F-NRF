

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun May 14 23:00:43 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 1.41
    22                           ; Generated 25/01/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F1503 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000E                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001C                     	;# 
    81  008C                     	;# 
    82  008E                     	;# 
    83  0091                     	;# 
    84  0092                     	;# 
    85  0093                     	;# 
    86  0095                     	;# 
    87  0096                     	;# 
    88  0097                     	;# 
    89  0099                     	;# 
    90  009A                     	;# 
    91  009B                     	;# 
    92  009B                     	;# 
    93  009C                     	;# 
    94  009D                     	;# 
    95  009E                     	;# 
    96  009F                     	;# 
    97  010C                     	;# 
    98  010E                     	;# 
    99  0111                     	;# 
   100  0112                     	;# 
   101  0113                     	;# 
   102  0114                     	;# 
   103  0115                     	;# 
   104  0116                     	;# 
   105  0117                     	;# 
   106  0118                     	;# 
   107  0119                     	;# 
   108  011D                     	;# 
   109  018C                     	;# 
   110  018E                     	;# 
   111  0191                     	;# 
   112  0191                     	;# 
   113  0192                     	;# 
   114  0193                     	;# 
   115  0193                     	;# 
   116  0194                     	;# 
   117  0195                     	;# 
   118  0196                     	;# 
   119  0197                     	;# 
   120  020C                     	;# 
   121  0211                     	;# 
   122  0211                     	;# 
   123  0212                     	;# 
   124  0212                     	;# 
   125  0213                     	;# 
   126  0213                     	;# 
   127  0214                     	;# 
   128  0214                     	;# 
   129  0215                     	;# 
   130  0215                     	;# 
   131  0215                     	;# 
   132  0216                     	;# 
   133  0216                     	;# 
   134  0217                     	;# 
   135  0217                     	;# 
   136  0391                     	;# 
   137  0392                     	;# 
   138  0393                     	;# 
   139  0498                     	;# 
   140  0498                     	;# 
   141  0499                     	;# 
   142  049A                     	;# 
   143  049B                     	;# 
   144  049B                     	;# 
   145  049C                     	;# 
   146  049D                     	;# 
   147  049E                     	;# 
   148  049F                     	;# 
   149  0611                     	;# 
   150  0612                     	;# 
   151  0613                     	;# 
   152  0613                     	;# 
   153  0614                     	;# 
   154  0615                     	;# 
   155  0616                     	;# 
   156  0616                     	;# 
   157  0617                     	;# 
   158  0618                     	;# 
   159  0619                     	;# 
   160  0619                     	;# 
   161  061A                     	;# 
   162  061B                     	;# 
   163  061C                     	;# 
   164  061C                     	;# 
   165  0691                     	;# 
   166  0692                     	;# 
   167  0693                     	;# 
   168  0694                     	;# 
   169  0695                     	;# 
   170  0F0F                     	;# 
   171  0F10                     	;# 
   172  0F11                     	;# 
   173  0F12                     	;# 
   174  0F13                     	;# 
   175  0F14                     	;# 
   176  0F15                     	;# 
   177  0F16                     	;# 
   178  0F17                     	;# 
   179  0F18                     	;# 
   180  0F19                     	;# 
   181  0F1A                     	;# 
   182  0F1B                     	;# 
   183  0F1C                     	;# 
   184  0F1D                     	;# 
   185  0F1E                     	;# 
   186  0F1F                     	;# 
   187  0FE3                     	;# 
   188  0FE4                     	;# 
   189  0FE5                     	;# 
   190  0FE6                     	;# 
   191  0FE7                     	;# 
   192  0FE8                     	;# 
   193  0FE9                     	;# 
   194  0FEA                     	;# 
   195  0FEB                     	;# 
   196  0FED                     	;# 
   197  0FEE                     	;# 
   198  0FEF                     	;# 
   199                           
   200                           	psect	stringtext
   201  04DD                     __pstringtext:	
   202  04DD                     _TX_ADDR:	
   203  04DD  340B               	retlw	11
   204  04DE  343B               	retlw	59
   205  04DF  344B               	retlw	75
   206  04E0  345B               	retlw	91
   207  04E1  3460               	retlw	96
   208  04E2                     __end_of_TX_ADDR:	
   209  04E2                     _READ_MASK:	
   210  04E2  341F               	retlw	31
   211  04E3                     __end_of_READ_MASK:	
   212  04E3                     _WRITE_MASK:	
   213  04E3  3420               	retlw	32
   214  04E4                     __end_of_WRITE_MASK:	
   215  04E4                     _W_TX_PAYLOAD:	
   216  04E4  34A0               	retlw	160
   217  04E5                     __end_of_W_TX_PAYLOAD:	
   218  0011                     _PIR1bits	set	17
   219  000C                     _PORTAbits	set	12
   220  0095                     _OPTION_REGbits	set	149
   221  008E                     _TRISC	set	142
   222  008C                     _TRISA	set	140
   223  010C                     _LATAbits	set	268
   224  010E                     _LATCbits	set	270
   225  0214                     _SSP1STATbits	set	532
   226  0215                     _SSP1CON1bits	set	533
   227  0211                     _SSP1BUF	set	529
   228  020C                     _WPUAbits	set	524
   229                           
   230                           ; #config settings
   231  0000                     
   232                           	psect	cinit
   233  07FE                     start_initialization:	
   234  07FE                     __initialization:	
   235  07FE                     end_of_initialization:	
   236                           ;End of C runtime variable initialization code
   237                           
   238  07FE                     __end_of__initialization:	
   239  07FE  0020               	movlb	0
   240  07FF  2E40               	ljmp	_main	;jump to C main() function
   241                           
   242                           	psect	cstackCOMMON
   243  0070                     __pcstackCOMMON:	
   244  0070                     ?_SPI_init:	
   245  0070                     ??_SPI_init:	
   246                           ; 1 bytes @ 0x0
   247                           
   248  0070                     ?_configureTX:	
   249                           ; 1 bytes @ 0x0
   250                           
   251  0070                     ?_writeSPI:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0070                     ??_writeSPI:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0070                     ?_blink:	
   258                           ; 1 bytes @ 0x0
   259                           
   260  0070                     ??_blink:	
   261                           ; 1 bytes @ 0x0
   262                           
   263  0070                     ?_transmitData:	
   264                           ; 1 bytes @ 0x0
   265                           
   266  0070                     ?_configIOTransmitter:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0070                     ??_configIOTransmitter:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0070                     ?_main:	
   273                           ; 1 bytes @ 0x0
   274                           
   275  0070                     ?___ftpack:	
   276                           ; 2 bytes @ 0x0
   277                           
   278  0070                     ___ftpack@arg:	
   279                           ; 3 bytes @ 0x0
   280                           
   281                           
   282                           ; 3 bytes @ 0x0
   283  0070                     	ds	1
   284  0071                     writeSPI@data:	
   285                           
   286                           ; 1 bytes @ 0x1
   287  0071                     	ds	1
   288  0072                     writeSPI@x:	
   289                           
   290                           ; 1 bytes @ 0x2
   291  0072                     	ds	1
   292  0073                     ??_configureTX:	
   293  0073                     ??_transmitData:	
   294                           ; 1 bytes @ 0x3
   295                           
   296  0073                     ___ftpack@exp:	
   297                           ; 1 bytes @ 0x3
   298                           
   299                           
   300                           ; 1 bytes @ 0x3
   301  0073                     	ds	1
   302  0074                     configureTX@i:	
   303  0074                     transmitData@data:	
   304                           ; 1 bytes @ 0x4
   305                           
   306  0074                     ___ftpack@sign:	
   307                           ; 1 bytes @ 0x4
   308                           
   309                           
   310                           ; 1 bytes @ 0x4
   311  0074                     	ds	1
   312  0075                     ??___ftpack:	
   313  0075                     configureTX@i_263:	
   314                           ; 1 bytes @ 0x5
   315                           
   316  0075                     transmitData@sreg:	
   317                           ; 1 bytes @ 0x5
   318                           
   319                           
   320                           ; 1 bytes @ 0x5
   321  0075                     	ds	3
   322  0078                     ?___lbtoft:	
   323                           
   324                           ; 3 bytes @ 0x8
   325  0078                     	ds	3
   326  007B                     ___lbtoft@c:	
   327                           
   328                           ; 1 bytes @ 0xB
   329  007B                     	ds	1
   330                           
   331                           	psect	cstackBANK0
   332  0020                     __pcstackBANK0:	
   333  0020                     ??___lbtoft:	
   334                           
   335                           ; 1 bytes @ 0x0
   336  0020                     	ds	4
   337  0024                     ?___ftmul:	
   338  0024                     ___ftmul@f1:	
   339                           ; 3 bytes @ 0x4
   340                           
   341                           
   342                           ; 3 bytes @ 0x4
   343  0024                     	ds	3
   344  0027                     ___ftmul@f2:	
   345                           
   346                           ; 3 bytes @ 0x7
   347  0027                     	ds	3
   348  002A                     ??___ftmul:	
   349                           
   350                           ; 1 bytes @ 0xA
   351  002A                     	ds	4
   352  002E                     ___ftmul@exp:	
   353                           
   354                           ; 1 bytes @ 0xE
   355  002E                     	ds	1
   356  002F                     ___ftmul@f3_as_product:	
   357                           
   358                           ; 3 bytes @ 0xF
   359  002F                     	ds	3
   360  0032                     ___ftmul@cntr:	
   361                           
   362                           ; 1 bytes @ 0x12
   363  0032                     	ds	1
   364  0033                     ___ftmul@sign:	
   365                           
   366                           ; 1 bytes @ 0x13
   367  0033                     	ds	1
   368  0034                     ?___fttol:	
   369  0034                     ___fttol@f1:	
   370                           ; 4 bytes @ 0x14
   371                           
   372                           
   373                           ; 3 bytes @ 0x14
   374  0034                     	ds	4
   375  0038                     ??___fttol:	
   376                           
   377                           ; 1 bytes @ 0x18
   378  0038                     	ds	4
   379  003C                     ___fttol@sign1:	
   380                           
   381                           ; 1 bytes @ 0x1C
   382  003C                     	ds	1
   383  003D                     ___fttol@lval:	
   384                           
   385                           ; 4 bytes @ 0x1D
   386  003D                     	ds	4
   387  0041                     ___fttol@exp1:	
   388                           
   389                           ; 1 bytes @ 0x21
   390  0041                     	ds	1
   391  0042                     ??_main:	
   392                           
   393                           ; 1 bytes @ 0x22
   394  0042                     	ds	4
   395  0046                     main@data:	
   396                           
   397                           ; 1 bytes @ 0x26
   398  0046                     	ds	1
   399  0047                     main@last:	
   400                           
   401                           ; 1 bytes @ 0x27
   402  0047                     	ds	1
   403  0048                     main@sreg:	
   404                           
   405                           ; 1 bytes @ 0x28
   406  0048                     	ds	1
   407                           
   408                           	psect	maintext
   409  0640                     __pmaintext:	
   410 ;;
   411 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   412 ;;
   413 ;; *************** function _main *****************
   414 ;; Defined at:
   415 ;;		line 56 in file "transmitter.c"
   416 ;; Parameters:    Size  Location     Type
   417 ;;		None
   418 ;; Auto vars:     Size  Location     Type
   419 ;;  sreg            1   40[BANK0 ] unsigned char 
   420 ;;  data            1   38[BANK0 ] unsigned char 
   421 ;;  last            1   39[BANK0 ] unsigned char 
   422 ;; Return value:  Size  Location     Type
   423 ;;                  2   44[None  ] int 
   424 ;; Registers used:
   425 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   426 ;; Tracked objects:
   427 ;;		On entry : B1F/0
   428 ;;		On exit  : 0/0
   429 ;;		Unchanged: 0/0
   430 ;; Data sizes:     COMMON   BANK0   BANK1
   431 ;;      Params:         0       0       0
   432 ;;      Locals:         0       3       0
   433 ;;      Temps:          0       4       0
   434 ;;      Totals:         0       7       0
   435 ;;Total ram usage:        7 bytes
   436 ;; Hardware stack levels required when called:    2
   437 ;; This function calls:
   438 ;;		_SPI_init
   439 ;;		___ftmul
   440 ;;		___fttol
   441 ;;		___lbtoft
   442 ;;		_blink
   443 ;;		_configureTX
   444 ;;		_transmitData
   445 ;;		_writeSPI
   446 ;; This function is called by:
   447 ;;		Startup code after reset
   448 ;; This function uses a non-reentrant model
   449 ;;
   450                           
   451                           
   452                           ;psect for function _main
   453  0640                     _main:	
   454                           
   455                           ;transmitter.c: 57: LATCbits.LATC4 = 1;
   456                           
   457                           ;incstack = 0
   458                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   459  0640  0022               	movlb	2	; select bank2
   460  0641  160E               	bsf	14,4	;volatile
   461                           
   462                           ;transmitter.c: 58: uint8_t last = 1;
   463  0642  0020               	movlb	0	; select bank0
   464  0643  01C7               	clrf	main@last
   465  0644  0AC7               	incf	main@last,f
   466                           
   467                           ;transmitter.c: 59: SPI_init();
   468  0645  24EF               	fcall	_SPI_init
   469                           
   470                           ;transmitter.c: 60: LATAbits.LATA0 = 0;
   471  0646  0022               	movlb	2	; select bank2
   472  0647  100C               	bcf	12,0	;volatile
   473                           
   474                           ;transmitter.c: 61: configureTX();
   475  0648  25CA               	fcall	_configureTX
   476  0649                     l1016:	
   477                           ;transmitter.c: 62: while(1) {
   478                           
   479                           
   480                           ;transmitter.c: 63: LATCbits.LATC4 = 0;
   481  0649  0022               	movlb	2	; select bank2
   482  064A  120E               	bcf	14,4	;volatile
   483                           
   484                           ;transmitter.c: 64: uint8_t sreg = writeSPI(0xFF);
   485  064B  30FF               	movlw	255
   486  064C  24FA               	fcall	_writeSPI
   487  064D  0020               	movlb	0	; select bank0
   488  064E  00C2               	movwf	??_main
   489  064F  0842               	movf	??_main,w
   490  0650  00C8               	movwf	main@sreg
   491                           
   492                           ;transmitter.c: 65: LATCbits.LATC4 = 1;
   493  0651  0022               	movlb	2	; select bank2
   494  0652  160E               	bsf	14,4	;volatile
   495                           
   496                           ;transmitter.c: 66: LATAbits.LATA0 = 1;
   497  0653  140C               	bsf	12,0	;volatile
   498                           
   499                           ;transmitter.c: 67: _delay((unsigned long)((sreg)*(16000000/4000.0)));
   500  0654  0020               	movlb	0	; select bank0
   501  0655  0848               	movf	main@sreg,w
   502  0656  251E               	fcall	___lbtoft
   503  0657  0878               	movf	?___lbtoft,w
   504  0658  0020               	movlb	0	; select bank0
   505  0659  00A7               	movwf	___ftmul@f2
   506  065A  0879               	movf	?___lbtoft+1,w
   507  065B  00A8               	movwf	___ftmul@f2+1
   508  065C  087A               	movf	?___lbtoft+2,w
   509  065D  00A9               	movwf	___ftmul@f2+2
   510  065E  3000               	movlw	0
   511  065F  00A4               	movwf	___ftmul@f1
   512  0660  307A               	movlw	122
   513  0661  00A5               	movwf	___ftmul@f1+1
   514  0662  3045               	movlw	69
   515  0663  00A6               	movwf	___ftmul@f1+2
   516  0664  274B               	fcall	___ftmul
   517  0665  0020               	movlb	0	; select bank0
   518  0666  0824               	movf	?___ftmul,w
   519  0667  00B4               	movwf	___fttol@f1
   520  0668  0825               	movf	?___ftmul+1,w
   521  0669  00B5               	movwf	___fttol@f1+1
   522  066A  0826               	movf	?___ftmul+2,w
   523  066B  00B6               	movwf	___fttol@f1+2
   524  066C  26C4               	fcall	___fttol
   525  066D  0020               	movlb	0	; select bank0
   526  066E  0834               	movf	?___fttol,w
   527  066F  00C2               	movwf	??_main
   528  0670  0835               	movf	?___fttol+1,w
   529  0671  00C3               	movwf	??_main+1
   530  0672  0836               	movf	?___fttol+2,w
   531  0673  00C4               	movwf	??_main+2
   532  0674  0837               	movf	?___fttol+3,w
   533  0675  00C5               	movwf	??_main+3
   534                           
   535                           ;transmitter.c: 68: LATAbits.LATA0 = 0;
   536  0676  0022               	movlb	2	; select bank2
   537  0677  100C               	bcf	12,0	;volatile
   538                           
   539                           ;transmitter.c: 69: _delay((unsigned long)((sreg)*(16000000/4000.0)));
   540  0678  0020               	movlb	0	; select bank0
   541  0679  0848               	movf	main@sreg,w
   542  067A  251E               	fcall	___lbtoft
   543  067B  0878               	movf	?___lbtoft,w
   544  067C  0020               	movlb	0	; select bank0
   545  067D  00A7               	movwf	___ftmul@f2
   546  067E  0879               	movf	?___lbtoft+1,w
   547  067F  00A8               	movwf	___ftmul@f2+1
   548  0680  087A               	movf	?___lbtoft+2,w
   549  0681  00A9               	movwf	___ftmul@f2+2
   550  0682  3000               	movlw	0
   551  0683  00A4               	movwf	___ftmul@f1
   552  0684  307A               	movlw	122
   553  0685  00A5               	movwf	___ftmul@f1+1
   554  0686  3045               	movlw	69
   555  0687  00A6               	movwf	___ftmul@f1+2
   556  0688  274B               	fcall	___ftmul
   557  0689  0020               	movlb	0	; select bank0
   558  068A  0824               	movf	?___ftmul,w
   559  068B  00B4               	movwf	___fttol@f1
   560  068C  0825               	movf	?___ftmul+1,w
   561  068D  00B5               	movwf	___fttol@f1+1
   562  068E  0826               	movf	?___ftmul+2,w
   563  068F  00B6               	movwf	___fttol@f1+2
   564  0690  26C4               	fcall	___fttol
   565  0691  0020               	movlb	0	; select bank0
   566  0692  0834               	movf	?___fttol,w
   567  0693  00C2               	movwf	??_main
   568  0694  0835               	movf	?___fttol+1,w
   569  0695  00C3               	movwf	??_main+1
   570  0696  0836               	movf	?___fttol+2,w
   571  0697  00C4               	movwf	??_main+2
   572  0698  0837               	movf	?___fttol+3,w
   573  0699  00C5               	movwf	??_main+3
   574                           
   575                           ;transmitter.c: 70: LATCbits.LATC4 = 0;
   576  069A  0022               	movlb	2	; select bank2
   577  069B  120E               	bcf	14,4	;volatile
   578                           
   579                           ;transmitter.c: 71: writeSPI(0x00 & READ_MASK);
   580  069C  3000               	movlw	0
   581  069D  24FA               	fcall	_writeSPI
   582                           
   583                           ;transmitter.c: 72: uint8_t data = writeSPI(0xFF);
   584  069E  30FF               	movlw	255
   585  069F  24FA               	fcall	_writeSPI
   586  06A0  0020               	movlb	0	; select bank0
   587  06A1  00C2               	movwf	??_main
   588  06A2  0842               	movf	??_main,w
   589  06A3  00C6               	movwf	main@data
   590                           
   591                           ;transmitter.c: 73: LATCbits.LATC4 = 1;
   592  06A4  0022               	movlb	2	; select bank2
   593  06A5  160E               	bsf	14,4	;volatile
   594                           
   595                           ;transmitter.c: 74: if(data == 0b01011010) {
   596  06A6  305A               	movlw	90
   597  06A7  0020               	movlb	0	; select bank0
   598  06A8  0646               	xorwf	main@data,w
   599  06A9  1D03               	btfss	3,2
   600  06AA  2EB6               	goto	l1044
   601                           
   602                           ;transmitter.c: 75: LATAbits.LATA0 = !PORTAbits.RA0;
   603  06AB  1003               	clrc
   604  06AC  1C0C               	btfss	12,0	;volatile
   605  06AD  1403               	setc
   606  06AE  1C03               	btfss	3,0
   607  06AF  2EB3               	goto	u860
   608  06B0  0022               	movlb	2	; select bank2
   609  06B1  140C               	bsf	12,0	;volatile
   610  06B2  2EB5               	goto	l1042
   611  06B3                     u860:	
   612  06B3  0022               	movlb	2	; select bank2
   613  06B4  100C               	bcf	12,0	;volatile
   614  06B5                     l1042:	
   615                           
   616                           ;transmitter.c: 76: blink();
   617  06B5  2509               	fcall	_blink
   618  06B6                     l1044:	
   619                           
   620                           ;transmitter.c: 77: }
   621                           ;transmitter.c: 78: if(last!= PORTAbits.RA5) {
   622  06B6  0020               	movlb	0	; select bank0
   623  06B7  0E0C               	swapf	12,w	;volatile
   624  06B8  0C89               	rrf	9,f
   625  06B9  3901               	andlw	1
   626  06BA  0647               	xorwf	main@last,w
   627  06BB  1903               	skipnz
   628  06BC  2E49               	goto	l1016
   629                           
   630                           ;transmitter.c: 79: last = PORTAbits.RA5;
   631  06BD  3000               	movlw	0
   632  06BE  1A8C               	btfsc	12,5	;volatile
   633  06BF  3001               	movlw	1
   634  06C0  00C7               	movwf	main@last
   635                           
   636                           ;transmitter.c: 80: transmitData(0xFF);
   637  06C1  30FF               	movlw	255
   638  06C2  2537               	fcall	_transmitData
   639  06C3  2E49               	goto	l1016
   640  06C4                     __end_of_main:	
   641                           
   642                           	psect	text1
   643  0537                     __ptext1:	
   644 ;; *************** function _transmitData *****************
   645 ;; Defined at:
   646 ;;		line 189 in file "transmitter.c"
   647 ;; Parameters:    Size  Location     Type
   648 ;;  data            1    wreg     unsigned char 
   649 ;; Auto vars:     Size  Location     Type
   650 ;;  data            1    4[COMMON] unsigned char 
   651 ;;  sreg            1    5[COMMON] unsigned char 
   652 ;; Return value:  Size  Location     Type
   653 ;;                  1    wreg      void 
   654 ;; Registers used:
   655 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   656 ;; Tracked objects:
   657 ;;		On entry : 0/0
   658 ;;		On exit  : 0/0
   659 ;;		Unchanged: 0/0
   660 ;; Data sizes:     COMMON   BANK0   BANK1
   661 ;;      Params:         0       0       0
   662 ;;      Locals:         2       0       0
   663 ;;      Temps:          1       0       0
   664 ;;      Totals:         3       0       0
   665 ;;Total ram usage:        3 bytes
   666 ;; Hardware stack levels used:    1
   667 ;; Hardware stack levels required when called:    1
   668 ;; This function calls:
   669 ;;		_writeSPI
   670 ;; This function is called by:
   671 ;;		_main
   672 ;; This function uses a non-reentrant model
   673 ;;
   674                           
   675                           
   676                           ;psect for function _transmitData
   677  0537                     _transmitData:	
   678                           
   679                           ;incstack = 0
   680                           ; Regs used in _transmitData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   681                           ;transmitData@data stored from wreg
   682  0537  00F4               	movwf	transmitData@data
   683                           
   684                           ;transmitter.c: 190: LATCbits.LATC4 = 0;
   685  0538  0022               	movlb	2	; select bank2
   686  0539  120E               	bcf	14,4	;volatile
   687                           
   688                           ;transmitter.c: 191: writeSPI(W_TX_PAYLOAD);
   689  053A  30E4               	movlw	low (_W_TX_PAYLOAD| (0+32768))
   690  053B  0084               	movwf	4
   691  053C  3084               	movlw	high (_W_TX_PAYLOAD| (0+32768))
   692  053D  0085               	movwf	5
   693  053E  0800               	movf	0,w	;code access
   694  053F  24FA               	fcall	_writeSPI
   695                           
   696                           ;transmitter.c: 192: writeSPI(data);
   697  0540  0874               	movf	transmitData@data,w
   698  0541  24FA               	fcall	_writeSPI
   699                           
   700                           ;transmitter.c: 193: LATCbits.LATC4 = 1;
   701  0542  0022               	movlb	2	; select bank2
   702  0543  160E               	bsf	14,4	;volatile
   703                           
   704                           ;transmitter.c: 194: LATCbits.LATC3 = 1;
   705  0544  158E               	bsf	14,3	;volatile
   706                           
   707                           ;transmitter.c: 195: _delay((unsigned long)((50)*(16000000/4000000.0)));
   708  0545  3042               	movlw	66
   709  0546                     u897:	
   710  0546  0B89               	decfsz	9,f
   711  0547  2D46               	goto	u897
   712  0548  3200               	nop2
   713                           
   714                           ;transmitter.c: 197: LATCbits.LATC4 = 0;
   715  0549  0022               	movlb	2	; select bank2
   716  054A                     L1:	
   717  054A  120E               	bcf	14,4	;volatile
   718                           
   719                           ;transmitter.c: 198: uint8_t sreg = writeSPI(0xFF);
   720  054B  30FF               	movlw	255
   721  054C  24FA               	fcall	_writeSPI
   722  054D  00F3               	movwf	??_transmitData
   723  054E  0873               	movf	??_transmitData,w
   724  054F  00F5               	movwf	transmitData@sreg
   725                           
   726                           ;transmitter.c: 203: LATCbits.LATC4 = 1;
   727  0550  0022               	movlb	2	; select bank2
   728  0551  160E               	bsf	14,4	;volatile
   729  0552  1EF5               	btfss	transmitData@sreg,5
   730  0553  2D4A               	goto	L1
   731                           
   732                           ;transmitter.c: 204: }
   733                           ;transmitter.c: 205: LATCbits.LATC3 = 0;
   734                           
   735                           ;transmitter.c: 202: sreg = writeSPI(0xFF);
   736                           
   737                           ;transmitter.c: 201: LATCbits.LATC4 = 0;
   738                           
   739                           ;transmitter.c: 200: while(!(sreg & 0b00100000)) {
   740                           
   741                           ;transmitter.c: 199: LATCbits.LATC4 = 1;
   742  0554  118E               	bcf	14,3	;volatile
   743                           
   744                           ;transmitter.c: 206: LATCbits.LATC4 = 0;
   745  0555  120E               	bcf	14,4	;volatile
   746                           
   747                           ;transmitter.c: 207: uint8_t sreg = writeSPI(0x07 | WRITE_MASK);
   748  0556  30E3               	movlw	low (_WRITE_MASK| (0+32768))
   749  0557  0084               	movwf	4
   750  0558  3084               	movlw	high (_WRITE_MASK| (0+32768))
   751  0559  0085               	movwf	5
   752  055A  0800               	movf	0,w	;code access
   753  055B  3807               	iorlw	7
   754  055C  24FA               	fcall	_writeSPI
   755  055D  00F3               	movwf	??_transmitData
   756  055E  0873               	movf	??_transmitData,w
   757  055F  00F5               	movwf	transmitData@sreg
   758                           
   759                           ;transmitter.c: 208: writeSPI((sreg | 0b01110000));
   760  0560  0875               	movf	transmitData@sreg,w
   761  0561  3870               	iorlw	112
   762  0562  24FA               	fcall	_writeSPI
   763                           
   764                           ;transmitter.c: 209: LATCbits.LATC4 = 1;
   765  0563  0022               	movlb	2	; select bank2
   766  0564  160E               	bsf	14,4	;volatile
   767  0565  0008               	return
   768  0566                     __end_of_transmitData:	
   769                           
   770                           	psect	text2
   771  05CA                     __ptext2:	
   772 ;; *************** function _configureTX *****************
   773 ;; Defined at:
   774 ;;		line 102 in file "transmitter.c"
   775 ;; Parameters:    Size  Location     Type
   776 ;;		None
   777 ;; Auto vars:     Size  Location     Type
   778 ;;  i               1    5[COMMON] unsigned char 
   779 ;;  i               1    4[COMMON] unsigned char 
   780 ;; Return value:  Size  Location     Type
   781 ;;                  1    wreg      void 
   782 ;; Registers used:
   783 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   784 ;; Tracked objects:
   785 ;;		On entry : 0/0
   786 ;;		On exit  : 0/0
   787 ;;		Unchanged: 0/0
   788 ;; Data sizes:     COMMON   BANK0   BANK1
   789 ;;      Params:         0       0       0
   790 ;;      Locals:         2       0       0
   791 ;;      Temps:          1       0       0
   792 ;;      Totals:         3       0       0
   793 ;;Total ram usage:        3 bytes
   794 ;; Hardware stack levels used:    1
   795 ;; Hardware stack levels required when called:    1
   796 ;; This function calls:
   797 ;;		_writeSPI
   798 ;; This function is called by:
   799 ;;		_main
   800 ;; This function uses a non-reentrant model
   801 ;;
   802                           
   803                           
   804                           ;psect for function _configureTX
   805  05CA                     _configureTX:	
   806                           
   807                           ;transmitter.c: 115: LATCbits.LATC4 = 0;
   808                           
   809                           ;incstack = 0
   810                           ; Regs used in _configureTX: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   811  05CA  0022               	movlb	2	; select bank2
   812  05CB  120E               	bcf	14,4	;volatile
   813                           
   814                           ;transmitter.c: 116: writeSPI(0x00 | WRITE_MASK);
   815  05CC  30E3               	movlw	low (_WRITE_MASK| (0+32768))
   816  05CD  0084               	movwf	4
   817  05CE  3084               	movlw	high (_WRITE_MASK| (0+32768))
   818  05CF  0085               	movwf	5
   819  05D0  0800               	movf	0,w	;code access
   820  05D1  24FA               	fcall	_writeSPI
   821                           
   822                           ;transmitter.c: 117: writeSPI(0b01011010);
   823  05D2  305A               	movlw	90
   824  05D3  24FA               	fcall	_writeSPI
   825                           
   826                           ;transmitter.c: 118: LATCbits.LATC4 = 1;
   827  05D4  0022               	movlb	2	; select bank2
   828  05D5  160E               	bsf	14,4	;volatile
   829                           
   830                           ;transmitter.c: 119: LATCbits.LATC4 = 0;
   831  05D6  120E               	bcf	14,4	;volatile
   832                           
   833                           ;transmitter.c: 120: writeSPI(0x01 | WRITE_MASK);
   834  05D7  30E3               	movlw	low (_WRITE_MASK| (0+32768))
   835  05D8  0084               	movwf	4
   836  05D9  3084               	movlw	high (_WRITE_MASK| (0+32768))
   837  05DA  0085               	movwf	5
   838  05DB  0800               	movf	0,w	;code access
   839  05DC  3801               	iorlw	1
   840  05DD  24FA               	fcall	_writeSPI
   841                           
   842                           ;transmitter.c: 121: writeSPI(0b00000001);
   843  05DE  3001               	movlw	1
   844  05DF  24FA               	fcall	_writeSPI
   845                           
   846                           ;transmitter.c: 122: LATCbits.LATC4 = 1;
   847  05E0  0022               	movlb	2	; select bank2
   848  05E1  160E               	bsf	14,4	;volatile
   849                           
   850                           ;transmitter.c: 123: LATCbits.LATC4 = 0;
   851  05E2  120E               	bcf	14,4	;volatile
   852                           
   853                           ;transmitter.c: 124: writeSPI(0x02 | WRITE_MASK);
   854  05E3  30E3               	movlw	low (_WRITE_MASK| (0+32768))
   855  05E4  0084               	movwf	4
   856  05E5  3084               	movlw	high (_WRITE_MASK| (0+32768))
   857  05E6  0085               	movwf	5
   858  05E7  0800               	movf	0,w	;code access
   859  05E8  3802               	iorlw	2
   860  05E9  24FA               	fcall	_writeSPI
   861                           
   862                           ;transmitter.c: 125: writeSPI(0b00000001);
   863  05EA  3001               	movlw	1
   864  05EB  24FA               	fcall	_writeSPI
   865                           
   866                           ;transmitter.c: 126: LATCbits.LATC4 = 1;
   867  05EC  0022               	movlb	2	; select bank2
   868  05ED  160E               	bsf	14,4	;volatile
   869                           
   870                           ;transmitter.c: 127: LATCbits.LATC4 = 0;
   871  05EE  120E               	bcf	14,4	;volatile
   872                           
   873                           ;transmitter.c: 128: writeSPI(0x11 | WRITE_MASK);
   874  05EF  30E3               	movlw	low (_WRITE_MASK| (0+32768))
   875  05F0  0084               	movwf	4
   876  05F1  3084               	movlw	high (_WRITE_MASK| (0+32768))
   877  05F2  0085               	movwf	5
   878  05F3  0800               	movf	0,w	;code access
   879  05F4  3811               	iorlw	17
   880  05F5  24FA               	fcall	_writeSPI
   881                           
   882                           ;transmitter.c: 129: writeSPI(0b00000001);
   883  05F6  3001               	movlw	1
   884  05F7  24FA               	fcall	_writeSPI
   885                           
   886                           ;transmitter.c: 130: LATCbits.LATC4 = 1;
   887  05F8  0022               	movlb	2	; select bank2
   888  05F9  160E               	bsf	14,4	;volatile
   889                           
   890                           ;transmitter.c: 131: LATCbits.LATC4 = 0;
   891  05FA  120E               	bcf	14,4	;volatile
   892                           
   893                           ;transmitter.c: 132: writeSPI(0x03 | WRITE_MASK);
   894  05FB  30E3               	movlw	low (_WRITE_MASK| (0+32768))
   895  05FC  0084               	movwf	4
   896  05FD  3084               	movlw	high (_WRITE_MASK| (0+32768))
   897  05FE  0085               	movwf	5
   898  05FF  0800               	movf	0,w	;code access
   899  0600  3803               	iorlw	3
   900  0601  24FA               	fcall	_writeSPI
   901                           
   902                           ;transmitter.c: 133: writeSPI(0b00000011);
   903  0602  3003               	movlw	3
   904  0603  24FA               	fcall	_writeSPI
   905                           
   906                           ;transmitter.c: 134: LATCbits.LATC4 = 1;
   907  0604  0022               	movlb	2	; select bank2
   908  0605  160E               	bsf	14,4	;volatile
   909                           
   910                           ;transmitter.c: 136: LATCbits.LATC4 = 0;
   911  0606  120E               	bcf	14,4	;volatile
   912                           
   913                           ;transmitter.c: 137: writeSPI(0x10 | WRITE_MASK);
   914  0607  30E3               	movlw	low (_WRITE_MASK| (0+32768))
   915  0608  0084               	movwf	4
   916  0609  3084               	movlw	high (_WRITE_MASK| (0+32768))
   917  060A  0085               	movwf	5
   918  060B  0800               	movf	0,w	;code access
   919  060C  3810               	iorlw	16
   920  060D  24FA               	fcall	_writeSPI
   921                           
   922                           ;transmitter.c: 138: for(uint8_t i = 0; i < 5; ++i) {
   923  060E  01F4               	clrf	configureTX@i
   924  060F  3005               	movlw	5
   925  0610  0274               	subwf	configureTX@i,w
   926  0611  1803               	btfsc	3,0
   927  0612  2E1D               	goto	l60
   928  0613                     l856:	
   929                           
   930                           ;transmitter.c: 139: writeSPI(0xE7);
   931  0613  30E7               	movlw	231
   932  0614  24FA               	fcall	_writeSPI
   933  0615  3001               	movlw	1
   934  0616  00F3               	movwf	??_configureTX
   935  0617  0873               	movf	??_configureTX,w
   936  0618  07F4               	addwf	configureTX@i,f
   937  0619  3005               	movlw	5
   938  061A  0274               	subwf	configureTX@i,w
   939  061B  1C03               	skipc
   940  061C  2E13               	goto	l856
   941  061D                     l60:	
   942                           
   943                           ;transmitter.c: 140: }
   944                           ;transmitter.c: 141: LATCbits.LATC4 = 1;
   945  061D  0022               	movlb	2	; select bank2
   946  061E  160E               	bsf	14,4	;volatile
   947                           
   948                           ;transmitter.c: 143: LATCbits.LATC4 = 0;
   949  061F  120E               	bcf	14,4	;volatile
   950                           
   951                           ;transmitter.c: 144: writeSPI(0x0A | WRITE_MASK);
   952  0620  30E3               	movlw	low (_WRITE_MASK| (0+32768))
   953  0621  0084               	movwf	4
   954  0622  3084               	movlw	high (_WRITE_MASK| (0+32768))
   955  0623  0085               	movwf	5
   956  0624  0800               	movf	0,w	;code access
   957  0625  380A               	iorlw	10
   958  0626  24FA               	fcall	_writeSPI
   959                           
   960                           ;transmitter.c: 145: for(uint8_t i = 0; i < 5; ++i) {
   961  0627  01F5               	clrf	configureTX@i_263
   962  0628  3005               	movlw	5
   963  0629  0275               	subwf	configureTX@i_263,w
   964  062A  1803               	btfsc	3,0
   965  062B  2E3D               	goto	l62
   966  062C                     l870:	
   967                           
   968                           ;transmitter.c: 146: writeSPI(TX_ADDR[i]);
   969  062C  0875               	movf	configureTX@i_263,w
   970  062D  3EDD               	addlw	low (_TX_ADDR| (0+32768))
   971  062E  0084               	movwf	4
   972  062F  3084               	movlw	high (_TX_ADDR| (0+32768))
   973  0630  1803               	skipnc
   974  0631  3E01               	addlw	1
   975  0632  0085               	movwf	5
   976  0633  0800               	movf	0,w	;code access
   977  0634  24FA               	fcall	_writeSPI
   978  0635  3001               	movlw	1
   979  0636  00F3               	movwf	??_configureTX
   980  0637  0873               	movf	??_configureTX,w
   981  0638  07F5               	addwf	configureTX@i_263,f
   982  0639  3005               	movlw	5
   983  063A  0275               	subwf	configureTX@i_263,w
   984  063B  1C03               	skipc
   985  063C  2E2C               	goto	l870
   986  063D                     l62:	
   987                           
   988                           ;transmitter.c: 147: }
   989                           ;transmitter.c: 148: LATCbits.LATC4 = 1;
   990  063D  0022               	movlb	2	; select bank2
   991  063E  160E               	bsf	14,4	;volatile
   992  063F  0008               	return
   993  0640                     __end_of_configureTX:	
   994                           
   995                           	psect	text3
   996  04FA                     __ptext3:	
   997 ;; *************** function _writeSPI *****************
   998 ;; Defined at:
   999 ;;		line 164 in file "transmitter.c"
  1000 ;; Parameters:    Size  Location     Type
  1001 ;;  data            1    wreg     unsigned char 
  1002 ;; Auto vars:     Size  Location     Type
  1003 ;;  data            1    1[COMMON] unsigned char 
  1004 ;;  x               1    2[COMMON] unsigned char 
  1005 ;; Return value:  Size  Location     Type
  1006 ;;                  1    wreg      unsigned char 
  1007 ;; Registers used:
  1008 ;;		wreg
  1009 ;; Tracked objects:
  1010 ;;		On entry : 0/0
  1011 ;;		On exit  : 0/0
  1012 ;;		Unchanged: 0/0
  1013 ;; Data sizes:     COMMON   BANK0   BANK1
  1014 ;;      Params:         0       0       0
  1015 ;;      Locals:         2       0       0
  1016 ;;      Temps:          1       0       0
  1017 ;;      Totals:         3       0       0
  1018 ;;Total ram usage:        3 bytes
  1019 ;; Hardware stack levels used:    1
  1020 ;; This function calls:
  1021 ;;		Nothing
  1022 ;; This function is called by:
  1023 ;;		_main
  1024 ;;		_configureTX
  1025 ;;		_transmitData
  1026 ;; This function uses a non-reentrant model
  1027 ;;
  1028                           
  1029                           
  1030                           ;psect for function _writeSPI
  1031  04FA                     _writeSPI:	
  1032                           
  1033                           ;incstack = 0
  1034                           ; Regs used in _writeSPI: [wreg]
  1035                           ;writeSPI@data stored from wreg
  1036  04FA  00F1               	movwf	writeSPI@data
  1037                           
  1038                           ;transmitter.c: 166: uint8_t x;
  1039                           ;transmitter.c: 167: SSP1BUF = data;
  1040  04FB  0871               	movf	writeSPI@data,w
  1041  04FC  0024               	movlb	4	; select bank4
  1042  04FD  0091               	movwf	17	;volatile
  1043  04FE                     l66:	
  1044                           ;transmitter.c: 168: while(!PIR1bits.SSP1IF);
  1045                           
  1046  04FE  0020               	movlb	0	; select bank0
  1047  04FF  1D91               	btfss	17,3	;volatile
  1048  0500  2CFE               	goto	l66
  1049                           
  1050                           ;transmitter.c: 169: PIR1bits.SSP1IF = 0;
  1051  0501  1191               	bcf	17,3	;volatile
  1052                           
  1053                           ;transmitter.c: 170: x = SSP1BUF;
  1054  0502  0024               	movlb	4	; select bank4
  1055  0503  0811               	movf	17,w	;volatile
  1056  0504  00F0               	movwf	??_writeSPI
  1057  0505  0870               	movf	??_writeSPI,w
  1058  0506  00F2               	movwf	writeSPI@x
  1059                           
  1060                           ;transmitter.c: 171: return x;
  1061  0507  0872               	movf	writeSPI@x,w
  1062  0508  0008               	return
  1063  0509                     __end_of_writeSPI:	
  1064                           
  1065                           	psect	text4
  1066  0509                     __ptext4:	
  1067 ;; *************** function _blink *****************
  1068 ;; Defined at:
  1069 ;;		line 95 in file "transmitter.c"
  1070 ;; Parameters:    Size  Location     Type
  1071 ;;		None
  1072 ;; Auto vars:     Size  Location     Type
  1073 ;;		None
  1074 ;; Return value:  Size  Location     Type
  1075 ;;                  1    wreg      void 
  1076 ;; Registers used:
  1077 ;;		wreg
  1078 ;; Tracked objects:
  1079 ;;		On entry : 0/0
  1080 ;;		On exit  : 0/0
  1081 ;;		Unchanged: 0/0
  1082 ;; Data sizes:     COMMON   BANK0   BANK1
  1083 ;;      Params:         0       0       0
  1084 ;;      Locals:         0       0       0
  1085 ;;      Temps:          1       0       0
  1086 ;;      Totals:         1       0       0
  1087 ;;Total ram usage:        1 bytes
  1088 ;; Hardware stack levels used:    1
  1089 ;; This function calls:
  1090 ;;		Nothing
  1091 ;; This function is called by:
  1092 ;;		_main
  1093 ;; This function uses a non-reentrant model
  1094 ;;
  1095                           
  1096                           
  1097                           ;psect for function _blink
  1098  0509                     _blink:	
  1099                           
  1100                           ;transmitter.c: 96: LATAbits.LATA0 = 1;
  1101                           
  1102                           ;incstack = 0
  1103                           ; Regs used in _blink: [wreg]
  1104  0509  0022               	movlb	2	; select bank2
  1105  050A  140C               	bsf	12,0	;volatile
  1106                           
  1107                           ;transmitter.c: 97: _delay((unsigned long)((20)*(16000000/4000.0)));
  1108  050B  3068               	movlw	104
  1109  050C  00F0               	movwf	??_blink
  1110  050D  30E4               	movlw	228
  1111  050E                     u907:	
  1112  050E  0B89               	decfsz	9,f
  1113  050F  2D0E               	goto	u907
  1114  0510  0BF0               	decfsz	??_blink,f
  1115  0511  2D0E               	goto	u907
  1116  0512  3200               	nop2
  1117                           
  1118                           ;transmitter.c: 98: LATAbits.LATA0 = 0;
  1119  0513  0022               	movlb	2	; select bank2
  1120  0514  100C               	bcf	12,0	;volatile
  1121                           
  1122                           ;transmitter.c: 99: _delay((unsigned long)((20)*(16000000/4000.0)));
  1123  0515  3068               	movlw	104
  1124  0516  00F0               	movwf	??_blink
  1125  0517  30E4               	movlw	228
  1126  0518                     u917:	
  1127  0518  0B89               	decfsz	9,f
  1128  0519  2D18               	goto	u917
  1129  051A  0BF0               	decfsz	??_blink,f
  1130  051B  2D18               	goto	u917
  1131  051C  3200               	nop2
  1132  051D  0008               	return
  1133  051E                     __end_of_blink:	
  1134                           
  1135                           	psect	text5
  1136  051E                     __ptext5:	
  1137 ;; *************** function ___lbtoft *****************
  1138 ;; Defined at:
  1139 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbtoft.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;  c               1    wreg     unsigned char 
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;  c               1   11[COMMON] unsigned char 
  1144 ;; Return value:  Size  Location     Type
  1145 ;;                  3    8[COMMON] float 
  1146 ;; Registers used:
  1147 ;;		wreg, status,2, status,0, pclath, cstack
  1148 ;; Tracked objects:
  1149 ;;		On entry : 0/0
  1150 ;;		On exit  : 0/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMMON   BANK0   BANK1
  1153 ;;      Params:         3       0       0
  1154 ;;      Locals:         1       0       0
  1155 ;;      Temps:          0       4       0
  1156 ;;      Totals:         4       4       0
  1157 ;;Total ram usage:        8 bytes
  1158 ;; Hardware stack levels used:    1
  1159 ;; Hardware stack levels required when called:    1
  1160 ;; This function calls:
  1161 ;;		___ftpack
  1162 ;; This function is called by:
  1163 ;;		_main
  1164 ;; This function uses a non-reentrant model
  1165 ;;
  1166                           
  1167                           
  1168                           ;psect for function ___lbtoft
  1169  051E                     ___lbtoft:	
  1170                           
  1171                           ;incstack = 0
  1172                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  1173                           ;___lbtoft@c stored from wreg
  1174  051E  00FB               	movwf	___lbtoft@c
  1175  051F  087B               	movf	___lbtoft@c,w
  1176  0520  0020               	movlb	0	; select bank0
  1177  0521  00A0               	movwf	??___lbtoft
  1178  0522  01A1               	clrf	??___lbtoft+1
  1179  0523  01A2               	clrf	??___lbtoft+2
  1180  0524  0820               	movf	??___lbtoft,w
  1181  0525  00F0               	movwf	___ftpack@arg
  1182  0526  0821               	movf	??___lbtoft+1,w
  1183  0527  00F1               	movwf	___ftpack@arg+1
  1184  0528  0822               	movf	??___lbtoft+2,w
  1185  0529  00F2               	movwf	___ftpack@arg+2
  1186  052A  308E               	movlw	142
  1187  052B  00A3               	movwf	??___lbtoft+3
  1188  052C  0823               	movf	??___lbtoft+3,w
  1189  052D  00F3               	movwf	___ftpack@exp
  1190  052E  01F4               	clrf	___ftpack@sign
  1191  052F  2566               	fcall	___ftpack
  1192  0530  0870               	movf	?___ftpack,w
  1193  0531  00F8               	movwf	?___lbtoft
  1194  0532  0871               	movf	?___ftpack+1,w
  1195  0533  00F9               	movwf	?___lbtoft+1
  1196  0534  0872               	movf	?___ftpack+2,w
  1197  0535  00FA               	movwf	?___lbtoft+2
  1198  0536  0008               	return
  1199  0537                     __end_of___lbtoft:	
  1200                           
  1201                           	psect	text6
  1202  06C4                     __ptext6:	
  1203 ;; *************** function ___fttol *****************
  1204 ;; Defined at:
  1205 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  1206 ;; Parameters:    Size  Location     Type
  1207 ;;  f1              3   20[BANK0 ] float 
  1208 ;; Auto vars:     Size  Location     Type
  1209 ;;  lval            4   29[BANK0 ] unsigned long 
  1210 ;;  exp1            1   33[BANK0 ] unsigned char 
  1211 ;;  sign1           1   28[BANK0 ] unsigned char 
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  4   20[BANK0 ] long 
  1214 ;; Registers used:
  1215 ;;		wreg, status,2, status,0
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMMON   BANK0   BANK1
  1221 ;;      Params:         0       4       0
  1222 ;;      Locals:         0       6       0
  1223 ;;      Temps:          0       4       0
  1224 ;;      Totals:         0      14       0
  1225 ;;Total ram usage:       14 bytes
  1226 ;; Hardware stack levels used:    1
  1227 ;; This function calls:
  1228 ;;		Nothing
  1229 ;; This function is called by:
  1230 ;;		_main
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234                           
  1235                           ;psect for function ___fttol
  1236  06C4                     ___fttol:	
  1237                           
  1238                           ;incstack = 0
  1239                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1240  06C4  0020               	movlb	0	; select bank0
  1241  06C5  0834               	movf	___fttol@f1,w
  1242  06C6  00B8               	movwf	??___fttol
  1243  06C7  0835               	movf	___fttol@f1+1,w
  1244  06C8  00B9               	movwf	??___fttol+1
  1245  06C9  0836               	movf	___fttol@f1+2,w
  1246  06CA  00BA               	movwf	??___fttol+2
  1247  06CB  1003               	clrc
  1248  06CC  0D39               	rlf	??___fttol+1,w
  1249  06CD  0D3A               	rlf	??___fttol+2,w
  1250  06CE  00BB               	movwf	??___fttol+3
  1251  06CF  083B               	movf	??___fttol+3,w
  1252  06D0  00C1               	movwf	___fttol@exp1
  1253  06D1  0841               	movf	___fttol@exp1,w
  1254  06D2  1D03               	btfss	3,2
  1255  06D3  2EDD               	goto	l968
  1256  06D4  3000               	movlw	0
  1257  06D5  00B7               	movwf	?___fttol+3
  1258  06D6  3000               	movlw	0
  1259  06D7  00B6               	movwf	?___fttol+2
  1260  06D8  3000               	movlw	0
  1261  06D9  00B5               	movwf	?___fttol+1
  1262  06DA  3000               	movlw	0
  1263  06DB  00B4               	movwf	?___fttol
  1264  06DC  0008               	return
  1265  06DD                     l968:	
  1266  06DD  0834               	movf	___fttol@f1,w
  1267  06DE  00B8               	movwf	??___fttol
  1268  06DF  0835               	movf	___fttol@f1+1,w
  1269  06E0  00B9               	movwf	??___fttol+1
  1270  06E1  0836               	movf	___fttol@f1+2,w
  1271  06E2  00BA               	movwf	??___fttol+2
  1272  06E3  3017               	movlw	23
  1273  06E4                     u765:	
  1274  06E4  36BA               	lsrf	??___fttol+2,f
  1275  06E5  0CB9               	rrf	??___fttol+1,f
  1276  06E6  0CB8               	rrf	??___fttol,f
  1277  06E7  0B89               	decfsz	9,f
  1278  06E8  2EE4               	goto	u765
  1279  06E9  0838               	movf	??___fttol,w
  1280  06EA  00BB               	movwf	??___fttol+3
  1281  06EB  083B               	movf	??___fttol+3,w
  1282  06EC  00BC               	movwf	___fttol@sign1
  1283  06ED  17B5               	bsf	___fttol@f1+1,7
  1284  06EE  30FF               	movlw	255
  1285  06EF  05B4               	andwf	___fttol@f1,f
  1286  06F0  30FF               	movlw	255
  1287  06F1  05B5               	andwf	___fttol@f1+1,f
  1288  06F2  3000               	movlw	0
  1289  06F3  05B6               	andwf	___fttol@f1+2,f
  1290  06F4  0834               	movf	___fttol@f1,w
  1291  06F5  00BD               	movwf	___fttol@lval
  1292  06F6  0835               	movf	___fttol@f1+1,w
  1293  06F7  00BE               	movwf	___fttol@lval+1
  1294  06F8  0836               	movf	___fttol@f1+2,w
  1295  06F9  00BF               	movwf	___fttol@lval+2
  1296  06FA  01C0               	clrf	___fttol@lval+3
  1297  06FB  308E               	movlw	142
  1298  06FC  02C1               	subwf	___fttol@exp1,f
  1299  06FD  1FC1               	btfss	___fttol@exp1,7
  1300  06FE  2F1B               	goto	l988
  1301  06FF  0841               	movf	___fttol@exp1,w
  1302  0700  3A80               	xorlw	128
  1303  0701  3E8F               	addlw	143
  1304  0702  1803               	skipnc
  1305  0703  2F0D               	goto	l986
  1306  0704  3000               	movlw	0
  1307  0705  00B7               	movwf	?___fttol+3
  1308  0706  3000               	movlw	0
  1309  0707  00B6               	movwf	?___fttol+2
  1310  0708  3000               	movlw	0
  1311  0709  00B5               	movwf	?___fttol+1
  1312  070A  3000               	movlw	0
  1313  070B  00B4               	movwf	?___fttol
  1314  070C  0008               	return
  1315  070D                     l986:	
  1316  070D  3001               	movlw	1
  1317  070E                     u795:	
  1318  070E  36C0               	lsrf	___fttol@lval+3,f
  1319  070F  0CBF               	rrf	___fttol@lval+2,f
  1320  0710  0CBE               	rrf	___fttol@lval+1,f
  1321  0711  0CBD               	rrf	___fttol@lval,f
  1322  0712  0B89               	decfsz	9,f
  1323  0713  2F0E               	goto	u795
  1324  0714  3001               	movlw	1
  1325  0715  00B8               	movwf	??___fttol
  1326  0716  0838               	movf	??___fttol,w
  1327  0717  07C1               	addwf	___fttol@exp1,f
  1328  0718  1903               	btfsc	3,2
  1329  0719  2F34               	goto	l996
  1330  071A  2F0D               	goto	l986
  1331  071B                     l988:	
  1332  071B  3018               	movlw	24
  1333  071C  0241               	subwf	___fttol@exp1,w
  1334  071D  1C03               	skipc
  1335  071E  2F31               	goto	l334
  1336  071F  3000               	movlw	0
  1337  0720  00B7               	movwf	?___fttol+3
  1338  0721  3000               	movlw	0
  1339  0722  00B6               	movwf	?___fttol+2
  1340  0723  3000               	movlw	0
  1341  0724  00B5               	movwf	?___fttol+1
  1342  0725  3000               	movlw	0
  1343  0726  00B4               	movwf	?___fttol
  1344  0727  0008               	return
  1345  0728                     l994:	
  1346  0728  3001               	movlw	1
  1347  0729                     u825:	
  1348  0729  35BD               	lslf	___fttol@lval,f
  1349  072A  0DBE               	rlf	___fttol@lval+1,f
  1350  072B  0DBF               	rlf	___fttol@lval+2,f
  1351  072C  0DC0               	rlf	___fttol@lval+3,f
  1352  072D  0B89               	decfsz	9,f
  1353  072E  2F29               	goto	u825
  1354  072F  3001               	movlw	1
  1355  0730  02C1               	subwf	___fttol@exp1,f
  1356  0731                     l334:	
  1357  0731  0841               	movf	___fttol@exp1,w
  1358  0732  1D03               	btfss	3,2
  1359  0733  2F28               	goto	l994
  1360  0734                     l996:	
  1361  0734  083C               	movf	___fttol@sign1,w
  1362  0735  1903               	btfsc	3,2
  1363  0736  2F42               	goto	l1000
  1364  0737  09BD               	comf	___fttol@lval,f
  1365  0738  09BE               	comf	___fttol@lval+1,f
  1366  0739  09BF               	comf	___fttol@lval+2,f
  1367  073A  09C0               	comf	___fttol@lval+3,f
  1368  073B  0ABD               	incf	___fttol@lval,f
  1369  073C  1903               	skipnz
  1370  073D  0ABE               	incf	___fttol@lval+1,f
  1371  073E  1903               	skipnz
  1372  073F  0ABF               	incf	___fttol@lval+2,f
  1373  0740  1903               	skipnz
  1374  0741  0AC0               	incf	___fttol@lval+3,f
  1375  0742                     l1000:	
  1376  0742  0840               	movf	___fttol@lval+3,w
  1377  0743  00B7               	movwf	?___fttol+3
  1378  0744  083F               	movf	___fttol@lval+2,w
  1379  0745  00B6               	movwf	?___fttol+2
  1380  0746  083E               	movf	___fttol@lval+1,w
  1381  0747  00B5               	movwf	?___fttol+1
  1382  0748  083D               	movf	___fttol@lval,w
  1383  0749  00B4               	movwf	?___fttol
  1384  074A  0008               	return
  1385  074B                     __end_of___fttol:	
  1386                           
  1387                           	psect	text7
  1388  074B                     __ptext7:	
  1389 ;; *************** function ___ftmul *****************
  1390 ;; Defined at:
  1391 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;  f1              3    4[BANK0 ] float 
  1394 ;;  f2              3    7[BANK0 ] float 
  1395 ;; Auto vars:     Size  Location     Type
  1396 ;;  f3_as_produc    3   15[BANK0 ] unsigned um
  1397 ;;  sign            1   19[BANK0 ] unsigned char 
  1398 ;;  cntr            1   18[BANK0 ] unsigned char 
  1399 ;;  exp             1   14[BANK0 ] unsigned char 
  1400 ;; Return value:  Size  Location     Type
  1401 ;;                  3    4[BANK0 ] float 
  1402 ;; Registers used:
  1403 ;;		wreg, status,2, status,0, pclath, cstack
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMMON   BANK0   BANK1
  1409 ;;      Params:         0       6       0
  1410 ;;      Locals:         0       6       0
  1411 ;;      Temps:          0       4       0
  1412 ;;      Totals:         0      16       0
  1413 ;;Total ram usage:       16 bytes
  1414 ;; Hardware stack levels used:    1
  1415 ;; Hardware stack levels required when called:    1
  1416 ;; This function calls:
  1417 ;;		___ftpack
  1418 ;; This function is called by:
  1419 ;;		_main
  1420 ;; This function uses a non-reentrant model
  1421 ;;
  1422                           
  1423                           
  1424                           ;psect for function ___ftmul
  1425  074B                     ___ftmul:	
  1426                           
  1427                           ;incstack = 0
  1428                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  1429  074B  0020               	movlb	0	; select bank0
  1430  074C  0824               	movf	___ftmul@f1,w
  1431  074D  00AA               	movwf	??___ftmul
  1432  074E  0825               	movf	___ftmul@f1+1,w
  1433  074F  00AB               	movwf	??___ftmul+1
  1434  0750  0826               	movf	___ftmul@f1+2,w
  1435  0751  00AC               	movwf	??___ftmul+2
  1436  0752  1003               	clrc
  1437  0753  0D2B               	rlf	??___ftmul+1,w
  1438  0754  0D2C               	rlf	??___ftmul+2,w
  1439  0755  00AD               	movwf	??___ftmul+3
  1440  0756  082D               	movf	??___ftmul+3,w
  1441  0757  00AE               	movwf	___ftmul@exp
  1442  0758  082E               	movf	___ftmul@exp,w
  1443  0759  1D03               	btfss	3,2
  1444  075A  2F62               	goto	l918
  1445  075B  3000               	movlw	0
  1446  075C  00A4               	movwf	?___ftmul
  1447  075D  3000               	movlw	0
  1448  075E  00A5               	movwf	?___ftmul+1
  1449  075F  3000               	movlw	0
  1450  0760  00A6               	movwf	?___ftmul+2
  1451  0761  0008               	return
  1452  0762                     l918:	
  1453  0762  0827               	movf	___ftmul@f2,w
  1454  0763  00AA               	movwf	??___ftmul
  1455  0764  0828               	movf	___ftmul@f2+1,w
  1456  0765  00AB               	movwf	??___ftmul+1
  1457  0766  0829               	movf	___ftmul@f2+2,w
  1458  0767  00AC               	movwf	??___ftmul+2
  1459  0768  1003               	clrc
  1460  0769  0D2B               	rlf	??___ftmul+1,w
  1461  076A  0D2C               	rlf	??___ftmul+2,w
  1462  076B  00AD               	movwf	??___ftmul+3
  1463  076C  082D               	movf	??___ftmul+3,w
  1464  076D  00B3               	movwf	___ftmul@sign
  1465  076E  0833               	movf	___ftmul@sign,w
  1466  076F  1D03               	btfss	3,2
  1467  0770  2F78               	goto	l924
  1468  0771  3000               	movlw	0
  1469  0772  00A4               	movwf	?___ftmul
  1470  0773  3000               	movlw	0
  1471  0774  00A5               	movwf	?___ftmul+1
  1472  0775  3000               	movlw	0
  1473  0776  00A6               	movwf	?___ftmul+2
  1474  0777  0008               	return
  1475  0778                     l924:	
  1476  0778  0833               	movf	___ftmul@sign,w
  1477  0779  3E7B               	addlw	123
  1478  077A  00AA               	movwf	??___ftmul
  1479  077B  082A               	movf	??___ftmul,w
  1480  077C  07AE               	addwf	___ftmul@exp,f
  1481  077D  0824               	movf	___ftmul@f1,w
  1482  077E  00AA               	movwf	??___ftmul
  1483  077F  0825               	movf	___ftmul@f1+1,w
  1484  0780  00AB               	movwf	??___ftmul+1
  1485  0781  0826               	movf	___ftmul@f1+2,w
  1486  0782  00AC               	movwf	??___ftmul+2
  1487  0783  3010               	movlw	16
  1488  0784                     u655:	
  1489  0784  36AC               	lsrf	??___ftmul+2,f
  1490  0785  0CAB               	rrf	??___ftmul+1,f
  1491  0786  0CAA               	rrf	??___ftmul,f
  1492  0787  0B89               	decfsz	9,f
  1493  0788  2F84               	goto	u655
  1494  0789  082A               	movf	??___ftmul,w
  1495  078A  00AD               	movwf	??___ftmul+3
  1496  078B  082D               	movf	??___ftmul+3,w
  1497  078C  00B3               	movwf	___ftmul@sign
  1498  078D  0827               	movf	___ftmul@f2,w
  1499  078E  00AA               	movwf	??___ftmul
  1500  078F  0828               	movf	___ftmul@f2+1,w
  1501  0790  00AB               	movwf	??___ftmul+1
  1502  0791  0829               	movf	___ftmul@f2+2,w
  1503  0792  00AC               	movwf	??___ftmul+2
  1504  0793  3010               	movlw	16
  1505  0794                     u665:	
  1506  0794  36AC               	lsrf	??___ftmul+2,f
  1507  0795  0CAB               	rrf	??___ftmul+1,f
  1508  0796  0CAA               	rrf	??___ftmul,f
  1509  0797  0B89               	decfsz	9,f
  1510  0798  2F94               	goto	u665
  1511  0799  082A               	movf	??___ftmul,w
  1512  079A  00AD               	movwf	??___ftmul+3
  1513  079B  082D               	movf	??___ftmul+3,w
  1514  079C  06B3               	xorwf	___ftmul@sign,f
  1515  079D  3080               	movlw	128
  1516  079E  00AA               	movwf	??___ftmul
  1517  079F  082A               	movf	??___ftmul,w
  1518  07A0  05B3               	andwf	___ftmul@sign,f
  1519  07A1  17A5               	bsf	___ftmul@f1+1,7
  1520  07A2  17A8               	bsf	___ftmul@f2+1,7
  1521  07A3  30FF               	movlw	255
  1522  07A4  05A7               	andwf	___ftmul@f2,f
  1523  07A5  30FF               	movlw	255
  1524  07A6  05A8               	andwf	___ftmul@f2+1,f
  1525  07A7  3000               	movlw	0
  1526  07A8  05A9               	andwf	___ftmul@f2+2,f
  1527  07A9  3000               	movlw	0
  1528  07AA  00AF               	movwf	___ftmul@f3_as_product
  1529  07AB  3000               	movlw	0
  1530  07AC  00B0               	movwf	___ftmul@f3_as_product+1
  1531  07AD  3000               	movlw	0
  1532  07AE  00B1               	movwf	___ftmul@f3_as_product+2
  1533  07AF  3007               	movlw	7
  1534  07B0  00AA               	movwf	??___ftmul
  1535  07B1  082A               	movf	??___ftmul,w
  1536  07B2  00B2               	movwf	___ftmul@cntr
  1537  07B3                     l936:	
  1538  07B3  1C24               	btfss	___ftmul@f1,0
  1539  07B4  2FBB               	goto	l940
  1540  07B5  0827               	movf	___ftmul@f2,w
  1541  07B6  07AF               	addwf	___ftmul@f3_as_product,f
  1542  07B7  0828               	movf	___ftmul@f2+1,w
  1543  07B8  3DB0               	addwfc	___ftmul@f3_as_product+1,f
  1544  07B9  0829               	movf	___ftmul@f2+2,w
  1545  07BA  3DB1               	addwfc	___ftmul@f3_as_product+2,f
  1546  07BB                     l940:	
  1547  07BB  3001               	movlw	1
  1548  07BC                     u685:	
  1549  07BC  36A6               	lsrf	___ftmul@f1+2,f
  1550  07BD  0CA5               	rrf	___ftmul@f1+1,f
  1551  07BE  0CA4               	rrf	___ftmul@f1,f
  1552  07BF  0B89               	decfsz	9,f
  1553  07C0  2FBC               	goto	u685
  1554  07C1  3001               	movlw	1
  1555  07C2                     u695:	
  1556  07C2  35A7               	lslf	___ftmul@f2,f
  1557  07C3  0DA8               	rlf	___ftmul@f2+1,f
  1558  07C4  0DA9               	rlf	___ftmul@f2+2,f
  1559  07C5  0B89               	decfsz	9,f
  1560  07C6  2FC2               	goto	u695
  1561  07C7  3001               	movlw	1
  1562  07C8  02B2               	subwf	___ftmul@cntr,f
  1563  07C9  1D03               	btfss	3,2
  1564  07CA  2FB3               	goto	l936
  1565  07CB  3009               	movlw	9
  1566  07CC  00AA               	movwf	??___ftmul
  1567  07CD  082A               	movf	??___ftmul,w
  1568  07CE  00B2               	movwf	___ftmul@cntr
  1569  07CF                     l948:	
  1570  07CF  1C24               	btfss	___ftmul@f1,0
  1571  07D0  2FD7               	goto	l952
  1572  07D1  0827               	movf	___ftmul@f2,w
  1573  07D2  07AF               	addwf	___ftmul@f3_as_product,f
  1574  07D3  0828               	movf	___ftmul@f2+1,w
  1575  07D4  3DB0               	addwfc	___ftmul@f3_as_product+1,f
  1576  07D5  0829               	movf	___ftmul@f2+2,w
  1577  07D6  3DB1               	addwfc	___ftmul@f3_as_product+2,f
  1578  07D7                     l952:	
  1579  07D7  3001               	movlw	1
  1580  07D8                     u725:	
  1581  07D8  36A6               	lsrf	___ftmul@f1+2,f
  1582  07D9  0CA5               	rrf	___ftmul@f1+1,f
  1583  07DA  0CA4               	rrf	___ftmul@f1,f
  1584  07DB  0B89               	decfsz	9,f
  1585  07DC  2FD8               	goto	u725
  1586  07DD  3001               	movlw	1
  1587  07DE                     u735:	
  1588  07DE  36B1               	lsrf	___ftmul@f3_as_product+2,f
  1589  07DF  0CB0               	rrf	___ftmul@f3_as_product+1,f
  1590  07E0  0CAF               	rrf	___ftmul@f3_as_product,f
  1591  07E1  0B89               	decfsz	9,f
  1592  07E2  2FDE               	goto	u735
  1593  07E3  3001               	movlw	1
  1594  07E4  02B2               	subwf	___ftmul@cntr,f
  1595  07E5  1D03               	btfss	3,2
  1596  07E6  2FCF               	goto	l948
  1597  07E7  082F               	movf	___ftmul@f3_as_product,w
  1598  07E8  00F0               	movwf	___ftpack@arg
  1599  07E9  0830               	movf	___ftmul@f3_as_product+1,w
  1600  07EA  00F1               	movwf	___ftpack@arg+1
  1601  07EB  0831               	movf	___ftmul@f3_as_product+2,w
  1602  07EC  00F2               	movwf	___ftpack@arg+2
  1603  07ED  082E               	movf	___ftmul@exp,w
  1604  07EE  00AA               	movwf	??___ftmul
  1605  07EF  082A               	movf	??___ftmul,w
  1606  07F0  00F3               	movwf	___ftpack@exp
  1607  07F1  0833               	movf	___ftmul@sign,w
  1608  07F2  00AB               	movwf	??___ftmul+1
  1609  07F3  082B               	movf	??___ftmul+1,w
  1610  07F4  00F4               	movwf	___ftpack@sign
  1611  07F5  2566               	fcall	___ftpack
  1612  07F6  0870               	movf	?___ftpack,w
  1613  07F7  0020               	movlb	0	; select bank0
  1614  07F8  00A4               	movwf	?___ftmul
  1615  07F9  0871               	movf	?___ftpack+1,w
  1616  07FA  00A5               	movwf	?___ftmul+1
  1617  07FB  0872               	movf	?___ftpack+2,w
  1618  07FC  00A6               	movwf	?___ftmul+2
  1619  07FD  0008               	return
  1620  07FE                     __end_of___ftmul:	
  1621                           
  1622                           	psect	text8
  1623  0566                     __ptext8:	
  1624 ;; *************** function ___ftpack *****************
  1625 ;; Defined at:
  1626 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  1627 ;; Parameters:    Size  Location     Type
  1628 ;;  arg             3    0[COMMON] unsigned um
  1629 ;;  exp             1    3[COMMON] unsigned char 
  1630 ;;  sign            1    4[COMMON] unsigned char 
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;		None
  1633 ;; Return value:  Size  Location     Type
  1634 ;;                  3    0[COMMON] float 
  1635 ;; Registers used:
  1636 ;;		wreg, status,2, status,0
  1637 ;; Tracked objects:
  1638 ;;		On entry : 0/0
  1639 ;;		On exit  : 0/0
  1640 ;;		Unchanged: 0/0
  1641 ;; Data sizes:     COMMON   BANK0   BANK1
  1642 ;;      Params:         5       0       0
  1643 ;;      Locals:         0       0       0
  1644 ;;      Temps:          3       0       0
  1645 ;;      Totals:         8       0       0
  1646 ;;Total ram usage:        8 bytes
  1647 ;; Hardware stack levels used:    1
  1648 ;; This function calls:
  1649 ;;		Nothing
  1650 ;; This function is called by:
  1651 ;;		___ftmul
  1652 ;;		___lbtoft
  1653 ;; This function uses a non-reentrant model
  1654 ;;
  1655                           
  1656                           
  1657                           ;psect for function ___ftpack
  1658  0566                     ___ftpack:	
  1659                           
  1660                           ;incstack = 0
  1661                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1662  0566  0873               	movf	___ftpack@exp,w
  1663  0567  1903               	btfsc	3,2
  1664  0568  2D6E               	goto	l770
  1665  0569  0872               	movf	___ftpack@arg+2,w
  1666  056A  0471               	iorwf	___ftpack@arg+1,w
  1667  056B  0470               	iorwf	___ftpack@arg,w
  1668  056C  1D03               	skipz
  1669  056D  2D7F               	goto	l776
  1670  056E                     l770:	
  1671  056E  3000               	movlw	0
  1672  056F  00F0               	movwf	?___ftpack
  1673  0570  3000               	movlw	0
  1674  0571  00F1               	movwf	?___ftpack+1
  1675  0572  3000               	movlw	0
  1676  0573  00F2               	movwf	?___ftpack+2
  1677  0574  0008               	return
  1678  0575                     l774:	
  1679  0575  3001               	movlw	1
  1680  0576  00F5               	movwf	??___ftpack
  1681  0577  0875               	movf	??___ftpack,w
  1682  0578  07F3               	addwf	___ftpack@exp,f
  1683  0579  3001               	movlw	1
  1684  057A                     u485:	
  1685  057A  36F2               	lsrf	___ftpack@arg+2,f
  1686  057B  0CF1               	rrf	___ftpack@arg+1,f
  1687  057C  0CF0               	rrf	___ftpack@arg,f
  1688  057D  0B89               	decfsz	9,f
  1689  057E  2D7A               	goto	u485
  1690  057F                     l776:	
  1691  057F  30FE               	movlw	254
  1692  0580  0572               	andwf	___ftpack@arg+2,w
  1693  0581  1903               	btfsc	3,2
  1694  0582  2D98               	goto	l243
  1695  0583  2D75               	goto	l774
  1696  0584                     l778:	
  1697  0584  3001               	movlw	1
  1698  0585  00F5               	movwf	??___ftpack
  1699  0586  0875               	movf	??___ftpack,w
  1700  0587  07F3               	addwf	___ftpack@exp,f
  1701  0588  3001               	movlw	1
  1702  0589  07F0               	addwf	___ftpack@arg,f
  1703  058A  3000               	movlw	0
  1704  058B  1803               	skipnc
  1705  058C  3001               	movlw	1
  1706  058D  07F1               	addwf	___ftpack@arg+1,f
  1707  058E  3000               	movlw	0
  1708  058F  1803               	skipnc
  1709  0590  3001               	movlw	1
  1710  0591  07F2               	addwf	___ftpack@arg+2,f
  1711  0592  3001               	movlw	1
  1712  0593                     u505:	
  1713  0593  36F2               	lsrf	___ftpack@arg+2,f
  1714  0594  0CF1               	rrf	___ftpack@arg+1,f
  1715  0595  0CF0               	rrf	___ftpack@arg,f
  1716  0596  0B89               	decfsz	9,f
  1717  0597  2D93               	goto	u505
  1718  0598                     l243:	
  1719  0598  30FF               	movlw	255
  1720  0599  0572               	andwf	___ftpack@arg+2,w
  1721  059A  1903               	btfsc	3,2
  1722  059B  2DA5               	goto	l786
  1723  059C  2D84               	goto	l778
  1724  059D                     l784:	
  1725  059D  3001               	movlw	1
  1726  059E  02F3               	subwf	___ftpack@exp,f
  1727  059F  3001               	movlw	1
  1728  05A0                     u525:	
  1729  05A0  35F0               	lslf	___ftpack@arg,f
  1730  05A1  0DF1               	rlf	___ftpack@arg+1,f
  1731  05A2  0DF2               	rlf	___ftpack@arg+2,f
  1732  05A3  0B89               	decfsz	9,f
  1733  05A4  2DA0               	goto	u525
  1734  05A5                     l786:	
  1735  05A5  1BF1               	btfsc	___ftpack@arg+1,7
  1736  05A6  2DAB               	goto	l250
  1737  05A7  3002               	movlw	2
  1738  05A8  0273               	subwf	___ftpack@exp,w
  1739  05A9  1803               	skipnc
  1740  05AA  2D9D               	goto	l784
  1741  05AB                     l250:	
  1742  05AB  1873               	btfsc	___ftpack@exp,0
  1743  05AC  2DB3               	goto	l251
  1744  05AD  30FF               	movlw	255
  1745  05AE  05F0               	andwf	___ftpack@arg,f
  1746  05AF  307F               	movlw	127
  1747  05B0  05F1               	andwf	___ftpack@arg+1,f
  1748  05B1  30FF               	movlw	255
  1749  05B2  05F2               	andwf	___ftpack@arg+2,f
  1750  05B3                     l251:	
  1751  05B3  1003               	clrc
  1752  05B4  0CF3               	rrf	___ftpack@exp,f
  1753  05B5  0873               	movf	___ftpack@exp,w
  1754  05B6  00F5               	movwf	??___ftpack
  1755  05B7  01F6               	clrf	??___ftpack+1
  1756  05B8  01F7               	clrf	??___ftpack+2
  1757  05B9  3010               	movlw	16
  1758  05BA                     u565:	
  1759  05BA  35F5               	lslf	??___ftpack,f
  1760  05BB  0DF6               	rlf	??___ftpack+1,f
  1761  05BC  0DF7               	rlf	??___ftpack+2,f
  1762  05BD  0B89               	decfsz	9,f
  1763  05BE  2DBA               	goto	u565
  1764  05BF  0875               	movf	??___ftpack,w
  1765  05C0  04F0               	iorwf	___ftpack@arg,f
  1766  05C1  0876               	movf	??___ftpack+1,w
  1767  05C2  04F1               	iorwf	___ftpack@arg+1,f
  1768  05C3  0877               	movf	??___ftpack+2,w
  1769  05C4  04F2               	iorwf	___ftpack@arg+2,f
  1770  05C5  0874               	movf	___ftpack@sign,w
  1771  05C6  1903               	btfsc	3,2
  1772  05C7  0008               	return
  1773  05C8  17F2               	bsf	___ftpack@arg+2,7
  1774  05C9  0008               	return
  1775  05CA                     __end_of___ftpack:	
  1776                           
  1777                           	psect	text9
  1778  04EF                     __ptext9:	
  1779 ;; *************** function _SPI_init *****************
  1780 ;; Defined at:
  1781 ;;		line 215 in file "transmitter.c"
  1782 ;; Parameters:    Size  Location     Type
  1783 ;;		None
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;		None
  1786 ;; Return value:  Size  Location     Type
  1787 ;;                  1    wreg      void 
  1788 ;; Registers used:
  1789 ;;		wreg, status,2, status,0, pclath, cstack
  1790 ;; Tracked objects:
  1791 ;;		On entry : 0/0
  1792 ;;		On exit  : 0/0
  1793 ;;		Unchanged: 0/0
  1794 ;; Data sizes:     COMMON   BANK0   BANK1
  1795 ;;      Params:         0       0       0
  1796 ;;      Locals:         0       0       0
  1797 ;;      Temps:          0       0       0
  1798 ;;      Totals:         0       0       0
  1799 ;;Total ram usage:        0 bytes
  1800 ;; Hardware stack levels used:    1
  1801 ;; Hardware stack levels required when called:    1
  1802 ;; This function calls:
  1803 ;;		_configIOTransmitter
  1804 ;; This function is called by:
  1805 ;;		_main
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           
  1810                           ;psect for function _SPI_init
  1811  04EF                     _SPI_init:	
  1812                           
  1813                           ;transmitter.c: 216: SSP1CON1bits.SSPEN = 0;
  1814                           
  1815                           ;incstack = 0
  1816                           ; Regs used in _SPI_init: [wreg+status,2+status,0+pclath+cstack]
  1817  04EF  0024               	movlb	4	; select bank4
  1818  04F0  1295               	bcf	21,5	;volatile
  1819                           
  1820                           ;transmitter.c: 217: configIOTransmitter();
  1821  04F1  24E5               	fcall	_configIOTransmitter
  1822                           
  1823                           ;transmitter.c: 218: SSP1CON1bits.CKP = 0;
  1824  04F2  0024               	movlb	4	; select bank4
  1825  04F3  1215               	bcf	21,4	;volatile
  1826                           
  1827                           ;transmitter.c: 219: SSP1STATbits.CKE = 1;
  1828  04F4  1714               	bsf	20,6	;volatile
  1829                           
  1830                           ;transmitter.c: 220: SSP1STATbits.SMP = 1;
  1831  04F5  1794               	bsf	20,7	;volatile
  1832                           
  1833                           ;transmitter.c: 221: SSP1CON1bits.SSPM = 0;
  1834  04F6  30F0               	movlw	-16
  1835  04F7  0595               	andwf	21,f	;volatile
  1836                           
  1837                           ;transmitter.c: 222: SSP1CON1bits.SSPEN = 1;
  1838  04F8  1695               	bsf	21,5	;volatile
  1839  04F9  0008               	return
  1840  04FA                     __end_of_SPI_init:	
  1841                           
  1842                           	psect	text10
  1843  04E5                     __ptext10:	
  1844 ;; *************** function _configIOTransmitter *****************
  1845 ;; Defined at:
  1846 ;;		line 86 in file "transmitter.c"
  1847 ;; Parameters:    Size  Location     Type
  1848 ;;		None
  1849 ;; Auto vars:     Size  Location     Type
  1850 ;;		None
  1851 ;; Return value:  Size  Location     Type
  1852 ;;                  1    wreg      void 
  1853 ;; Registers used:
  1854 ;;		wreg
  1855 ;; Tracked objects:
  1856 ;;		On entry : 0/0
  1857 ;;		On exit  : 0/0
  1858 ;;		Unchanged: 0/0
  1859 ;; Data sizes:     COMMON   BANK0   BANK1
  1860 ;;      Params:         0       0       0
  1861 ;;      Locals:         0       0       0
  1862 ;;      Temps:          0       0       0
  1863 ;;      Totals:         0       0       0
  1864 ;;Total ram usage:        0 bytes
  1865 ;; Hardware stack levels used:    1
  1866 ;; This function calls:
  1867 ;;		Nothing
  1868 ;; This function is called by:
  1869 ;;		_SPI_init
  1870 ;; This function uses a non-reentrant model
  1871 ;;
  1872                           
  1873                           
  1874                           ;psect for function _configIOTransmitter
  1875  04E5                     _configIOTransmitter:	
  1876                           
  1877                           ;transmitter.c: 87: TRISA = 0b11101110;
  1878                           
  1879                           ;incstack = 0
  1880                           ; Regs used in _configIOTransmitter: [wreg]
  1881  04E5  30EE               	movlw	238
  1882  04E6  0021               	movlb	1	; select bank1
  1883  04E7  008C               	movwf	12	;volatile
  1884                           
  1885                           ;transmitter.c: 88: TRISC = 0b11100010;
  1886  04E8  30E2               	movlw	226
  1887  04E9  008E               	movwf	14	;volatile
  1888                           
  1889                           ;transmitter.c: 89: OPTION_REGbits.nWPUEN = 0;
  1890  04EA  1395               	bcf	21,7	;volatile
  1891                           
  1892                           ;transmitter.c: 90: WPUAbits.WPUA5 = 1;
  1893  04EB  0024               	movlb	4	; select bank4
  1894  04EC  168C               	bsf	12,5	;volatile
  1895                           
  1896                           ;transmitter.c: 91: WPUAbits.WPUA1 = 1;
  1897  04ED  148C               	bsf	12,1	;volatile
  1898  04EE  0008               	return
  1899  04EF                     __end_of_configIOTransmitter:	
  1900  007E                     btemp	set	126	;btemp
  1901  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    8
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     41      41
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___lbtoft
    _transmitData->_writeSPI
    _configureTX->_writeSPI
    ___lbtoft->___ftpack
    ___fttol->___lbtoft
    ___ftmul->___lbtoft

Critical Paths under _main in BANK0

    _main->___fttol
    ___fttol->___ftmul
    ___ftmul->___lbtoft

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    3866
                                             34 BANK0      7     7      0
                           _SPI_init
                            ___ftmul
                            ___fttol
                           ___lbtoft
                              _blink
                        _configureTX
                       _transmitData
                           _writeSPI
 ---------------------------------------------------------------------------------
 (1) _transmitData                                         3     3      0     114
                                              3 COMMON     3     3      0
                           _writeSPI
 ---------------------------------------------------------------------------------
 (1) _configureTX                                          3     3      0     159
                                              3 COMMON     3     3      0
                           _writeSPI
 ---------------------------------------------------------------------------------
 (1) _writeSPI                                             3     3      0      45
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _blink                                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___lbtoft                                             8     5      3    1321
                                              8 COMMON     4     1      3
                                              0 BANK0      4     4      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             14    10      4     338
                                             20 BANK0     14    10      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             16    10      6    1797
                                              4 BANK0     16    10      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1299
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             0     0      0       0
                _configIOTransmitter
 ---------------------------------------------------------------------------------
 (2) _configIOTransmitter                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init
     _configIOTransmitter
   ___ftmul
     ___ftpack
     ___lbtoft (ARG)
       ___ftpack
   ___fttol
     ___ftmul (ARG)
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___lbtoft (ARG)
       ___ftpack
   ___lbtoft
     ___ftpack
   _blink
   _configureTX
     _writeSPI
   _transmitData
     _writeSPI
   _writeSPI

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     29      29       6       51.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0       0       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun May 14 23:00:43 2017

                ?_configureTX 0070                   __CFG_CP$OFF 0000                            l60 061D  
                          l62 063D                            l66 04FE                    _WRITE_MASK 04E3  
                         l250 05AB                           l251 05B3                           l243 0598  
                         l334 0731                           l770 056E                           l940 07BB  
                         l924 0778                           l774 0575                           l918 0762  
                         l870 062C                           l784 059D                           l776 057F  
                         l952 07D7                           l936 07B3                           l856 0613  
                         l786 05A5                           l778 0584                           l948 07CF  
                         l968 06DD                           l994 0728                           l986 070D  
                         l996 0734                           l988 071B                           u505 0593  
                         u525 05A0                           u565 05BA                           u485 057A  
                         u725 07D8                           u735 07DE                           u655 0784  
                         u665 0794                           u825 0729                           u907 050E  
                         u860 06B3                           u685 07BC                           u765 06E4  
                         u917 0518                           u695 07C2                           u795 070E  
                         u897 0546                  __CFG_BORV$LO 0000                           wreg 0009  
                __CFG_LVP$OFF 0000                          l1000 0742                          l1016 0649  
                        l1042 06B5                          l1044 06B6                  _transmitData 0537  
                __CFG_WRT$OFF 0000                          _main 0640                  ___ftpack@arg 0070  
                ___ftpack@exp 0073                          fsr0h 0005                          indf0 0000  
                        fsr0l 0004                          btemp 007E                          start 0001  
             __end_of_TX_ADDR 04E2                 __CFG_MCLRE$ON 0000                  ___ftmul@cntr 0032  
                ___ftmul@sign 0033                  ___fttol@exp1 0041                  ___fttol@lval 003D  
                configureTX@i 0074                         ?_main 0070                 __CFG_WDTE$OFF 0000  
             __end_of___ftmul 07FE               __end_of___fttol 074B                         _TRISA 008C  
                       _TRISC 008E                         _blink 0509                 ___ftpack@sign 0074  
              __CFG_BOREN$OFF 0000              __end_of_SPI_init 04FA                         status 0003  
                       wtemp0 007E               __initialization 07FE                  __end_of_main 06C4  
              __CFG_LPBOR$OFF 0000                        ??_main 0042                 ___fttol@sign1 003C  
           __end_of_READ_MASK 04E3                        ?_blink 0070              __end_of___ftpack 05CA  
            __end_of___lbtoft 0537                __CFG_PWRTE$OFF 0000          __end_of_W_TX_PAYLOAD 04E5  
              __CFG_STVREN$ON 0000                     ??___ftmul 002A                     ??___fttol 0038  
        __size_of_configureTX 0076         ___ftmul@f3_as_product 002F              __end_of_writeSPI 0509  
     __end_of__initialization 07FE                    ___lbtoft@c 007B                    ___ftmul@f1 0024  
                  ___ftmul@f2 0027                    ___fttol@f1 0034                __pcstackCOMMON 0070  
               __end_of_blink 051E                     ?_SPI_init 0070                _OPTION_REGbits 0095  
                     ??_blink 0070              configureTX@i_263 0075                    __pmaintext 0640  
__size_of_configIOTransmitter 000A                     ?___ftpack 0070                     ?___lbtoft 0078  
                  ??_SPI_init 0070                       _SSP1BUF 0211                       _TX_ADDR 04DD  
                     ___ftmul 074B                       ___fttol 06C4                    ??___ftpack 0075  
                  ??___lbtoft 0020                     ?_writeSPI 0070                       __ptext1 0537  
                     __ptext2 05CA                       __ptext3 04FA                       __ptext4 0509  
                     __ptext5 051E                       __ptext6 06C4                       __ptext7 074B  
                     __ptext8 0566                       __ptext9 04EF                  _W_TX_PAYLOAD 04E4  
        end_of_initialization 07FE                  writeSPI@data 0071                     _READ_MASK 04E2  
          __end_of_WRITE_MASK 04E4                  __pstringtext 04DD                    ??_writeSPI 0070  
                   _PORTAbits 000C              __CFG_FOSC$INTOSC 0000                   ___ftmul@exp 002E  
               ??_configureTX 0073              transmitData@data 0074              transmitData@sreg 0075  
         start_initialization 07FE             __size_of_SPI_init 000B           _configIOTransmitter 04E5  
               ?_transmitData 0070          ?_configIOTransmitter 0070           __end_of_configureTX 0640  
           __size_of___ftpack 0064             __size_of___lbtoft 0019                     ___latbits 0000  
               __pcstackBANK0 0020                ??_transmitData 0073         ??_configIOTransmitter 0070  
                    ?___ftmul 0024                      ?___fttol 0034             __size_of_writeSPI 000F  
              __size_of_blink 0015                      _LATAbits 010C                      _LATCbits 010E  
                    _PIR1bits 0011                   _configureTX 05CA                      _SPI_init 04EF  
                    _WPUAbits 020C          __end_of_transmitData 0566              __size_of___ftmul 00B3  
            __size_of___fttol 0087                      ___ftpack 0566                      ___lbtoft 051E  
                    __ptext10 04E5                  _SSP1CON1bits 0215                 __size_of_main 0084  
                    main@data 0046                  _SSP1STATbits 0214                      main@last 0047  
                    main@sreg 0048                      _writeSPI 04FA             __CFG_CLKOUTEN$OFF 0000  
                   writeSPI@x 0072   __end_of_configIOTransmitter 04EF         __size_of_transmitData 002F  
