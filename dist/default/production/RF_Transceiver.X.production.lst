

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue May 16 23:37:52 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 1.41
    19                           ; Generated 25/01/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F1503 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000E                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  008C                     	;# 
    79  008E                     	;# 
    80  0091                     	;# 
    81  0092                     	;# 
    82  0093                     	;# 
    83  0095                     	;# 
    84  0096                     	;# 
    85  0097                     	;# 
    86  0099                     	;# 
    87  009A                     	;# 
    88  009B                     	;# 
    89  009B                     	;# 
    90  009C                     	;# 
    91  009D                     	;# 
    92  009E                     	;# 
    93  009F                     	;# 
    94  010C                     	;# 
    95  010E                     	;# 
    96  0111                     	;# 
    97  0112                     	;# 
    98  0113                     	;# 
    99  0114                     	;# 
   100  0115                     	;# 
   101  0116                     	;# 
   102  0117                     	;# 
   103  0118                     	;# 
   104  0119                     	;# 
   105  011D                     	;# 
   106  018C                     	;# 
   107  018E                     	;# 
   108  0191                     	;# 
   109  0191                     	;# 
   110  0192                     	;# 
   111  0193                     	;# 
   112  0193                     	;# 
   113  0194                     	;# 
   114  0195                     	;# 
   115  0196                     	;# 
   116  0197                     	;# 
   117  020C                     	;# 
   118  0211                     	;# 
   119  0211                     	;# 
   120  0212                     	;# 
   121  0212                     	;# 
   122  0213                     	;# 
   123  0213                     	;# 
   124  0214                     	;# 
   125  0214                     	;# 
   126  0215                     	;# 
   127  0215                     	;# 
   128  0215                     	;# 
   129  0216                     	;# 
   130  0216                     	;# 
   131  0217                     	;# 
   132  0217                     	;# 
   133  0391                     	;# 
   134  0392                     	;# 
   135  0393                     	;# 
   136  0498                     	;# 
   137  0498                     	;# 
   138  0499                     	;# 
   139  049A                     	;# 
   140  049B                     	;# 
   141  049B                     	;# 
   142  049C                     	;# 
   143  049D                     	;# 
   144  049E                     	;# 
   145  049F                     	;# 
   146  0611                     	;# 
   147  0612                     	;# 
   148  0613                     	;# 
   149  0613                     	;# 
   150  0614                     	;# 
   151  0615                     	;# 
   152  0616                     	;# 
   153  0616                     	;# 
   154  0617                     	;# 
   155  0618                     	;# 
   156  0619                     	;# 
   157  0619                     	;# 
   158  061A                     	;# 
   159  061B                     	;# 
   160  061C                     	;# 
   161  061C                     	;# 
   162  0691                     	;# 
   163  0692                     	;# 
   164  0693                     	;# 
   165  0694                     	;# 
   166  0695                     	;# 
   167  0F0F                     	;# 
   168  0F10                     	;# 
   169  0F11                     	;# 
   170  0F12                     	;# 
   171  0F13                     	;# 
   172  0F14                     	;# 
   173  0F15                     	;# 
   174  0F16                     	;# 
   175  0F17                     	;# 
   176  0F18                     	;# 
   177  0F19                     	;# 
   178  0F1A                     	;# 
   179  0F1B                     	;# 
   180  0F1C                     	;# 
   181  0F1D                     	;# 
   182  0F1E                     	;# 
   183  0F1F                     	;# 
   184  0FE3                     	;# 
   185  0FE4                     	;# 
   186  0FE5                     	;# 
   187  0FE6                     	;# 
   188  0FE7                     	;# 
   189  0FE8                     	;# 
   190  0FE9                     	;# 
   191  0FEA                     	;# 
   192  0FEB                     	;# 
   193  0FED                     	;# 
   194  0FEE                     	;# 
   195  0FEF                     	;# 
   196  0000                     	;# 
   197  0001                     	;# 
   198  0002                     	;# 
   199  0003                     	;# 
   200  0004                     	;# 
   201  0005                     	;# 
   202  0006                     	;# 
   203  0007                     	;# 
   204  0008                     	;# 
   205  0009                     	;# 
   206  000A                     	;# 
   207  000B                     	;# 
   208  000C                     	;# 
   209  000E                     	;# 
   210  0011                     	;# 
   211  0012                     	;# 
   212  0013                     	;# 
   213  0015                     	;# 
   214  0016                     	;# 
   215  0016                     	;# 
   216  0017                     	;# 
   217  0018                     	;# 
   218  0019                     	;# 
   219  001A                     	;# 
   220  001B                     	;# 
   221  001C                     	;# 
   222  008C                     	;# 
   223  008E                     	;# 
   224  0091                     	;# 
   225  0092                     	;# 
   226  0093                     	;# 
   227  0095                     	;# 
   228  0096                     	;# 
   229  0097                     	;# 
   230  0099                     	;# 
   231  009A                     	;# 
   232  009B                     	;# 
   233  009B                     	;# 
   234  009C                     	;# 
   235  009D                     	;# 
   236  009E                     	;# 
   237  009F                     	;# 
   238  010C                     	;# 
   239  010E                     	;# 
   240  0111                     	;# 
   241  0112                     	;# 
   242  0113                     	;# 
   243  0114                     	;# 
   244  0115                     	;# 
   245  0116                     	;# 
   246  0117                     	;# 
   247  0118                     	;# 
   248  0119                     	;# 
   249  011D                     	;# 
   250  018C                     	;# 
   251  018E                     	;# 
   252  0191                     	;# 
   253  0191                     	;# 
   254  0192                     	;# 
   255  0193                     	;# 
   256  0193                     	;# 
   257  0194                     	;# 
   258  0195                     	;# 
   259  0196                     	;# 
   260  0197                     	;# 
   261  020C                     	;# 
   262  0211                     	;# 
   263  0211                     	;# 
   264  0212                     	;# 
   265  0212                     	;# 
   266  0213                     	;# 
   267  0213                     	;# 
   268  0214                     	;# 
   269  0214                     	;# 
   270  0215                     	;# 
   271  0215                     	;# 
   272  0215                     	;# 
   273  0216                     	;# 
   274  0216                     	;# 
   275  0217                     	;# 
   276  0217                     	;# 
   277  0391                     	;# 
   278  0392                     	;# 
   279  0393                     	;# 
   280  0498                     	;# 
   281  0498                     	;# 
   282  0499                     	;# 
   283  049A                     	;# 
   284  049B                     	;# 
   285  049B                     	;# 
   286  049C                     	;# 
   287  049D                     	;# 
   288  049E                     	;# 
   289  049F                     	;# 
   290  0611                     	;# 
   291  0612                     	;# 
   292  0613                     	;# 
   293  0613                     	;# 
   294  0614                     	;# 
   295  0615                     	;# 
   296  0616                     	;# 
   297  0616                     	;# 
   298  0617                     	;# 
   299  0618                     	;# 
   300  0619                     	;# 
   301  0619                     	;# 
   302  061A                     	;# 
   303  061B                     	;# 
   304  061C                     	;# 
   305  061C                     	;# 
   306  0691                     	;# 
   307  0692                     	;# 
   308  0693                     	;# 
   309  0694                     	;# 
   310  0695                     	;# 
   311  0F0F                     	;# 
   312  0F10                     	;# 
   313  0F11                     	;# 
   314  0F12                     	;# 
   315  0F13                     	;# 
   316  0F14                     	;# 
   317  0F15                     	;# 
   318  0F16                     	;# 
   319  0F17                     	;# 
   320  0F18                     	;# 
   321  0F19                     	;# 
   322  0F1A                     	;# 
   323  0F1B                     	;# 
   324  0F1C                     	;# 
   325  0F1D                     	;# 
   326  0F1E                     	;# 
   327  0F1F                     	;# 
   328  0FE3                     	;# 
   329  0FE4                     	;# 
   330  0FE5                     	;# 
   331  0FE6                     	;# 
   332  0FE7                     	;# 
   333  0FE8                     	;# 
   334  0FE9                     	;# 
   335  0FEA                     	;# 
   336  0FEB                     	;# 
   337  0FED                     	;# 
   338  0FEE                     	;# 
   339  0FEF                     	;# 
   340                           
   341                           	psect	stringtext
   342  06D8                     __pstringtext:	
   343  06D8                     _RX_PW_P:	
   344  06D8  3411               	retlw	17
   345  06D9  3412               	retlw	18
   346  06DA  3413               	retlw	19
   347  06DB  3414               	retlw	20
   348  06DC  3415               	retlw	21
   349  06DD  3416               	retlw	22
   350  06DE                     __end_of_RX_PW_P:	
   351  06DE                     _RX_ADDR_P:	
   352  06DE  340A               	retlw	10
   353  06DF  340B               	retlw	11
   354  06E0  340C               	retlw	12
   355  06E1  340D               	retlw	13
   356  06E2  340E               	retlw	14
   357  06E3  340F               	retlw	15
   358  06E4                     __end_of_RX_ADDR_P:	
   359  06E4                     _TX_ADDR:	
   360  06E4  3410               	retlw	16
   361  06E5                     __end_of_TX_ADDR:	
   362  0011                     _PIR1bits	set	17
   363  000C                     _PORTAbits	set	12
   364  0095                     _OPTION_REGbits	set	149
   365  008C                     _TRISAbits	set	140
   366  008E                     _TRISCbits	set	142
   367  011D                     _APFCON	set	285
   368  010E                     _LATCbits	set	270
   369  010C                     _LATAbits	set	268
   370  018E                     _ANSELC	set	398
   371  018C                     _ANSELA	set	396
   372  0211                     _SSP1BUF	set	529
   373  0214                     _SSP1STATbits	set	532
   374  0215                     _SSP1CON1bits	set	533
   375  020C                     _WPUAbits	set	524
   376                           
   377                           ; #config settings
   378  0000                     
   379                           	psect	cinit
   380  07FE                     start_initialization:	
   381  07FE                     __initialization:	
   382  07FE                     end_of_initialization:	
   383                           ;End of C runtime variable initialization code
   384                           
   385  07FE                     __end_of__initialization:	
   386  07FE  0020               	movlb	0
   387  07FF  2F5C               	ljmp	_main	;jump to C main() function
   388                           
   389                           	psect	cstackCOMMON
   390  0070                     __pcstackCOMMON:	
   391  0070                     ?_SPI_init:	
   392  0070                     ??_SPI_init:	
   393                           ; 1 bytes @ 0x0
   394                           
   395  0070                     ?_configureTX:	
   396                           ; 1 bytes @ 0x0
   397                           
   398  0070                     ?_transmitData:	
   399                           ; 1 bytes @ 0x0
   400                           
   401  0070                     ?_SPI_read_byte:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  0070                     ?_bigBlink:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0070                     ??_bigBlink:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0070                     ?_configIO:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0070                     ??_configIO:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0070                     ?_SPI_write_byte:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0070                     ??_SPI_write_byte:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ?_main:	
   423                           ; 1 bytes @ 0x0
   424                           
   425                           
   426                           ; 2 bytes @ 0x0
   427  0070                     	ds	1
   428  0071                     bigBlink@i:	
   429  0071                     SPI_write_byte@data:	
   430                           ; 1 bytes @ 0x1
   431                           
   432                           
   433                           ; 1 bytes @ 0x1
   434  0071                     	ds	1
   435  0072                     bigBlink@i_126:	
   436  0072                     SPI_write_byte@ret_data:	
   437                           ; 1 bytes @ 0x2
   438                           
   439                           
   440                           ; 1 bytes @ 0x2
   441  0072                     	ds	1
   442  0073                     ??_SPI_read_byte:	
   443  0073                     ?_SPI_writeArray:	
   444                           ; 1 bytes @ 0x3
   445                           
   446  0073                     bigBlink@x:	
   447                           ; 1 bytes @ 0x3
   448                           
   449  0073                     SPI_writeArray@length:	
   450                           ; 1 bytes @ 0x3
   451                           
   452                           
   453                           ; 1 bytes @ 0x3
   454  0073                     	ds	1
   455  0074                     ??_SPI_writeArray:	
   456  0074                     SPI_read_byte@address:	
   457                           ; 1 bytes @ 0x4
   458                           
   459                           
   460                           ; 1 bytes @ 0x4
   461  0074                     	ds	1
   462  0075                     SPI_read_byte@ret:	
   463                           
   464                           ; 1 bytes @ 0x5
   465  0075                     	ds	1
   466  0076                     SPI_writeArray@ret:	
   467                           
   468                           ; 1 bytes @ 0x6
   469  0076                     	ds	1
   470  0077                     SPI_writeArray@i:	
   471                           
   472                           ; 1 bytes @ 0x7
   473  0077                     	ds	1
   474  0078                     SPI_writeArray@data:	
   475                           
   476                           ; 1 bytes @ 0x8
   477  0078                     	ds	1
   478  0079                     ??_configureTX:	
   479  0079                     ??_transmitData:	
   480                           ; 1 bytes @ 0x9
   481                           
   482                           
   483                           ; 1 bytes @ 0x9
   484  0079                     	ds	1
   485  007A                     transmitData@data:	
   486  007A                     configureTX@write:	
   487                           ; 1 bytes @ 0xA
   488                           
   489                           
   490                           ; 2 bytes @ 0xA
   491  007A                     	ds	1
   492  007B                     transmitData@write:	
   493                           
   494                           ; 2 bytes @ 0xB
   495  007B                     	ds	2
   496  007D                     ??_main:	
   497  007D                     main@last:	
   498                           ; 1 bytes @ 0xD
   499                           
   500                           
   501                           ; 1 bytes @ 0xD
   502  007D                     	ds	1
   503                           
   504                           	psect	maintext
   505  075C                     __pmaintext:	
   506 ;;
   507 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   508 ;;
   509 ;; *************** function _main *****************
   510 ;; Defined at:
   511 ;;		line 44 in file "transmitter.c"
   512 ;; Parameters:    Size  Location     Type
   513 ;;		None
   514 ;; Auto vars:     Size  Location     Type
   515 ;;  last            1   13[COMMON] unsigned char 
   516 ;; Return value:  Size  Location     Type
   517 ;;                  2   28[None  ] int 
   518 ;; Registers used:
   519 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   520 ;; Tracked objects:
   521 ;;		On entry : B1F/0
   522 ;;		On exit  : 0/0
   523 ;;		Unchanged: 0/0
   524 ;; Data sizes:     COMMON   BANK0   BANK1
   525 ;;      Params:         0       0       0
   526 ;;      Locals:         1       0       0
   527 ;;      Temps:          0       0       0
   528 ;;      Totals:         1       0       0
   529 ;;Total ram usage:        1 bytes
   530 ;; Hardware stack levels required when called:    3
   531 ;; This function calls:
   532 ;;		_SPI_init
   533 ;;		_SPI_read_byte
   534 ;;		_bigBlink
   535 ;;		_configureTX
   536 ;;		_transmitData
   537 ;; This function is called by:
   538 ;;		Startup code after reset
   539 ;; This function uses a non-reentrant model
   540 ;;
   541                           
   542                           
   543                           ;psect for function _main
   544  075C                     _main:	
   545                           
   546                           ;transmitter.c: 45: uint8_t last = 1;
   547                           
   548                           ;incstack = 0
   549                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   550  075C  01FD               	clrf	main@last
   551  075D  0AFD               	incf	main@last,f
   552                           
   553                           ;transmitter.c: 46: SPI_init();
   554  075E  26E5               	fcall	_SPI_init
   555                           
   556                           ;transmitter.c: 47: LATAbits.LATA1 = 0;
   557  075F  0022               	movlb	2	; select bank2
   558  0760  108C               	bcf	12,1	;volatile
   559                           
   560                           ;transmitter.c: 48: configureTX();
   561  0761  27A4               	fcall	_configureTX
   562  0762                     l686:	
   563                           ;transmitter.c: 49: while(1) {
   564                           
   565                           
   566                           ;transmitter.c: 50: if(PORTAbits.RA5 != last) {
   567  0762  0020               	movlb	0	; select bank0
   568  0763  0E0C               	swapf	12,w	;volatile
   569  0764  0C89               	rrf	9,f
   570  0765  3901               	andlw	1
   571  0766  067D               	xorwf	main@last,w
   572  0767  1903               	skipnz
   573  0768  2F75               	goto	l694
   574                           
   575                           ;transmitter.c: 51: last = PORTAbits.RA5;
   576  0769  3000               	movlw	0
   577  076A  1A8C               	btfsc	12,5	;volatile
   578  076B  3001               	movlw	1
   579  076C  00FD               	movwf	main@last
   580                           
   581                           ;transmitter.c: 52: LATAbits.LATA1 = last;
   582  076D  0C7D               	rrf	main@last,w
   583  076E  0022               	movlb	2	; select bank2
   584  076F  1C03               	skipc
   585  0770  108C               	bcf	12,1	;volatile
   586  0771  1803               	skipnc
   587  0772  148C               	bsf	12,1	;volatile
   588                           
   589                           ;transmitter.c: 53: transmitData(0xCF);
   590  0773  30CF               	movlw	207
   591  0774  2741               	fcall	_transmitData
   592  0775                     l694:	
   593                           
   594                           ;transmitter.c: 54: }
   595                           ;transmitter.c: 55: if(SPI_read_byte(0x00) == 0b01011010) {
   596  0775  3000               	movlw	0
   597  0776  26F3               	fcall	_SPI_read_byte
   598  0777  3A5A               	xorlw	90
   599  0778  1D03               	skipz
   600  0779  2F62               	goto	l686
   601                           
   602                           ;transmitter.c: 56: bigBlink(5);
   603  077A  3005               	movlw	5
   604  077B  277D               	fcall	_bigBlink
   605  077C  2F62               	goto	l686
   606  077D                     __end_of_main:	
   607                           
   608                           	psect	text1
   609  0741                     __ptext1:	
   610 ;; *************** function _transmitData *****************
   611 ;; Defined at:
   612 ;;		line 122 in file "transmitter.c"
   613 ;; Parameters:    Size  Location     Type
   614 ;;  data            1    wreg     unsigned char 
   615 ;; Auto vars:     Size  Location     Type
   616 ;;  data            1   10[COMMON] unsigned char 
   617 ;;  write           2   11[COMMON] unsigned char [2]
   618 ;; Return value:  Size  Location     Type
   619 ;;                  1    wreg      void 
   620 ;; Registers used:
   621 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   622 ;; Tracked objects:
   623 ;;		On entry : 0/0
   624 ;;		On exit  : 0/0
   625 ;;		Unchanged: 0/0
   626 ;; Data sizes:     COMMON   BANK0   BANK1
   627 ;;      Params:         0       0       0
   628 ;;      Locals:         3       0       0
   629 ;;      Temps:          1       0       0
   630 ;;      Totals:         4       0       0
   631 ;;Total ram usage:        4 bytes
   632 ;; Hardware stack levels used:    1
   633 ;; Hardware stack levels required when called:    2
   634 ;; This function calls:
   635 ;;		_SPI_writeArray
   636 ;; This function is called by:
   637 ;;		_main
   638 ;; This function uses a non-reentrant model
   639 ;;
   640                           
   641                           
   642                           ;psect for function _transmitData
   643  0741                     _transmitData:	
   644                           
   645                           ;incstack = 0
   646                           ; Regs used in _transmitData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   647                           ;transmitData@data stored from wreg
   648  0741  00FA               	movwf	transmitData@data
   649                           
   650                           ;transmitter.c: 123: uint8_t write[2];
   651                           ;transmitter.c: 124: write[0]= 0b10100000;
   652  0742  30A0               	movlw	160
   653  0743  00F9               	movwf	??_transmitData
   654  0744  0879               	movf	??_transmitData,w
   655  0745  00FB               	movwf	transmitData@write
   656                           
   657                           ;transmitter.c: 125: write[1] = data;
   658  0746  087A               	movf	transmitData@data,w
   659  0747  00F9               	movwf	??_transmitData
   660  0748  0879               	movf	??_transmitData,w
   661  0749  00FC               	movwf	transmitData@write+1
   662                           
   663                           ;transmitter.c: 126: SPI_writeArray(write, 2);
   664  074A  3002               	movlw	2
   665  074B  00F9               	movwf	??_transmitData
   666  074C  0879               	movf	??_transmitData,w
   667  074D  00F3               	movwf	SPI_writeArray@length
   668  074E  307B               	movlw	(low (transmitData@write| 0))& (0+255)
   669  074F  2726               	fcall	_SPI_writeArray
   670                           
   671                           ;transmitter.c: 127: LATCbits.LATC4 = 1;
   672  0750  0022               	movlb	2	; select bank2
   673  0751  160E               	bsf	14,4	;volatile
   674                           
   675                           ;transmitter.c: 128: _delay((unsigned long)((50)*(16000000UL/4000000.0)));
   676  0752  3042               	movlw	66
   677  0753                     u127:	
   678  0753  0B89               	decfsz	9,f
   679  0754  2F53               	goto	u127
   680  0755  3200               	nop2
   681                           
   682                           ;transmitter.c: 129: LATCbits.LATC4 = 0;
   683  0756  0022               	movlb	2	; select bank2
   684  0757  120E               	bcf	14,4	;volatile
   685  0758                     l52:	
   686                           ;transmitter.c: 130: while(PORTAbits.RA2);
   687                           
   688  0758  0020               	movlb	0	; select bank0
   689  0759  1D0C               	btfss	12,2	;volatile
   690  075A  0008               	return
   691  075B  2F58               	goto	l52
   692  075C                     __end_of_transmitData:	
   693                           
   694                           	psect	text2
   695  07A4                     __ptext2:	
   696 ;; *************** function _configureTX *****************
   697 ;; Defined at:
   698 ;;		line 79 in file "transmitter.c"
   699 ;; Parameters:    Size  Location     Type
   700 ;;		None
   701 ;; Auto vars:     Size  Location     Type
   702 ;;  write           2   10[COMMON] unsigned char [2]
   703 ;; Return value:  Size  Location     Type
   704 ;;                  1    wreg      void 
   705 ;; Registers used:
   706 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   707 ;; Tracked objects:
   708 ;;		On entry : 0/0
   709 ;;		On exit  : 0/0
   710 ;;		Unchanged: 0/0
   711 ;; Data sizes:     COMMON   BANK0   BANK1
   712 ;;      Params:         0       0       0
   713 ;;      Locals:         2       0       0
   714 ;;      Temps:          1       0       0
   715 ;;      Totals:         3       0       0
   716 ;;Total ram usage:        3 bytes
   717 ;; Hardware stack levels used:    1
   718 ;; Hardware stack levels required when called:    2
   719 ;; This function calls:
   720 ;;		_SPI_writeArray
   721 ;; This function is called by:
   722 ;;		_main
   723 ;; This function uses a non-reentrant model
   724 ;;
   725                           
   726                           
   727                           ;psect for function _configureTX
   728  07A4                     _configureTX:	
   729                           
   730                           ;transmitter.c: 92: LATCbits.LATC4 = 0;
   731                           
   732                           ;incstack = 0
   733                           ; Regs used in _configureTX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   734  07A4  0022               	movlb	2	; select bank2
   735  07A5  120E               	bcf	14,4	;volatile
   736                           
   737                           ;transmitter.c: 93: _delay((unsigned long)((1)*(16000000UL/4000.0)));
   738  07A6  3006               	movlw	6
   739  07A7  00F9               	movwf	??_configureTX
   740  07A8  3030               	movlw	48
   741  07A9                     u137:	
   742  07A9  0B89               	decfsz	9,f
   743  07AA  2FA9               	goto	u137
   744  07AB  0BF9               	decfsz	??_configureTX,f
   745  07AC  2FA9               	goto	u137
   746  07AD  3200               	nop2
   747                           
   748                           ;transmitter.c: 94: LATCbits.LATC3 = 1;
   749  07AE  0022               	movlb	2	; select bank2
   750  07AF  158E               	bsf	14,3	;volatile
   751                           
   752                           ;transmitter.c: 95: _delay((unsigned long)((10)*(16000000UL/4000.0)));
   753  07B0  3034               	movlw	52
   754  07B1  00F9               	movwf	??_configureTX
   755  07B2  30F2               	movlw	242
   756  07B3                     u147:	
   757  07B3  0B89               	decfsz	9,f
   758  07B4  2FB3               	goto	u147
   759  07B5  0BF9               	decfsz	??_configureTX,f
   760  07B6  2FB3               	goto	u147
   761                           
   762                           ;transmitter.c: 96: uint8_t write[2];
   763                           ;transmitter.c: 97: write[0] = (0x00 & 0b00011111) | 0b00100000;
   764  07B7  3020               	movlw	32
   765  07B8  00F9               	movwf	??_configureTX
   766  07B9  0879               	movf	??_configureTX,w
   767  07BA  00FA               	movwf	configureTX@write
   768                           
   769                           ;transmitter.c: 98: write[1] = 0b01011010;
   770  07BB  305A               	movlw	90
   771  07BC  00F9               	movwf	??_configureTX
   772  07BD  0879               	movf	??_configureTX,w
   773  07BE  00FB               	movwf	configureTX@write+1
   774                           
   775                           ;transmitter.c: 99: SPI_writeArray(write, 2);
   776  07BF  3002               	movlw	2
   777  07C0  00F9               	movwf	??_configureTX
   778  07C1  0879               	movf	??_configureTX,w
   779  07C2  00F3               	movwf	SPI_writeArray@length
   780  07C3  307A               	movlw	(low (configureTX@write| 0))& (0+255)
   781  07C4  2726               	fcall	_SPI_writeArray
   782                           
   783                           ;transmitter.c: 101: write[0] = (0x01 & 0b00011111) | 0b00100000;
   784  07C5  3021               	movlw	33
   785  07C6  00F9               	movwf	??_configureTX
   786  07C7  0879               	movf	??_configureTX,w
   787  07C8  00FA               	movwf	configureTX@write
   788                           
   789                           ;transmitter.c: 102: write[1] = 0b00000001;
   790  07C9  01FB               	clrf	configureTX@write+1
   791  07CA  0AFB               	incf	configureTX@write+1,f
   792                           
   793                           ;transmitter.c: 103: SPI_writeArray(write, 2);
   794  07CB  3002               	movlw	2
   795  07CC  00F9               	movwf	??_configureTX
   796  07CD  0879               	movf	??_configureTX,w
   797  07CE  00F3               	movwf	SPI_writeArray@length
   798  07CF  307A               	movlw	(low (configureTX@write| 0))& (0+255)
   799  07D0  2726               	fcall	_SPI_writeArray
   800                           
   801                           ;transmitter.c: 105: write[0] = (0x02 & 0b00011111) | 0b00100000;
   802  07D1  3022               	movlw	34
   803  07D2  00F9               	movwf	??_configureTX
   804  07D3  0879               	movf	??_configureTX,w
   805  07D4  00FA               	movwf	configureTX@write
   806                           
   807                           ;transmitter.c: 106: write[1] = 0b00000001;
   808  07D5  01FB               	clrf	configureTX@write+1
   809  07D6  0AFB               	incf	configureTX@write+1,f
   810                           
   811                           ;transmitter.c: 107: SPI_writeArray(write, 2);
   812  07D7  3002               	movlw	2
   813  07D8  00F9               	movwf	??_configureTX
   814  07D9  0879               	movf	??_configureTX,w
   815  07DA  00F3               	movwf	SPI_writeArray@length
   816  07DB  307A               	movlw	(low (configureTX@write| 0))& (0+255)
   817  07DC  2726               	fcall	_SPI_writeArray
   818                           
   819                           ;transmitter.c: 109: write[0] = (RX_PW_P[0] & 0b00011111) | 0b00100000;
   820  07DD  30D8               	movlw	low (_RX_PW_P| (0+32768))
   821  07DE  0084               	movwf	4
   822  07DF  3086               	movlw	high (_RX_PW_P| (0+32768))
   823  07E0  0085               	movwf	5
   824  07E1  0800               	movf	0,w	;code access
   825  07E2  391F               	andlw	31
   826  07E3  3820               	iorlw	32
   827  07E4  00F9               	movwf	??_configureTX
   828  07E5  0879               	movf	??_configureTX,w
   829  07E6  00FA               	movwf	configureTX@write
   830                           
   831                           ;transmitter.c: 110: write[1] = 0b00000001;
   832  07E7  01FB               	clrf	configureTX@write+1
   833  07E8  0AFB               	incf	configureTX@write+1,f
   834                           
   835                           ;transmitter.c: 111: SPI_writeArray(write, 2);
   836  07E9  3002               	movlw	2
   837  07EA  00F9               	movwf	??_configureTX
   838  07EB  0879               	movf	??_configureTX,w
   839  07EC  00F3               	movwf	SPI_writeArray@length
   840  07ED  307A               	movlw	(low (configureTX@write| 0))& (0+255)
   841  07EE  2726               	fcall	_SPI_writeArray
   842                           
   843                           ;transmitter.c: 113: write[0] = (0x03 & 0b00011111) | 0b00100000;
   844  07EF  3023               	movlw	35
   845  07F0  00F9               	movwf	??_configureTX
   846  07F1  0879               	movf	??_configureTX,w
   847  07F2  00FA               	movwf	configureTX@write
   848                           
   849                           ;transmitter.c: 114: write[1] = 0b0000011;
   850  07F3  3003               	movlw	3
   851  07F4  00F9               	movwf	??_configureTX
   852  07F5  0879               	movf	??_configureTX,w
   853  07F6  00FB               	movwf	configureTX@write+1
   854                           
   855                           ;transmitter.c: 115: SPI_writeArray(write, 2);
   856  07F7  3002               	movlw	2
   857  07F8  00F9               	movwf	??_configureTX
   858  07F9  0879               	movf	??_configureTX,w
   859  07FA  00F3               	movwf	SPI_writeArray@length
   860  07FB  307A               	movlw	(low (configureTX@write| 0))& (0+255)
   861  07FC  2726               	fcall	_SPI_writeArray
   862  07FD  0008               	return
   863  07FE                     __end_of_configureTX:	
   864                           
   865                           	psect	text3
   866  0726                     __ptext3:	
   867 ;; *************** function _SPI_writeArray *****************
   868 ;; Defined at:
   869 ;;		line 54 in file "spi.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;  data            1    wreg     PTR unsigned char 
   872 ;;		 -> transmitData@write(2), configureTX@write(2), 
   873 ;;  length          1    3[COMMON] unsigned char 
   874 ;; Auto vars:     Size  Location     Type
   875 ;;  data            1    8[COMMON] PTR unsigned char 
   876 ;;		 -> transmitData@write(2), configureTX@write(2), 
   877 ;;  i               1    7[COMMON] unsigned char 
   878 ;;  ret             1    6[COMMON] unsigned char 
   879 ;; Return value:  Size  Location     Type
   880 ;;                  1    wreg      unsigned char 
   881 ;; Registers used:
   882 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   883 ;; Tracked objects:
   884 ;;		On entry : 0/0
   885 ;;		On exit  : 0/0
   886 ;;		Unchanged: 0/0
   887 ;; Data sizes:     COMMON   BANK0   BANK1
   888 ;;      Params:         1       0       0
   889 ;;      Locals:         3       0       0
   890 ;;      Temps:          2       0       0
   891 ;;      Totals:         6       0       0
   892 ;;Total ram usage:        6 bytes
   893 ;; Hardware stack levels used:    1
   894 ;; Hardware stack levels required when called:    1
   895 ;; This function calls:
   896 ;;		_SPI_write_byte
   897 ;; This function is called by:
   898 ;;		_configureTX
   899 ;;		_transmitData
   900 ;; This function uses a non-reentrant model
   901 ;;
   902                           
   903                           
   904                           ;psect for function _SPI_writeArray
   905  0726                     _SPI_writeArray:	
   906                           
   907                           ;incstack = 0
   908                           ; Regs used in _SPI_writeArray: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   909                           ;SPI_writeArray@data stored from wreg
   910  0726  00F8               	movwf	SPI_writeArray@data
   911                           
   912                           ;spi.c: 55: LATCbits.LATC3 = 0;
   913  0727  0022               	movlb	2	; select bank2
   914  0728  118E               	bcf	14,3	;volatile
   915                           
   916                           ;spi.c: 56: uint8_t ret;
   917                           ;spi.c: 57: for(uint8_t i = 0; i < length; ++i) {
   918  0729  01F7               	clrf	SPI_writeArray@i
   919  072A                     l636:	
   920  072A  0873               	movf	SPI_writeArray@length,w
   921  072B  0277               	subwf	SPI_writeArray@i,w
   922  072C  1803               	btfsc	3,0
   923  072D  2F3E               	goto	l102
   924                           
   925                           ;spi.c: 58: ret = SPI_write_byte(data[i]);
   926  072E  0877               	movf	SPI_writeArray@i,w
   927  072F  0778               	addwf	SPI_writeArray@data,w
   928  0730  00F4               	movwf	??_SPI_writeArray
   929  0731  0874               	movf	??_SPI_writeArray,w
   930  0732  0086               	movwf	6
   931  0733  0187               	clrf	7
   932  0734  0801               	movf	1,w
   933  0735  2702               	fcall	_SPI_write_byte
   934  0736  00F5               	movwf	??_SPI_writeArray+1
   935  0737  0875               	movf	??_SPI_writeArray+1,w
   936  0738  00F6               	movwf	SPI_writeArray@ret
   937  0739  3001               	movlw	1
   938  073A  00F4               	movwf	??_SPI_writeArray
   939  073B  0874               	movf	??_SPI_writeArray,w
   940  073C  07F7               	addwf	SPI_writeArray@i,f
   941  073D  2F2A               	goto	l636
   942  073E                     l102:	
   943                           
   944                           ;spi.c: 59: }
   945                           ;spi.c: 61: LATCbits.LATC3 = 1;
   946  073E  0022               	movlb	2	; select bank2
   947  073F  158E               	bsf	14,3	;volatile
   948                           
   949                           ;spi.c: 62: return ret;
   950                           ;	Return value of _SPI_writeArray is never used
   951  0740  0008               	return
   952  0741                     __end_of_SPI_writeArray:	
   953                           
   954                           	psect	text4
   955  077D                     __ptext4:	
   956 ;; *************** function _bigBlink *****************
   957 ;; Defined at:
   958 ;;		line 68 in file "transmitter.c"
   959 ;; Parameters:    Size  Location     Type
   960 ;;  x               1    wreg     unsigned char 
   961 ;; Auto vars:     Size  Location     Type
   962 ;;  x               1    3[COMMON] unsigned char 
   963 ;;  i               1    2[COMMON] unsigned char 
   964 ;;  i               1    1[COMMON] unsigned char 
   965 ;; Return value:  Size  Location     Type
   966 ;;                  1    wreg      void 
   967 ;; Registers used:
   968 ;;		wreg, status,2, status,0
   969 ;; Tracked objects:
   970 ;;		On entry : 0/0
   971 ;;		On exit  : 0/0
   972 ;;		Unchanged: 0/0
   973 ;; Data sizes:     COMMON   BANK0   BANK1
   974 ;;      Params:         0       0       0
   975 ;;      Locals:         3       0       0
   976 ;;      Temps:          1       0       0
   977 ;;      Totals:         4       0       0
   978 ;;Total ram usage:        4 bytes
   979 ;; Hardware stack levels used:    1
   980 ;; This function calls:
   981 ;;		Nothing
   982 ;; This function is called by:
   983 ;;		_main
   984 ;; This function uses a non-reentrant model
   985 ;;
   986                           
   987                           
   988                           ;psect for function _bigBlink
   989  077D                     _bigBlink:	
   990                           
   991                           ;incstack = 0
   992                           ; Regs used in _bigBlink: [wreg+status,2+status,0]
   993                           ;bigBlink@x stored from wreg
   994  077D  00F3               	movwf	bigBlink@x
   995                           
   996                           ;transmitter.c: 69: LATAbits.LATA1 = 1;
   997  077E  0022               	movlb	2	; select bank2
   998  077F  148C               	bsf	12,1	;volatile
   999                           
  1000                           ;transmitter.c: 70: for(uint8_t i = 0; i<x; ++i) {
  1001  0780  01F1               	clrf	bigBlink@i
  1002  0781                     l592:	
  1003  0781  0873               	movf	bigBlink@x,w
  1004  0782  0271               	subwf	bigBlink@i,w
  1005  0783  1803               	btfsc	3,0
  1006  0784  2F91               	goto	l42
  1007                           
  1008                           ;transmitter.c: 71: _delay((unsigned long)((10)*(16000000UL/4000.0)));
  1009  0785  3034               	movlw	52
  1010  0786  00F0               	movwf	??_bigBlink
  1011  0787  30F2               	movlw	242
  1012  0788                     u157:	
  1013  0788  0B89               	decfsz	9,f
  1014  0789  2F88               	goto	u157
  1015  078A  0BF0               	decfsz	??_bigBlink,f
  1016  078B  2F88               	goto	u157
  1017  078C  3001               	movlw	1
  1018  078D  00F0               	movwf	??_bigBlink
  1019  078E  0870               	movf	??_bigBlink,w
  1020  078F  07F1               	addwf	bigBlink@i,f
  1021  0790  2F81               	goto	l592
  1022  0791                     l42:	
  1023                           
  1024                           ;transmitter.c: 72: }
  1025                           ;transmitter.c: 73: LATAbits.LATA1 = 0;
  1026  0791  0022               	movlb	2	; select bank2
  1027  0792  108C               	bcf	12,1	;volatile
  1028                           
  1029                           ;transmitter.c: 74: for(uint8_t i = 0; i<x; ++i) {
  1030  0793  01F2               	clrf	bigBlink@i_126
  1031  0794                     l600:	
  1032  0794  0873               	movf	bigBlink@x,w
  1033  0795  0272               	subwf	bigBlink@i_126,w
  1034  0796  1803               	btfsc	3,0
  1035  0797  0008               	return
  1036                           
  1037                           ;transmitter.c: 75: _delay((unsigned long)((10)*(16000000UL/4000.0)));
  1038  0798  3034               	movlw	52
  1039  0799  00F0               	movwf	??_bigBlink
  1040  079A  30F2               	movlw	242
  1041  079B                     u167:	
  1042  079B  0B89               	decfsz	9,f
  1043  079C  2F9B               	goto	u167
  1044  079D  0BF0               	decfsz	??_bigBlink,f
  1045  079E  2F9B               	goto	u167
  1046  079F  3001               	movlw	1
  1047  07A0  00F0               	movwf	??_bigBlink
  1048  07A1  0870               	movf	??_bigBlink,w
  1049  07A2  07F2               	addwf	bigBlink@i_126,f
  1050  07A3  2F94               	goto	l600
  1051  07A4                     __end_of_bigBlink:	
  1052                           
  1053                           	psect	text5
  1054  06F3                     __ptext5:	
  1055 ;; *************** function _SPI_read_byte *****************
  1056 ;; Defined at:
  1057 ;;		line 65 in file "spi.c"
  1058 ;; Parameters:    Size  Location     Type
  1059 ;;  address         1    wreg     unsigned char 
  1060 ;; Auto vars:     Size  Location     Type
  1061 ;;  address         1    4[COMMON] unsigned char 
  1062 ;;  ret             1    5[COMMON] unsigned char 
  1063 ;; Return value:  Size  Location     Type
  1064 ;;                  1    wreg      unsigned char 
  1065 ;; Registers used:
  1066 ;;		wreg, status,2, status,0, pclath, cstack
  1067 ;; Tracked objects:
  1068 ;;		On entry : 0/0
  1069 ;;		On exit  : 0/0
  1070 ;;		Unchanged: 0/0
  1071 ;; Data sizes:     COMMON   BANK0   BANK1
  1072 ;;      Params:         0       0       0
  1073 ;;      Locals:         2       0       0
  1074 ;;      Temps:          1       0       0
  1075 ;;      Totals:         3       0       0
  1076 ;;Total ram usage:        3 bytes
  1077 ;; Hardware stack levels used:    1
  1078 ;; Hardware stack levels required when called:    1
  1079 ;; This function calls:
  1080 ;;		_SPI_write_byte
  1081 ;; This function is called by:
  1082 ;;		_main
  1083 ;; This function uses a non-reentrant model
  1084 ;;
  1085                           
  1086                           
  1087                           ;psect for function _SPI_read_byte
  1088  06F3                     _SPI_read_byte:	
  1089                           
  1090                           ;incstack = 0
  1091                           ; Regs used in _SPI_read_byte: [wreg+status,2+status,0+pclath+cstack]
  1092                           ;SPI_read_byte@address stored from wreg
  1093  06F3  00F4               	movwf	SPI_read_byte@address
  1094                           
  1095                           ;spi.c: 66: LATCbits.LATC3 = 0;
  1096  06F4  0022               	movlb	2	; select bank2
  1097  06F5  118E               	bcf	14,3	;volatile
  1098                           
  1099                           ;spi.c: 67: SPI_write_byte((address & 0b00011111) | 0x00);
  1100  06F6  0874               	movf	SPI_read_byte@address,w
  1101  06F7  391F               	andlw	31
  1102  06F8  2702               	fcall	_SPI_write_byte
  1103                           
  1104                           ;spi.c: 68: uint8_t ret = SPI_write_byte(0xFF);
  1105  06F9  30FF               	movlw	255
  1106  06FA  2702               	fcall	_SPI_write_byte
  1107  06FB  00F3               	movwf	??_SPI_read_byte
  1108  06FC  0873               	movf	??_SPI_read_byte,w
  1109  06FD  00F5               	movwf	SPI_read_byte@ret
  1110                           
  1111                           ;spi.c: 69: LATCbits.LATC3 = 1;
  1112  06FE  0022               	movlb	2	; select bank2
  1113  06FF  158E               	bsf	14,3	;volatile
  1114                           
  1115                           ;spi.c: 70: return ret;
  1116  0700  0875               	movf	SPI_read_byte@ret,w
  1117  0701  0008               	return
  1118  0702                     __end_of_SPI_read_byte:	
  1119                           
  1120                           	psect	text6
  1121  0702                     __ptext6:	
  1122 ;; *************** function _SPI_write_byte *****************
  1123 ;; Defined at:
  1124 ;;		line 46 in file "spi.c"
  1125 ;; Parameters:    Size  Location     Type
  1126 ;;  data            1    wreg     unsigned char 
  1127 ;; Auto vars:     Size  Location     Type
  1128 ;;  data            1    1[COMMON] unsigned char 
  1129 ;;  ret_data        1    2[COMMON] unsigned char 
  1130 ;; Return value:  Size  Location     Type
  1131 ;;                  1    wreg      unsigned char 
  1132 ;; Registers used:
  1133 ;;		wreg
  1134 ;; Tracked objects:
  1135 ;;		On entry : 0/0
  1136 ;;		On exit  : 0/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMMON   BANK0   BANK1
  1139 ;;      Params:         0       0       0
  1140 ;;      Locals:         2       0       0
  1141 ;;      Temps:          1       0       0
  1142 ;;      Totals:         3       0       0
  1143 ;;Total ram usage:        3 bytes
  1144 ;; Hardware stack levels used:    1
  1145 ;; This function calls:
  1146 ;;		Nothing
  1147 ;; This function is called by:
  1148 ;;		_SPI_writeArray
  1149 ;;		_SPI_read_byte
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           
  1154                           ;psect for function _SPI_write_byte
  1155  0702                     _SPI_write_byte:	
  1156                           
  1157                           ;incstack = 0
  1158                           ; Regs used in _SPI_write_byte: [wreg]
  1159                           ;SPI_write_byte@data stored from wreg
  1160  0702  00F1               	movwf	SPI_write_byte@data
  1161                           
  1162                           ;spi.c: 47: SSP1BUF = data;
  1163  0703  0871               	movf	SPI_write_byte@data,w
  1164  0704  0024               	movlb	4	; select bank4
  1165  0705  0091               	movwf	17	;volatile
  1166  0706                     l94:	
  1167                           ;spi.c: 48: while(!PIR1bits.SSP1IF);
  1168                           
  1169  0706  0020               	movlb	0	; select bank0
  1170  0707  1D91               	btfss	17,3	;volatile
  1171  0708  2F06               	goto	l94
  1172                           
  1173                           ;spi.c: 49: uint8_t ret_data = SSP1BUF;
  1174  0709  0024               	movlb	4	; select bank4
  1175  070A  0811               	movf	17,w	;volatile
  1176  070B  00F0               	movwf	??_SPI_write_byte
  1177  070C  0870               	movf	??_SPI_write_byte,w
  1178  070D  00F2               	movwf	SPI_write_byte@ret_data
  1179                           
  1180                           ;spi.c: 50: PIR1bits.SSP1IF = 0;
  1181  070E  0020               	movlb	0	; select bank0
  1182  070F  1191               	bcf	17,3	;volatile
  1183                           
  1184                           ;spi.c: 51: return ret_data;
  1185  0710  0872               	movf	SPI_write_byte@ret_data,w
  1186  0711  0008               	return
  1187  0712                     __end_of_SPI_write_byte:	
  1188                           
  1189                           	psect	text7
  1190  06E5                     __ptext7:	
  1191 ;; *************** function _SPI_init *****************
  1192 ;; Defined at:
  1193 ;;		line 35 in file "spi.c"
  1194 ;; Parameters:    Size  Location     Type
  1195 ;;		None
  1196 ;; Auto vars:     Size  Location     Type
  1197 ;;		None
  1198 ;; Return value:  Size  Location     Type
  1199 ;;                  1    wreg      void 
  1200 ;; Registers used:
  1201 ;;		wreg, status,2, status,0, pclath, cstack
  1202 ;; Tracked objects:
  1203 ;;		On entry : 0/0
  1204 ;;		On exit  : 0/0
  1205 ;;		Unchanged: 0/0
  1206 ;; Data sizes:     COMMON   BANK0   BANK1
  1207 ;;      Params:         0       0       0
  1208 ;;      Locals:         0       0       0
  1209 ;;      Temps:          0       0       0
  1210 ;;      Totals:         0       0       0
  1211 ;;Total ram usage:        0 bytes
  1212 ;; Hardware stack levels used:    1
  1213 ;; Hardware stack levels required when called:    1
  1214 ;; This function calls:
  1215 ;;		_configIO
  1216 ;; This function is called by:
  1217 ;;		_main
  1218 ;; This function uses a non-reentrant model
  1219 ;;
  1220                           
  1221                           
  1222                           ;psect for function _SPI_init
  1223  06E5                     _SPI_init:	
  1224                           
  1225                           ;spi.c: 36: SSP1CON1bits.SSPEN = 0;
  1226                           
  1227                           ;incstack = 0
  1228                           ; Regs used in _SPI_init: [wreg+status,2+status,0+pclath+cstack]
  1229  06E5  0024               	movlb	4	; select bank4
  1230  06E6  1295               	bcf	21,5	;volatile
  1231                           
  1232                           ;spi.c: 37: configIO();
  1233  06E7  2712               	fcall	_configIO
  1234                           
  1235                           ;spi.c: 38: SSP1CON1bits.CKP = 0;
  1236  06E8  0024               	movlb	4	; select bank4
  1237  06E9  1215               	bcf	21,4	;volatile
  1238                           
  1239                           ;spi.c: 39: SSP1STATbits.CKE = 1;
  1240  06EA  1714               	bsf	20,6	;volatile
  1241                           
  1242                           ;spi.c: 40: SSP1STATbits.SMP = 0;
  1243  06EB  1394               	bcf	20,7	;volatile
  1244                           
  1245                           ;spi.c: 41: SSP1CON1bits.SSPM = 0b0000;
  1246  06EC  30F0               	movlw	-16
  1247  06ED  0595               	andwf	21,f	;volatile
  1248                           
  1249                           ;spi.c: 42: PIR1bits.SSP1IF = 0;
  1250  06EE  0020               	movlb	0	; select bank0
  1251  06EF  1191               	bcf	17,3	;volatile
  1252                           
  1253                           ;spi.c: 43: SSP1CON1bits.SSPEN = 1;
  1254  06F0  0024               	movlb	4	; select bank4
  1255  06F1  1695               	bsf	21,5	;volatile
  1256  06F2  0008               	return
  1257  06F3                     __end_of_SPI_init:	
  1258                           
  1259                           	psect	text8
  1260  0712                     __ptext8:	
  1261 ;; *************** function _configIO *****************
  1262 ;; Defined at:
  1263 ;;		line 19 in file "spi.c"
  1264 ;; Parameters:    Size  Location     Type
  1265 ;;		None
  1266 ;; Auto vars:     Size  Location     Type
  1267 ;;		None
  1268 ;; Return value:  Size  Location     Type
  1269 ;;                  1    wreg      void 
  1270 ;; Registers used:
  1271 ;;		wreg, status,2
  1272 ;; Tracked objects:
  1273 ;;		On entry : 0/0
  1274 ;;		On exit  : 0/0
  1275 ;;		Unchanged: 0/0
  1276 ;; Data sizes:     COMMON   BANK0   BANK1
  1277 ;;      Params:         0       0       0
  1278 ;;      Locals:         0       0       0
  1279 ;;      Temps:          0       0       0
  1280 ;;      Totals:         0       0       0
  1281 ;;Total ram usage:        0 bytes
  1282 ;; Hardware stack levels used:    1
  1283 ;; This function calls:
  1284 ;;		Nothing
  1285 ;; This function is called by:
  1286 ;;		_SPI_init
  1287 ;; This function uses a non-reentrant model
  1288 ;;
  1289                           
  1290                           
  1291                           ;psect for function _configIO
  1292  0712                     _configIO:	
  1293                           
  1294                           ;spi.c: 20: TRISCbits.TRISC3 = 0;
  1295                           
  1296                           ;incstack = 0
  1297                           ; Regs used in _configIO: [wreg+status,2]
  1298  0712  0021               	movlb	1	; select bank1
  1299  0713  118E               	bcf	14,3	;volatile
  1300                           
  1301                           ;spi.c: 21: TRISCbits.TRISC0 = 0;
  1302  0714  100E               	bcf	14,0	;volatile
  1303                           
  1304                           ;spi.c: 22: TRISCbits.TRISC2 = 0;
  1305  0715  110E               	bcf	14,2	;volatile
  1306                           
  1307                           ;spi.c: 23: TRISCbits.TRISC1 = 1;
  1308  0716  148E               	bsf	14,1	;volatile
  1309                           
  1310                           ;spi.c: 24: TRISAbits.TRISA5 = 1;
  1311  0717  168C               	bsf	12,5	;volatile
  1312                           
  1313                           ;spi.c: 25: TRISAbits.TRISA1 = 0;
  1314  0718  108C               	bcf	12,1	;volatile
  1315                           
  1316                           ;spi.c: 26: TRISCbits.TRISC4 = 0;
  1317  0719  120E               	bcf	14,4	;volatile
  1318                           
  1319                           ;spi.c: 27: TRISAbits.TRISA2 = 1;
  1320  071A  150C               	bsf	12,2	;volatile
  1321                           
  1322                           ;spi.c: 28: OPTION_REGbits.nWPUEN = 0;
  1323  071B  1395               	bcf	21,7	;volatile
  1324                           
  1325                           ;spi.c: 29: WPUAbits.WPUA5 = 1;
  1326  071C  0024               	movlb	4	; select bank4
  1327  071D  168C               	bsf	12,5	;volatile
  1328                           
  1329                           ;spi.c: 30: WPUAbits.WPUA2 = 1;
  1330  071E  150C               	bsf	12,2	;volatile
  1331                           
  1332                           ;spi.c: 31: APFCON = 0b00010000;
  1333  071F  3010               	movlw	16
  1334  0720  0022               	movlb	2	; select bank2
  1335  0721  009D               	movwf	29	;volatile
  1336                           
  1337                           ;spi.c: 32: ANSELA = 0x00;
  1338  0722  0023               	movlb	3	; select bank3
  1339  0723  018C               	clrf	12	;volatile
  1340                           
  1341                           ;spi.c: 33: ANSELC = 0x00;
  1342  0724  018E               	clrf	14	;volatile
  1343  0725  0008               	return
  1344  0726                     __end_of_configIO:	
  1345  007E                     btemp	set	126	;btemp
  1346  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    13
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      0       0
    BANK1            32      0       0

Pointer List with Targets:

    SPI_writeArray@data	PTR unsigned char  size(1) Largest target is 2
		 -> transmitData@write(COMMON[2]), configureTX@write(COMMON[2]), 


Critical Paths under _main in COMMON

    _main->_transmitData
    _transmitData->_SPI_writeArray
    _configureTX->_SPI_writeArray
    _SPI_writeArray->_SPI_write_byte
    _SPI_read_byte->_SPI_write_byte

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1854
                                             13 COMMON     1     1      0
                           _SPI_init
                      _SPI_read_byte
                           _bigBlink
                        _configureTX
                       _transmitData
 ---------------------------------------------------------------------------------
 (1) _transmitData                                         4     4      0     761
                                              9 COMMON     4     4      0
                     _SPI_writeArray
 ---------------------------------------------------------------------------------
 (1) _configureTX                                          3     3      0     927
                                              9 COMMON     3     3      0
                     _SPI_writeArray
 ---------------------------------------------------------------------------------
 (2) _SPI_writeArray                                       6     5      1     691
                                              3 COMMON     6     5      1
                     _SPI_write_byte
 ---------------------------------------------------------------------------------
 (1) _bigBlink                                             4     4      0      60
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _SPI_read_byte                                        3     3      0      60
                                              3 COMMON     3     3      0
                     _SPI_write_byte
 ---------------------------------------------------------------------------------
 (3) _SPI_write_byte                                       3     3      0      30
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             0     0      0       0
                           _configIO
 ---------------------------------------------------------------------------------
 (2) _configIO                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init
     _configIO
   _SPI_read_byte
     _SPI_write_byte
   _bigBlink
   _configureTX
     _SPI_writeArray
       _SPI_write_byte
   _transmitData
     _SPI_writeArray
       _SPI_write_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0       0       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue May 16 23:37:52 2017

           ?_configureTX 0070              __CFG_CP$OFF 0000                       l42 0791  
                     l52 0758                       l94 0706                      l102 073E  
                    l600 0794                      l636 072A                      l592 0781  
                    l694 0775                      l686 0762                      u127 0753  
                    u137 07A9                      u147 07B3                      u157 0788  
                    u167 079B             __CFG_BORV$LO 0000                      wreg 0009  
           __CFG_LVP$OFF 0000   __size_of_SPI_read_byte 000F             _transmitData 0741  
           __CFG_WRT$OFF 0000                     _main 075C                     fsr0h 0005  
                   fsr1h 0007                     indf0 0000                     fsr0l 0004  
                   indf1 0001                     fsr1l 0006                     btemp 007E  
                   start 0001          __end_of_TX_ADDR 06E5          __end_of_RX_PW_P 06DE  
          __CFG_MCLRE$ON 0000        transmitData@write 007B                    ?_main 0070  
          __CFG_WDTE$OFF 0000           __CFG_BOREN$OFF 0000         __end_of_SPI_init 06F3  
                  wtemp0 007E          __initialization 07FE             __end_of_main 077D  
          _SPI_read_byte 06F3           __CFG_LPBOR$OFF 0000                   ??_main 007D  
                 _APFCON 011D                   _ANSELA 018C                   _ANSELC 018E  
       __end_of_bigBlink 07A4           __CFG_PWRTE$OFF 0000         __end_of_configIO 0726  
         ?_SPI_read_byte 0070  __size_of_SPI_writeArray 001B           __CFG_STVREN$ON 0000  
__size_of_SPI_write_byte 0010     __size_of_configureTX 005A        __end_of_RX_ADDR_P 06E4  
__end_of__initialization 07FE           __pcstackCOMMON 0070                ?_SPI_init 0070  
         _OPTION_REGbits 0095         configureTX@write 007A          ??_SPI_read_byte 0073  
             __pmaintext 075C               ??_SPI_init 0070                ?_bigBlink 0070  
       SPI_read_byte@ret 0075                  _SSP1BUF 0211                ?_configIO 0070  
                _TX_ADDR 06E4                  _RX_PW_P 06D8           _SPI_writeArray 0726  
         _SPI_write_byte 0702                  __ptext1 0741                  __ptext2 07A4  
                __ptext3 0726                  __ptext4 077D                  __ptext5 06F3  
                __ptext6 0702                  __ptext7 06E5                  __ptext8 0712  
             ??_bigBlink 0070               ??_configIO 0070     end_of_initialization 07FE  
 __end_of_SPI_writeArray 0741       SPI_writeArray@data 0078   __end_of_SPI_write_byte 0712  
           __pstringtext 06D8                _PORTAbits 000C         __CFG_FOSC$INTOSC 0000  
              _TRISAbits 008C                _TRISCbits 008E                _RX_ADDR_P 06DE  
        ?_SPI_writeArray 0073          ?_SPI_write_byte 0070            ??_configureTX 0079  
       transmitData@data 007A      start_initialization 07FE        __size_of_SPI_init 000E  
          ?_transmitData 0070      __end_of_configureTX 07FE        __size_of_bigBlink 0027  
              ___latbits 0000           ??_transmitData 0079        __size_of_configIO 0014  
  __end_of_SPI_read_byte 0702       SPI_write_byte@data 0071                bigBlink@i 0071  
              bigBlink@x 0073          SPI_writeArray@i 0077                 _LATAbits 010C  
               _LATCbits 010E        SPI_writeArray@ret 0076                 _PIR1bits 0011  
            _configureTX 07A4                 _SPI_init 06E5   SPI_write_byte@ret_data 0072  
               _WPUAbits 020C            bigBlink@i_126 0072         ??_SPI_writeArray 0074  
       ??_SPI_write_byte 0070     __end_of_transmitData 075C                 _bigBlink 077D  
   SPI_read_byte@address 0074             _SSP1CON1bits 0215                 _configIO 0712  
   SPI_writeArray@length 0073            __size_of_main 0021             _SSP1STATbits 0214  
               main@last 007D        __CFG_CLKOUTEN$OFF 0000    __size_of_transmitData 001B  
