

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun May 14 20:11:39 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	stringtext3,global,class=STRCODE,delta=2
     7                           	psect	stringtext4,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 1.42
    20                           ; Generated 13/04/2017 GMT
    21                           ; 
    22                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F1503 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000E                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0013                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001C                     	;# 
    79  008C                     	;# 
    80  008E                     	;# 
    81  0091                     	;# 
    82  0092                     	;# 
    83  0093                     	;# 
    84  0095                     	;# 
    85  0096                     	;# 
    86  0097                     	;# 
    87  0099                     	;# 
    88  009A                     	;# 
    89  009B                     	;# 
    90  009B                     	;# 
    91  009C                     	;# 
    92  009D                     	;# 
    93  009E                     	;# 
    94  009F                     	;# 
    95  010C                     	;# 
    96  010E                     	;# 
    97  0111                     	;# 
    98  0112                     	;# 
    99  0113                     	;# 
   100  0114                     	;# 
   101  0115                     	;# 
   102  0116                     	;# 
   103  0117                     	;# 
   104  0118                     	;# 
   105  0119                     	;# 
   106  011D                     	;# 
   107  018C                     	;# 
   108  018E                     	;# 
   109  0191                     	;# 
   110  0191                     	;# 
   111  0192                     	;# 
   112  0193                     	;# 
   113  0193                     	;# 
   114  0194                     	;# 
   115  0195                     	;# 
   116  0196                     	;# 
   117  0197                     	;# 
   118  020C                     	;# 
   119  0211                     	;# 
   120  0211                     	;# 
   121  0212                     	;# 
   122  0212                     	;# 
   123  0213                     	;# 
   124  0213                     	;# 
   125  0214                     	;# 
   126  0214                     	;# 
   127  0215                     	;# 
   128  0215                     	;# 
   129  0215                     	;# 
   130  0216                     	;# 
   131  0216                     	;# 
   132  0217                     	;# 
   133  0217                     	;# 
   134  0391                     	;# 
   135  0392                     	;# 
   136  0393                     	;# 
   137  0498                     	;# 
   138  0498                     	;# 
   139  0499                     	;# 
   140  049A                     	;# 
   141  049B                     	;# 
   142  049B                     	;# 
   143  049C                     	;# 
   144  049D                     	;# 
   145  049E                     	;# 
   146  049F                     	;# 
   147  0611                     	;# 
   148  0612                     	;# 
   149  0613                     	;# 
   150  0613                     	;# 
   151  0614                     	;# 
   152  0615                     	;# 
   153  0616                     	;# 
   154  0616                     	;# 
   155  0617                     	;# 
   156  0618                     	;# 
   157  0619                     	;# 
   158  0619                     	;# 
   159  061A                     	;# 
   160  061B                     	;# 
   161  061C                     	;# 
   162  061C                     	;# 
   163  0691                     	;# 
   164  0692                     	;# 
   165  0693                     	;# 
   166  0694                     	;# 
   167  0695                     	;# 
   168  0F0F                     	;# 
   169  0F10                     	;# 
   170  0F11                     	;# 
   171  0F12                     	;# 
   172  0F13                     	;# 
   173  0F14                     	;# 
   174  0F15                     	;# 
   175  0F16                     	;# 
   176  0F17                     	;# 
   177  0F18                     	;# 
   178  0F19                     	;# 
   179  0F1A                     	;# 
   180  0F1B                     	;# 
   181  0F1C                     	;# 
   182  0F1D                     	;# 
   183  0F1E                     	;# 
   184  0F1F                     	;# 
   185  0FE3                     	;# 
   186  0FE4                     	;# 
   187  0FE5                     	;# 
   188  0FE6                     	;# 
   189  0FE7                     	;# 
   190  0FE8                     	;# 
   191  0FE9                     	;# 
   192  0FEA                     	;# 
   193  0FEB                     	;# 
   194  0FED                     	;# 
   195  0FEE                     	;# 
   196  0FEF                     	;# 
   197                           
   198                           	psect	stringtext1
   199  06DF                     __pstringtext1:	
   200  06DF                     _TX_ADDR:	
   201  06DF  340B               	retlw	11
   202  06E0  343B               	retlw	59
   203  06E1  344B               	retlw	75
   204  06E2  345B               	retlw	91
   205  06E3  3460               	retlw	96
   206  06E4                     __end_of_TX_ADDR:	
   207                           
   208                           	psect	stringtext2
   209  06DE                     __pstringtext2:	
   210  06DE                     _READ_MASK:	
   211  06DE  341F               	retlw	31
   212  06DF                     __end_of_READ_MASK:	
   213                           
   214                           	psect	stringtext3
   215  06DD                     __pstringtext3:	
   216  06DD                     _WRITE_MASK:	
   217  06DD  3420               	retlw	32
   218  06DE                     __end_of_WRITE_MASK:	
   219                           
   220                           	psect	stringtext4
   221  06DC                     __pstringtext4:	
   222  06DC                     _W_TX_PAYLOAD:	
   223  06DC  34A0               	retlw	160
   224  06DD                     __end_of_W_TX_PAYLOAD:	
   225  0011                     _PIR1bits	set	17
   226  000C                     _PORTAbits	set	12
   227  0091                     _PIE1bits	set	145
   228  0095                     _OPTION_REGbits	set	149
   229  008E                     _TRISC	set	142
   230  008C                     _TRISA	set	140
   231  010C                     _LATAbits	set	268
   232  010E                     _LATCbits	set	270
   233  0215                     _SSP1CON1bits	set	533
   234  0214                     _SSP1STAT	set	532
   235  0215                     _SSP1CON1	set	533
   236  0214                     _SSP1STATbits	set	532
   237  0211                     _SSP1BUF	set	529
   238  020C                     _WPUAbits	set	524
   239                           
   240                           ; #config settings
   241  0000                     
   242                           	psect	cinit
   243  07FE                     start_initialization:	
   244  07FE                     __initialization:	
   245  07FE                     end_of_initialization:	
   246                           ;End of C runtime variable initialization code
   247                           
   248  07FE                     __end_of__initialization:	
   249  07FE  0020               	movlb	0
   250  07FF  2F4B               	ljmp	_main	;jump to C main() function
   251                           
   252                           	psect	cstackCOMMON
   253  0070                     __pcstackCOMMON:	
   254  0070                     ?_configIOTransmitter:	
   255  0070                     ??_configIOTransmitter:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_SPI_init:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ??_SPI_init:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ?_configureTX:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_writeSPI:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ??_writeSPI:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?_transmitData:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ?_blink:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ??_blink:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ?_main:	
   283                           ; 1 bytes @ 0x0
   284                           
   285                           
   286                           ; 2 bytes @ 0x0
   287  0070                     	ds	1
   288  0071                     writeSPI@data:	
   289                           
   290                           ; 1 bytes @ 0x1
   291  0071                     	ds	1
   292  0072                     writeSPI@x:	
   293                           
   294                           ; 1 bytes @ 0x2
   295  0072                     	ds	1
   296  0073                     ??_configureTX:	
   297  0073                     ??_transmitData:	
   298                           ; 1 bytes @ 0x3
   299                           
   300                           
   301                           ; 1 bytes @ 0x3
   302  0073                     	ds	1
   303  0074                     configureTX@i:	
   304  0074                     transmitData@data:	
   305                           ; 1 bytes @ 0x4
   306                           
   307                           
   308                           ; 1 bytes @ 0x4
   309  0074                     	ds	1
   310  0075                     configureTX@i_288:	
   311  0075                     transmitData@sreg:	
   312                           ; 1 bytes @ 0x5
   313                           
   314                           
   315                           ; 1 bytes @ 0x5
   316  0075                     	ds	1
   317  0076                     ??_main:	
   318                           
   319                           ; 1 bytes @ 0x6
   320  0076                     	ds	1
   321  0077                     main@data:	
   322                           
   323                           ; 1 bytes @ 0x7
   324  0077                     	ds	1
   325  0078                     main@last:	
   326                           
   327                           ; 1 bytes @ 0x8
   328  0078                     	ds	1
   329                           
   330                           	psect	maintext
   331  074B                     __pmaintext:	
   332 ;;
   333 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   334 ;;
   335 ;; *************** function _main *****************
   336 ;; Defined at:
   337 ;;		line 56 in file "transmitter.c"
   338 ;; Parameters:    Size  Location     Type
   339 ;;		None
   340 ;; Auto vars:     Size  Location     Type
   341 ;;  data            1    7[COMMON] unsigned char 
   342 ;;  last            1    8[COMMON] unsigned char 
   343 ;; Return value:  Size  Location     Type
   344 ;;                  2   52[None  ] int 
   345 ;; Registers used:
   346 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   347 ;; Tracked objects:
   348 ;;		On entry : B1F/0
   349 ;;		On exit  : 0/0
   350 ;;		Unchanged: 0/0
   351 ;; Data sizes:     COMMON   BANK0   BANK1
   352 ;;      Params:         0       0       0
   353 ;;      Locals:         2       0       0
   354 ;;      Temps:          1       0       0
   355 ;;      Totals:         3       0       0
   356 ;;Total ram usage:        3 bytes
   357 ;; Hardware stack levels required when called:    2
   358 ;; This function calls:
   359 ;;		_SPI_init
   360 ;;		_configIOTransmitter
   361 ;;		_configureTX
   362 ;;		_transmitData
   363 ;;		_writeSPI
   364 ;; This function is called by:
   365 ;;		Startup code after reset
   366 ;; This function uses a non-reentrant model
   367 ;;
   368                           
   369                           
   370                           ;psect for function _main
   371  074B                     _main:	
   372                           
   373                           ;transmitter.c: 57: LATCbits.LATC4 = 1;
   374                           
   375                           ;incstack = 0
   376                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   377  074B  0022               	movlb	2	; select bank2
   378  074C  160E               	bsf	14,4	;volatile
   379                           
   380                           ;transmitter.c: 58: uint8_t last = 1;
   381  074D  01F8               	clrf	main@last
   382  074E  0AF8               	incf	main@last,f
   383                           
   384                           ;transmitter.c: 59: configIOTransmitter();
   385  074F  26E4               	fcall	_configIOTransmitter
   386                           
   387                           ;transmitter.c: 60: SPI_init();
   388  0750  26FA               	fcall	_SPI_init
   389                           
   390                           ;transmitter.c: 61: LATAbits.LATA0 = 0;
   391  0751  0022               	movlb	2	; select bank2
   392  0752  100C               	bcf	12,0	;volatile
   393                           
   394                           ;transmitter.c: 62: configureTX();
   395  0753  277C               	fcall	_configureTX
   396  0754                     l607:	
   397                           ;transmitter.c: 63: while(1) {
   398                           
   399                           
   400                           ;transmitter.c: 64: LATCbits.LATC4 = 0;
   401  0754  0022               	movlb	2	; select bank2
   402  0755  120E               	bcf	14,4	;volatile
   403                           
   404                           ;transmitter.c: 65: writeSPI(0x00 & READ_MASK);
   405  0756  3000               	movlw	0
   406  0757  26EE               	fcall	_writeSPI
   407                           
   408                           ;transmitter.c: 66: uint8_t data = writeSPI(0xFF);
   409  0758  30FF               	movlw	255
   410  0759  26EE               	fcall	_writeSPI
   411  075A  00F6               	movwf	??_main
   412  075B  0876               	movf	??_main,w
   413  075C  00F7               	movwf	main@data
   414                           
   415                           ;transmitter.c: 67: LATCbits.LATC4 = 1;
   416  075D  0022               	movlb	2	; select bank2
   417  075E  160E               	bsf	14,4	;volatile
   418                           
   419                           ;transmitter.c: 68: if(data == 0b01011010) {
   420  075F  305A               	movlw	90
   421  0760  0677               	xorwf	main@data,w
   422  0761  1D03               	btfss	3,2
   423  0762  2F6E               	goto	l619
   424                           
   425                           ;transmitter.c: 69: LATAbits.LATA0 = !PORTAbits.RA0;
   426  0763  1003               	clrc
   427  0764  0020               	movlb	0	; select bank0
   428  0765  1C0C               	btfss	12,0	;volatile
   429  0766  1403               	setc
   430  0767  1C03               	btfss	3,0
   431  0768  2F6C               	goto	u90
   432  0769  0022               	movlb	2	; select bank2
   433  076A  140C               	bsf	12,0	;volatile
   434  076B  2F6E               	goto	l619
   435  076C                     u90:	
   436  076C  0022               	movlb	2	; select bank2
   437  076D  100C               	bcf	12,0	;volatile
   438  076E                     l619:	
   439                           
   440                           ;transmitter.c: 70: }
   441                           ;transmitter.c: 71: if(last!= PORTAbits.RA5) {
   442  076E  0020               	movlb	0	; select bank0
   443  076F  0E0C               	swapf	12,w	;volatile
   444  0770  0C89               	rrf	9,f
   445  0771  3901               	andlw	1
   446  0772  0678               	xorwf	main@last,w
   447  0773  1903               	skipnz
   448  0774  2F54               	goto	l607
   449                           
   450                           ;transmitter.c: 72: last = PORTAbits.RA5;
   451  0775  3000               	movlw	0
   452  0776  1A8C               	btfsc	12,5	;volatile
   453  0777  3001               	movlw	1
   454  0778  00F8               	movwf	main@last
   455                           
   456                           ;transmitter.c: 73: transmitData(0xFF);
   457  0779  30FF               	movlw	255
   458  077A  271C               	fcall	_transmitData
   459  077B  2F54               	goto	l607
   460  077C                     __end_of_main:	
   461                           
   462                           	psect	text1
   463  071C                     __ptext1:	
   464 ;; *************** function _transmitData *****************
   465 ;; Defined at:
   466 ;;		line 187 in file "transmitter.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;  data            1    wreg     unsigned char 
   469 ;; Auto vars:     Size  Location     Type
   470 ;;  data            1    4[COMMON] unsigned char 
   471 ;;  sreg            1    5[COMMON] unsigned char 
   472 ;; Return value:  Size  Location     Type
   473 ;;                  1    wreg      void 
   474 ;; Registers used:
   475 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   476 ;; Tracked objects:
   477 ;;		On entry : 0/0
   478 ;;		On exit  : 0/0
   479 ;;		Unchanged: 0/0
   480 ;; Data sizes:     COMMON   BANK0   BANK1
   481 ;;      Params:         0       0       0
   482 ;;      Locals:         2       0       0
   483 ;;      Temps:          1       0       0
   484 ;;      Totals:         3       0       0
   485 ;;Total ram usage:        3 bytes
   486 ;; Hardware stack levels used:    1
   487 ;; Hardware stack levels required when called:    1
   488 ;; This function calls:
   489 ;;		_writeSPI
   490 ;; This function is called by:
   491 ;;		_main
   492 ;; This function uses a non-reentrant model
   493 ;;
   494                           
   495                           
   496                           ;psect for function _transmitData
   497  071C                     _transmitData:	
   498                           
   499                           ;incstack = 0
   500                           ; Regs used in _transmitData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   501                           ;transmitData@data stored from wreg
   502  071C  00F4               	movwf	transmitData@data
   503                           
   504                           ;transmitter.c: 188: LATCbits.LATC4 = 0;
   505  071D  0022               	movlb	2	; select bank2
   506  071E  120E               	bcf	14,4	;volatile
   507                           
   508                           ;transmitter.c: 189: writeSPI(W_TX_PAYLOAD);
   509  071F  30DC               	movlw	low (_W_TX_PAYLOAD| (0+32768))
   510  0720  0084               	movwf	4
   511  0721  3086               	movlw	high (_W_TX_PAYLOAD| (0+32768))
   512  0722  0085               	movwf	5
   513  0723  0800               	movf	0,w	;code access
   514  0724  26EE               	fcall	_writeSPI
   515                           
   516                           ;transmitter.c: 190: writeSPI(data);
   517  0725  0874               	movf	transmitData@data,w
   518  0726  26EE               	fcall	_writeSPI
   519                           
   520                           ;transmitter.c: 191: LATCbits.LATC4 = 1;
   521  0727  0022               	movlb	2	; select bank2
   522  0728  160E               	bsf	14,4	;volatile
   523                           
   524                           ;transmitter.c: 192: LATCbits.LATC3 = 1;
   525  0729  158E               	bsf	14,3	;volatile
   526                           
   527                           ;transmitter.c: 193: _delay((unsigned long)((50)*(16000000/4000000.0)));
   528  072A  3042               	movlw	66
   529  072B                     u127:	
   530  072B  0B89               	decfsz	9,f
   531  072C  2F2B               	goto	u127
   532  072D  3200               	nop2
   533                           
   534                           ;transmitter.c: 195: LATCbits.LATC4 = 0;
   535  072E  0022               	movlb	2	; select bank2
   536  072F                     L1:	
   537  072F  120E               	bcf	14,4	;volatile
   538                           
   539                           ;transmitter.c: 196: uint8_t sreg = writeSPI(0xFF);
   540  0730  30FF               	movlw	255
   541  0731  26EE               	fcall	_writeSPI
   542  0732  00F3               	movwf	??_transmitData
   543  0733  0873               	movf	??_transmitData,w
   544  0734  00F5               	movwf	transmitData@sreg
   545                           
   546                           ;transmitter.c: 201: LATCbits.LATC4 = 1;
   547  0735  0022               	movlb	2	; select bank2
   548  0736  160E               	bsf	14,4	;volatile
   549  0737  1EF5               	btfss	transmitData@sreg,5
   550  0738  2F2F               	goto	L1
   551                           
   552                           ;transmitter.c: 202: }
   553                           ;transmitter.c: 203: LATCbits.LATC3 = 0;
   554                           
   555                           ;transmitter.c: 200: sreg = writeSPI(0xFF);
   556                           
   557                           ;transmitter.c: 199: LATCbits.LATC4 = 0;
   558                           
   559                           ;transmitter.c: 198: while(!(sreg & 0b00100000)) {
   560                           
   561                           ;transmitter.c: 197: LATCbits.LATC4 = 1;
   562  0739  118E               	bcf	14,3	;volatile
   563                           
   564                           ;transmitter.c: 204: LATCbits.LATC4 = 0;
   565  073A  120E               	bcf	14,4	;volatile
   566                           
   567                           ;transmitter.c: 205: uint8_t sreg = writeSPI(0x07 | WRITE_MASK);
   568  073B  30DD               	movlw	low (_WRITE_MASK| (0+32768))
   569  073C  0084               	movwf	4
   570  073D  3086               	movlw	high (_WRITE_MASK| (0+32768))
   571  073E  0085               	movwf	5
   572  073F  0800               	movf	0,w	;code access
   573  0740  3807               	iorlw	7
   574  0741  26EE               	fcall	_writeSPI
   575  0742  00F3               	movwf	??_transmitData
   576  0743  0873               	movf	??_transmitData,w
   577  0744  00F5               	movwf	transmitData@sreg
   578                           
   579                           ;transmitter.c: 206: writeSPI((sreg | 0b01110000));
   580  0745  0875               	movf	transmitData@sreg,w
   581  0746  3870               	iorlw	112
   582  0747  26EE               	fcall	_writeSPI
   583                           
   584                           ;transmitter.c: 207: LATCbits.LATC4 = 1;
   585  0748  0022               	movlb	2	; select bank2
   586  0749  160E               	bsf	14,4	;volatile
   587  074A  0008               	return
   588  074B                     __end_of_transmitData:	
   589                           
   590                           	psect	text2
   591  077C                     __ptext2:	
   592 ;; *************** function _configureTX *****************
   593 ;; Defined at:
   594 ;;		line 95 in file "transmitter.c"
   595 ;; Parameters:    Size  Location     Type
   596 ;;		None
   597 ;; Auto vars:     Size  Location     Type
   598 ;;  i               1    5[COMMON] unsigned char 
   599 ;;  i               1    4[COMMON] unsigned char 
   600 ;; Return value:  Size  Location     Type
   601 ;;                  1    wreg      void 
   602 ;; Registers used:
   603 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   604 ;; Tracked objects:
   605 ;;		On entry : 0/0
   606 ;;		On exit  : 0/0
   607 ;;		Unchanged: 0/0
   608 ;; Data sizes:     COMMON   BANK0   BANK1
   609 ;;      Params:         0       0       0
   610 ;;      Locals:         2       0       0
   611 ;;      Temps:          1       0       0
   612 ;;      Totals:         3       0       0
   613 ;;Total ram usage:        3 bytes
   614 ;; Hardware stack levels used:    1
   615 ;; Hardware stack levels required when called:    1
   616 ;; This function calls:
   617 ;;		_blink
   618 ;;		_writeSPI
   619 ;; This function is called by:
   620 ;;		_main
   621 ;; This function uses a non-reentrant model
   622 ;;
   623                           
   624                           
   625                           ;psect for function _configureTX
   626  077C                     _configureTX:	
   627                           
   628                           ;transmitter.c: 108: LATCbits.LATC4 = 0;
   629                           
   630                           ;incstack = 0
   631                           ; Regs used in _configureTX: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   632  077C  0022               	movlb	2	; select bank2
   633  077D  120E               	bcf	14,4	;volatile
   634                           
   635                           ;transmitter.c: 109: writeSPI(0x00 | WRITE_MASK);
   636  077E  30DD               	movlw	low (_WRITE_MASK| (0+32768))
   637  077F  0084               	movwf	4
   638  0780  3086               	movlw	high (_WRITE_MASK| (0+32768))
   639  0781  0085               	movwf	5
   640  0782  0800               	movf	0,w	;code access
   641  0783  26EE               	fcall	_writeSPI
   642                           
   643                           ;transmitter.c: 110: writeSPI(0b01011010);
   644  0784  305A               	movlw	90
   645  0785  26EE               	fcall	_writeSPI
   646                           
   647                           ;transmitter.c: 111: LATCbits.LATC4 = 1;
   648  0786  0022               	movlb	2	; select bank2
   649  0787  160E               	bsf	14,4	;volatile
   650                           
   651                           ;transmitter.c: 112: LATCbits.LATC4 = 0;
   652  0788  120E               	bcf	14,4	;volatile
   653                           
   654                           ;transmitter.c: 113: writeSPI(0x00 & READ_MASK);
   655  0789  3000               	movlw	0
   656  078A  26EE               	fcall	_writeSPI
   657  078B                     l511:	
   658                           ;transmitter.c: 114: while(writeSPI(0xFF) != 0b01011010) {
   659                           
   660  078B  30FF               	movlw	255
   661  078C  26EE               	fcall	_writeSPI
   662  078D  3A5A               	xorlw	90
   663  078E  1903               	btfsc	3,2
   664  078F  2F92               	goto	l69
   665                           
   666                           ;transmitter.c: 115: blink();
   667  0790  2707               	fcall	_blink
   668  0791  2F8B               	goto	l511
   669  0792                     l69:	
   670                           
   671                           ;transmitter.c: 116: }
   672                           ;transmitter.c: 117: LATCbits.LATC4 = 1;
   673  0792  0022               	movlb	2	; select bank2
   674  0793  160E               	bsf	14,4	;volatile
   675                           
   676                           ;transmitter.c: 118: LATCbits.LATC4 = 0;
   677  0794  120E               	bcf	14,4	;volatile
   678                           
   679                           ;transmitter.c: 119: writeSPI(0x01 | WRITE_MASK);
   680  0795  30DD               	movlw	low (_WRITE_MASK| (0+32768))
   681  0796  0084               	movwf	4
   682  0797  3086               	movlw	high (_WRITE_MASK| (0+32768))
   683  0798  0085               	movwf	5
   684  0799  0800               	movf	0,w	;code access
   685  079A  3801               	iorlw	1
   686  079B  26EE               	fcall	_writeSPI
   687                           
   688                           ;transmitter.c: 120: writeSPI(0b00000001);
   689  079C  3001               	movlw	1
   690  079D  26EE               	fcall	_writeSPI
   691                           
   692                           ;transmitter.c: 121: LATCbits.LATC4 = 1;
   693  079E  0022               	movlb	2	; select bank2
   694  079F  160E               	bsf	14,4	;volatile
   695                           
   696                           ;transmitter.c: 122: LATCbits.LATC4 = 0;
   697  07A0  120E               	bcf	14,4	;volatile
   698                           
   699                           ;transmitter.c: 123: writeSPI(0x02 | WRITE_MASK);
   700  07A1  30DD               	movlw	low (_WRITE_MASK| (0+32768))
   701  07A2  0084               	movwf	4
   702  07A3  3086               	movlw	high (_WRITE_MASK| (0+32768))
   703  07A4  0085               	movwf	5
   704  07A5  0800               	movf	0,w	;code access
   705  07A6  3802               	iorlw	2
   706  07A7  26EE               	fcall	_writeSPI
   707                           
   708                           ;transmitter.c: 124: writeSPI(0b00000001);
   709  07A8  3001               	movlw	1
   710  07A9  26EE               	fcall	_writeSPI
   711                           
   712                           ;transmitter.c: 125: LATCbits.LATC4 = 1;
   713  07AA  0022               	movlb	2	; select bank2
   714  07AB  160E               	bsf	14,4	;volatile
   715                           
   716                           ;transmitter.c: 126: LATCbits.LATC4 = 0;
   717  07AC  120E               	bcf	14,4	;volatile
   718                           
   719                           ;transmitter.c: 127: writeSPI(0x11 | WRITE_MASK);
   720  07AD  30DD               	movlw	low (_WRITE_MASK| (0+32768))
   721  07AE  0084               	movwf	4
   722  07AF  3086               	movlw	high (_WRITE_MASK| (0+32768))
   723  07B0  0085               	movwf	5
   724  07B1  0800               	movf	0,w	;code access
   725  07B2  3811               	iorlw	17
   726  07B3  26EE               	fcall	_writeSPI
   727                           
   728                           ;transmitter.c: 128: writeSPI(0b00000001);
   729  07B4  3001               	movlw	1
   730  07B5  26EE               	fcall	_writeSPI
   731                           
   732                           ;transmitter.c: 129: LATCbits.LATC4 = 1;
   733  07B6  0022               	movlb	2	; select bank2
   734  07B7  160E               	bsf	14,4	;volatile
   735                           
   736                           ;transmitter.c: 130: LATCbits.LATC4 = 0;
   737  07B8  120E               	bcf	14,4	;volatile
   738                           
   739                           ;transmitter.c: 131: writeSPI(0x03 | WRITE_MASK);
   740  07B9  30DD               	movlw	low (_WRITE_MASK| (0+32768))
   741  07BA  0084               	movwf	4
   742  07BB  3086               	movlw	high (_WRITE_MASK| (0+32768))
   743  07BC  0085               	movwf	5
   744  07BD  0800               	movf	0,w	;code access
   745  07BE  3803               	iorlw	3
   746  07BF  26EE               	fcall	_writeSPI
   747                           
   748                           ;transmitter.c: 132: writeSPI(0b00000011);
   749  07C0  3003               	movlw	3
   750  07C1  26EE               	fcall	_writeSPI
   751                           
   752                           ;transmitter.c: 133: LATCbits.LATC4 = 1;
   753  07C2  0022               	movlb	2	; select bank2
   754  07C3  160E               	bsf	14,4	;volatile
   755                           
   756                           ;transmitter.c: 135: LATCbits.LATC4 = 0;
   757  07C4  120E               	bcf	14,4	;volatile
   758                           
   759                           ;transmitter.c: 136: writeSPI(0x10 | WRITE_MASK);
   760  07C5  30DD               	movlw	low (_WRITE_MASK| (0+32768))
   761  07C6  0084               	movwf	4
   762  07C7  3086               	movlw	high (_WRITE_MASK| (0+32768))
   763  07C8  0085               	movwf	5
   764  07C9  0800               	movf	0,w	;code access
   765  07CA  3810               	iorlw	16
   766  07CB  26EE               	fcall	_writeSPI
   767                           
   768                           ;transmitter.c: 137: for(uint8_t i = 0; i < 5; ++i) {
   769  07CC  01F4               	clrf	configureTX@i
   770  07CD  3005               	movlw	5
   771  07CE  0274               	subwf	configureTX@i,w
   772  07CF  1803               	btfsc	3,0
   773  07D0  2FDB               	goto	l71
   774  07D1                     l549:	
   775                           
   776                           ;transmitter.c: 138: writeSPI(0xE7);
   777  07D1  30E7               	movlw	231
   778  07D2  26EE               	fcall	_writeSPI
   779  07D3  3001               	movlw	1
   780  07D4  00F3               	movwf	??_configureTX
   781  07D5  0873               	movf	??_configureTX,w
   782  07D6  07F4               	addwf	configureTX@i,f
   783  07D7  3005               	movlw	5
   784  07D8  0274               	subwf	configureTX@i,w
   785  07D9  1C03               	skipc
   786  07DA  2FD1               	goto	l549
   787  07DB                     l71:	
   788                           
   789                           ;transmitter.c: 139: }
   790                           ;transmitter.c: 140: LATCbits.LATC4 = 1;
   791  07DB  0022               	movlb	2	; select bank2
   792  07DC  160E               	bsf	14,4	;volatile
   793                           
   794                           ;transmitter.c: 142: LATCbits.LATC4 = 0;
   795  07DD  120E               	bcf	14,4	;volatile
   796                           
   797                           ;transmitter.c: 143: writeSPI(0x0A | WRITE_MASK);
   798  07DE  30DD               	movlw	low (_WRITE_MASK| (0+32768))
   799  07DF  0084               	movwf	4
   800  07E0  3086               	movlw	high (_WRITE_MASK| (0+32768))
   801  07E1  0085               	movwf	5
   802  07E2  0800               	movf	0,w	;code access
   803  07E3  380A               	iorlw	10
   804  07E4  26EE               	fcall	_writeSPI
   805                           
   806                           ;transmitter.c: 144: for(uint8_t i = 0; i < 5; ++i) {
   807  07E5  01F5               	clrf	configureTX@i_288
   808  07E6  3005               	movlw	5
   809  07E7  0275               	subwf	configureTX@i_288,w
   810  07E8  1803               	btfsc	3,0
   811  07E9  2FFB               	goto	l73
   812  07EA                     l563:	
   813                           
   814                           ;transmitter.c: 145: writeSPI(TX_ADDR[i]);
   815  07EA  0875               	movf	configureTX@i_288,w
   816  07EB  3EDF               	addlw	low (_TX_ADDR| (0+32768))
   817  07EC  0084               	movwf	4
   818  07ED  3086               	movlw	high (_TX_ADDR| (0+32768))
   819  07EE  1803               	skipnc
   820  07EF  3E01               	addlw	1
   821  07F0  0085               	movwf	5
   822  07F1  0800               	movf	0,w	;code access
   823  07F2  26EE               	fcall	_writeSPI
   824  07F3  3001               	movlw	1
   825  07F4  00F3               	movwf	??_configureTX
   826  07F5  0873               	movf	??_configureTX,w
   827  07F6  07F5               	addwf	configureTX@i_288,f
   828  07F7  3005               	movlw	5
   829  07F8  0275               	subwf	configureTX@i_288,w
   830  07F9  1C03               	skipc
   831  07FA  2FEA               	goto	l563
   832  07FB                     l73:	
   833                           
   834                           ;transmitter.c: 146: }
   835                           ;transmitter.c: 147: LATCbits.LATC4 = 1;
   836  07FB  0022               	movlb	2	; select bank2
   837  07FC  160E               	bsf	14,4	;volatile
   838  07FD  0008               	return
   839  07FE                     __end_of_configureTX:	
   840                           
   841                           	psect	text3
   842  06EE                     __ptext3:	
   843 ;; *************** function _writeSPI *****************
   844 ;; Defined at:
   845 ;;		line 163 in file "transmitter.c"
   846 ;; Parameters:    Size  Location     Type
   847 ;;  data            1    wreg     unsigned char 
   848 ;; Auto vars:     Size  Location     Type
   849 ;;  data            1    1[COMMON] unsigned char 
   850 ;;  x               1    2[COMMON] unsigned char 
   851 ;; Return value:  Size  Location     Type
   852 ;;                  1    wreg      unsigned char 
   853 ;; Registers used:
   854 ;;		wreg
   855 ;; Tracked objects:
   856 ;;		On entry : 0/0
   857 ;;		On exit  : 0/0
   858 ;;		Unchanged: 0/0
   859 ;; Data sizes:     COMMON   BANK0   BANK1
   860 ;;      Params:         0       0       0
   861 ;;      Locals:         2       0       0
   862 ;;      Temps:          1       0       0
   863 ;;      Totals:         3       0       0
   864 ;;Total ram usage:        3 bytes
   865 ;; Hardware stack levels used:    1
   866 ;; This function calls:
   867 ;;		Nothing
   868 ;; This function is called by:
   869 ;;		_main
   870 ;;		_configureTX
   871 ;;		_transmitData
   872 ;; This function uses a non-reentrant model
   873 ;;
   874                           
   875                           
   876                           ;psect for function _writeSPI
   877  06EE                     _writeSPI:	
   878                           
   879                           ;incstack = 0
   880                           ; Regs used in _writeSPI: [wreg]
   881                           ;writeSPI@data stored from wreg
   882  06EE  00F1               	movwf	writeSPI@data
   883                           
   884                           ;transmitter.c: 165: uint8_t x;
   885                           ;transmitter.c: 166: SSP1BUF = data;
   886  06EF  0871               	movf	writeSPI@data,w
   887  06F0  0024               	movlb	4	; select bank4
   888  06F1  0091               	movwf	17	;volatile
   889  06F2                     l77:	
   890                           ;transmitter.c: 167: while(!SSP1STATbits.BF);
   891                           
   892  06F2  1C14               	btfss	20,0	;volatile
   893  06F3  2EF2               	goto	l77
   894                           
   895                           ;transmitter.c: 168: x = SSP1BUF;
   896  06F4  0811               	movf	17,w	;volatile
   897  06F5  00F0               	movwf	??_writeSPI
   898  06F6  0870               	movf	??_writeSPI,w
   899  06F7  00F2               	movwf	writeSPI@x
   900                           
   901                           ;transmitter.c: 169: return x;
   902  06F8  0872               	movf	writeSPI@x,w
   903  06F9  0008               	return
   904  06FA                     __end_of_writeSPI:	
   905                           
   906                           	psect	text4
   907  0707                     __ptext4:	
   908 ;; *************** function _blink *****************
   909 ;; Defined at:
   910 ;;		line 88 in file "transmitter.c"
   911 ;; Parameters:    Size  Location     Type
   912 ;;		None
   913 ;; Auto vars:     Size  Location     Type
   914 ;;		None
   915 ;; Return value:  Size  Location     Type
   916 ;;                  1    wreg      void 
   917 ;; Registers used:
   918 ;;		wreg
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMMON   BANK0   BANK1
   924 ;;      Params:         0       0       0
   925 ;;      Locals:         0       0       0
   926 ;;      Temps:          1       0       0
   927 ;;      Totals:         1       0       0
   928 ;;Total ram usage:        1 bytes
   929 ;; Hardware stack levels used:    1
   930 ;; This function calls:
   931 ;;		Nothing
   932 ;; This function is called by:
   933 ;;		_configureTX
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937                           
   938                           ;psect for function _blink
   939  0707                     _blink:	
   940                           
   941                           ;transmitter.c: 89: LATAbits.LATA0 = 1;
   942                           
   943                           ;incstack = 0
   944                           ; Regs used in _blink: [wreg]
   945  0707  0022               	movlb	2	; select bank2
   946  0708  140C               	bsf	12,0	;volatile
   947                           
   948                           ;transmitter.c: 90: _delay((unsigned long)((20)*(16000000/4000.0)));
   949  0709  3068               	movlw	104
   950  070A  00F0               	movwf	??_blink
   951  070B  30E4               	movlw	228
   952  070C                     u137:	
   953  070C  0B89               	decfsz	9,f
   954  070D  2F0C               	goto	u137
   955  070E  0BF0               	decfsz	??_blink,f
   956  070F  2F0C               	goto	u137
   957  0710  3200               	nop2
   958                           
   959                           ;transmitter.c: 91: LATAbits.LATA0 = 0;
   960  0711  0022               	movlb	2	; select bank2
   961  0712  100C               	bcf	12,0	;volatile
   962                           
   963                           ;transmitter.c: 92: _delay((unsigned long)((20)*(16000000/4000.0)));
   964  0713  3068               	movlw	104
   965  0714  00F0               	movwf	??_blink
   966  0715  30E4               	movlw	228
   967  0716                     u147:	
   968  0716  0B89               	decfsz	9,f
   969  0717  2F16               	goto	u147
   970  0718  0BF0               	decfsz	??_blink,f
   971  0719  2F16               	goto	u147
   972  071A  3200               	nop2
   973  071B  0008               	return
   974  071C                     __end_of_blink:	
   975                           
   976                           	psect	text5
   977  06E4                     __ptext5:	
   978 ;; *************** function _configIOTransmitter *****************
   979 ;; Defined at:
   980 ;;		line 79 in file "transmitter.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;		None
   983 ;; Auto vars:     Size  Location     Type
   984 ;;		None
   985 ;; Return value:  Size  Location     Type
   986 ;;                  1    wreg      void 
   987 ;; Registers used:
   988 ;;		wreg
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : 0/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMMON   BANK0   BANK1
   994 ;;      Params:         0       0       0
   995 ;;      Locals:         0       0       0
   996 ;;      Temps:          0       0       0
   997 ;;      Totals:         0       0       0
   998 ;;Total ram usage:        0 bytes
   999 ;; Hardware stack levels used:    1
  1000 ;; This function calls:
  1001 ;;		Nothing
  1002 ;; This function is called by:
  1003 ;;		_main
  1004 ;; This function uses a non-reentrant model
  1005 ;;
  1006                           
  1007                           
  1008                           ;psect for function _configIOTransmitter
  1009  06E4                     _configIOTransmitter:	
  1010                           
  1011                           ;transmitter.c: 80: TRISA = 0b11101110;
  1012                           
  1013                           ;incstack = 0
  1014                           ; Regs used in _configIOTransmitter: [wreg]
  1015  06E4  30EE               	movlw	238
  1016  06E5  0021               	movlb	1	; select bank1
  1017  06E6  008C               	movwf	12	;volatile
  1018                           
  1019                           ;transmitter.c: 81: TRISC = 0b11100010;
  1020  06E7  30E2               	movlw	226
  1021  06E8  008E               	movwf	14	;volatile
  1022                           
  1023                           ;transmitter.c: 82: OPTION_REGbits.nWPUEN = 0;
  1024  06E9  1395               	bcf	21,7	;volatile
  1025                           
  1026                           ;transmitter.c: 83: WPUAbits.WPUA5 = 1;
  1027  06EA  0024               	movlb	4	; select bank4
  1028  06EB  168C               	bsf	12,5	;volatile
  1029                           
  1030                           ;transmitter.c: 84: WPUAbits.WPUA1 = 1;
  1031  06EC  148C               	bsf	12,1	;volatile
  1032  06ED  0008               	return
  1033  06EE                     __end_of_configIOTransmitter:	
  1034                           
  1035                           	psect	text6
  1036  06FA                     __ptext6:	
  1037 ;; *************** function _SPI_init *****************
  1038 ;; Defined at:
  1039 ;;		line 213 in file "transmitter.c"
  1040 ;; Parameters:    Size  Location     Type
  1041 ;;		None
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;		None
  1044 ;; Return value:  Size  Location     Type
  1045 ;;                  1    wreg      void 
  1046 ;; Registers used:
  1047 ;;		wreg, status,2
  1048 ;; Tracked objects:
  1049 ;;		On entry : 0/0
  1050 ;;		On exit  : 0/0
  1051 ;;		Unchanged: 0/0
  1052 ;; Data sizes:     COMMON   BANK0   BANK1
  1053 ;;      Params:         0       0       0
  1054 ;;      Locals:         0       0       0
  1055 ;;      Temps:          0       0       0
  1056 ;;      Totals:         0       0       0
  1057 ;;Total ram usage:        0 bytes
  1058 ;; Hardware stack levels used:    1
  1059 ;; This function calls:
  1060 ;;		Nothing
  1061 ;; This function is called by:
  1062 ;;		_main
  1063 ;; This function uses a non-reentrant model
  1064 ;;
  1065                           
  1066                           
  1067                           ;psect for function _SPI_init
  1068  06FA                     _SPI_init:	
  1069                           
  1070                           ;transmitter.c: 214: SSP1CON1 = 0x00;
  1071                           
  1072                           ;incstack = 0
  1073                           ; Regs used in _SPI_init: [wreg+status,2]
  1074  06FA  0024               	movlb	4	; select bank4
  1075  06FB  0195               	clrf	21	;volatile
  1076                           
  1077                           ;transmitter.c: 215: SSP1STAT = 0b11000000;
  1078  06FC  30C0               	movlw	192
  1079  06FD  0094               	movwf	20	;volatile
  1080                           
  1081                           ;transmitter.c: 216: SSP1CON1 = 0b00000010;
  1082  06FE  3002               	movlw	2
  1083  06FF  0095               	movwf	21	;volatile
  1084                           
  1085                           ;transmitter.c: 217: PIR1bits.SSP1IF = 0;
  1086  0700  0020               	movlb	0	; select bank0
  1087  0701  1191               	bcf	17,3	;volatile
  1088                           
  1089                           ;transmitter.c: 218: PIE1bits.SSP1IE = 1;
  1090  0702  0021               	movlb	1	; select bank1
  1091  0703  1591               	bsf	17,3	;volatile
  1092                           
  1093                           ;transmitter.c: 219: SSP1CON1bits.SSPEN = 1;
  1094  0704  0024               	movlb	4	; select bank4
  1095  0705  1695               	bsf	21,5	;volatile
  1096  0706  0008               	return
  1097  0707                     __end_of_SPI_init:	
  1098  007E                     btemp	set	126	;btemp
  1099  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    8
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9       9
    BANK0            80      0       0
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_configureTX
    _main->_transmitData
    _transmitData->_writeSPI
    _configureTX->_writeSPI

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     240
                                              6 COMMON     3     3      0
                           _SPI_init
                _configIOTransmitter
                        _configureTX
                       _transmitData
                           _writeSPI
 ---------------------------------------------------------------------------------
 (1) _transmitData                                         3     3      0      75
                                              3 COMMON     3     3      0
                           _writeSPI
 ---------------------------------------------------------------------------------
 (1) _configureTX                                          3     3      0     105
                                              3 COMMON     3     3      0
                              _blink
                           _writeSPI
 ---------------------------------------------------------------------------------
 (1) _writeSPI                                             3     3      0      30
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _blink                                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _configIOTransmitter                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init
   _configIOTransmitter
   _configureTX
     _blink
     _writeSPI
   _transmitData
     _writeSPI
   _writeSPI

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       9       2       64.3%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0       0       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun May 14 20:11:39 2017

                ?_configureTX 0070                   __CFG_CP$OFF 0000                            l71 07DB  
                          l73 07FB                            l77 06F2                            l69 0792  
                          u90 076C                    _WRITE_MASK 06DD                           l511 078B  
                         l607 0754                           l563 07EA                           l619 076E  
                         l549 07D1                           u127 072B                           u137 070C  
                         u147 0716                  __CFG_BORV$LO 0000                           wreg 0009  
                __CFG_LVP$OFF 0000                  _transmitData 071C                  __CFG_WRT$OFF 0000  
                        _main 074B                          fsr0h 0005                          indf0 0000  
                        fsr0l 0004                          btemp 007E                          start 0001  
             __end_of_TX_ADDR 06E4                 __CFG_MCLRE$ON 0000                  configureTX@i 0074  
                       ?_main 0070                 __CFG_WDTE$OFF 0000                         _TRISA 008C  
                       _TRISC 008E                         _blink 0707                __CFG_BOREN$OFF 0000  
            __end_of_SPI_init 0707                         status 0003                         wtemp0 007E  
             __initialization 07FE                  __end_of_main 077C                __CFG_LPBOR$OFF 0000  
                      ??_main 0076             __end_of_READ_MASK 06DF                        ?_blink 0070  
              __CFG_PWRTE$OFF 0000          __end_of_W_TX_PAYLOAD 06DD                __CFG_STVREN$ON 0000  
        __size_of_configureTX 0082              __end_of_writeSPI 06FA       __end_of__initialization 07FE  
              __pcstackCOMMON 0070                 __end_of_blink 071C                     ?_SPI_init 0070  
              _OPTION_REGbits 0095                       ??_blink 0070              configureTX@i_288 0075  
                  __pmaintext 074B  __size_of_configIOTransmitter 000A                    ??_SPI_init 0070  
                     _SSP1BUF 0211                       _TX_ADDR 06DF                     ?_writeSPI 0070  
                     __ptext1 071C                       __ptext2 077C                       __ptext3 06EE  
                     __ptext4 0707                       __ptext5 06E4                       __ptext6 06FA  
                _W_TX_PAYLOAD 06DC          end_of_initialization 07FE                  writeSPI@data 0071  
                   _READ_MASK 06DE            __end_of_WRITE_MASK 06DE                    ??_writeSPI 0070  
                   _PORTAbits 000C              __CFG_FOSC$INTOSC 0000                 ??_configureTX 0073  
            transmitData@data 0074              transmitData@sreg 0075           start_initialization 07FE  
           __size_of_SPI_init 000D           _configIOTransmitter 06E4                 ?_transmitData 0070  
        ?_configIOTransmitter 0070           __end_of_configureTX 07FE                     ___latbits 0000  
              ??_transmitData 0073         ??_configIOTransmitter 0070             __size_of_writeSPI 000C  
              __size_of_blink 0015                      _LATAbits 010C                      _LATCbits 010E  
                    _PIE1bits 0091                      _PIR1bits 0011                   _configureTX 077C  
                    _SSP1CON1 0215                      _SSP1STAT 0214                      _SPI_init 06FA  
                    _WPUAbits 020C          __end_of_transmitData 074B                  _SSP1CON1bits 0215  
               __size_of_main 0031                      main@data 0077                  _SSP1STATbits 0214  
                    main@last 0078                      _writeSPI 06EE             __CFG_CLKOUTEN$OFF 0000  
                   writeSPI@x 0072                 __pstringtext1 06DF                 __pstringtext2 06DE  
               __pstringtext3 06DD                 __pstringtext4 06DC   __end_of_configIOTransmitter 06EE  
       __size_of_transmitData 002F  
